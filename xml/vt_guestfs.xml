<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<chapter id="chap.guestfs" lang="en">
 <title>libguestfs</title>
 <para>
  Virtual machine consist of disk image(s) and definitions files.
  Disk image can be mounted loop, and definition files can be edited, but this 
  kind of operation is dangerous.
 </para>
 
 <sect1 id="sec.guestfs.intro">
  <title>VM manipulation overview</title>
  <para></para>
  <sect2 id="sec.guestfs.intro.risk">
   <title>VM manipulation risk</title>
   <para>
    Manipulation of VM disk image can lead to several issues:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      <emphasis>data corruption</emphasis>:
      host machine and cluster nodes config files changes can be lost if layers
      are bypassed
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>security</emphasis>: mount loop requires root access, and other user on the machine
      can potentially access the device while loop
     </para>
    </listitem>
    <listitem>
     <para>
      <emphasis>administration error</emphasis>: failing isolation, failing to clean up properly
      after bypassing virtualization layer
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2 id="sec.guestfs.intro.design">
   <title>libguestfs design</title>
   <para>
     libguestfs C library has been designed to safely and securely create access and modify
     virtual machine disk images. It provides also additionnal language bindings:
     for 
     <ulink url="http://libguestfs.org/guestfs-perl.3.html">Perl</ulink>,
     <ulink url="http://libguestfs.org/sys::Guestfs.3.html">Sys::Guestfs</ulink>,
     <ulink url="http://libguestfs.org/guestfs-python.3.html">Python</ulink>,
     PHP (only for 64-bit machines), <ulink
     url="http://libguestfs.org/guestfs-ruby.3.html">
     Ruby</ulink>.
     libguestfs can access VM disk image without needing root and with
     multiple layers of defence against rogue disk images.
   </para>
   <para>
    libguestfs has been designed for accessing and modifying virtual machine
    (VM) disk images. You can use this tool for viewing and editing files inside
    guests, scripting changes to VMs, monitoring disk used/free statistics,
    creating guests, doing V2V, performing backups, cloning VMs,
    formatting disks, resizing disks.
   </para>
  <warning>
   <title>Best practices</title>
   <para>
    You must not use libguestfs tools on live virtual machines. Doing so will
    probably result in disk corruption in the VM. libguestfs tools tries to stop
    you from doing this, but doesn't catch all cases.
   </para>
   <para>
    However most command have the <option>--ro</option> (read only) option,
    then you can attach a shell to a live virtual machine. The results might
    be strange or inconsistent at times but you won't get disk corruption.
   </para>
  </warning>
  </sect2>
 </sect1>

 <sect1 id="sec.guestfs.package">
  <title>Package installation</title>
  <para>
   libguestfs is shipped into 3 packages:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     libguestfs0: which provide the main C library
    </para>
   </listitem>
   <listitem>
    <para>
     guestfs-data: which contains kernel and initrd used when launching images
     (stored in <filename>/usr/lib64/guestfs</filename>)
    </para>
   </listitem>
   <listitem>
    <para>
     guestfs-tools: the core tools on guestfs and man pages, and the
     <filename>/etc/libguestfs-tools.conf</filename> configuration file.
    </para>
   </listitem>
  </itemizedlist>
  <para>
   To install guestfs tools on your system just do:
  </para>
  <screen>zypper in guestfs-tools</screen>
 </sect1>
 
 <sect1 id="sec.guestfs.tools">
  <title>Guestfs tools</title>
  <para>
  </para>  
  <sect2 id="sec.guestfs.tools.intro">
   <title>Modification of Virtual Machine</title>
   <para>
    This set of tools is used for accessions and modifying virtual machine
    disk images. This is a safe shell way to examine and manipulate virtual
    disk images. It exposes all capabilities of the guestfs API, and use the
    kernel and initrd found in <filename>/usr/lib4/guestfs</filename>.
   </para>
  </sect2>
  <sect2 id="sec.guestfs.tools.supportefs">
   <title>Supported Filesystem/disk image</title>
   <para>
    Guestfs tools support support various filesystem like:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Ext2, Ext3, Ext4
     </para>
    </listitem>
    <listitem>
     <para>
      Xfs
     </para>
    </listitem>
    <listitem>
     <para>
      Brtfs
     </para>
    </listitem>
    </itemizedlist>
    <para>
     It supports also many disk image formats:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       raw
      </para>
     </listitem>
     <listitem>
      <para>
       qcow2
      </para>
     </listitem>
    </itemizedlist>
    <warning>
     <title>Unsupported Filesystem</title>
     <para>
      Even if guestfs may support Windows* filesystem (VFAT, NTFS), BSD* and Apple* filesystem,
      and other disk image format (VMDK, VHDX...), these filesystems and disk images
      format are unsupported on &sle;.
     </para>
    </warning>
  </sect2>
  <sect2 id="sec.guestfs.tools.virt-rescue">
   <title>virt-rescue</title>
   <para>
    <command>virt-rescue</command> is like a Rescue CD, but for virtual
    machines, and without the need for a CD. virt-rescue gives you a rescue
    shell and some simple recovery tools which you can use to examine or 
    rescue a virtual machine or disk image.
   </para>
   <screen>&prompt.user; virt-rescue -a sles11sp3-64.qcow2 

Welcome to virt-rescue, the libguestfs rescue shell.

Note: The contents of / are the rescue appliance.
You have to mount the guest's partitions under /sysroot
before you can examine them. A helper script for that exists:
mount-rootfs-and-do-chroot.sh /dev/sda2

&gt;&lt;rescue&gt; 
[   67.194384] EXT4-fs (sda1): mounting ext3 file system
using the ext4 subsystem
[   67.199292] EXT4-fs (sda1): mounted filesystem with ordered data
mode. Opts: (null)
mount: /dev/sda1 mounted on /sysroot.
mount: /dev bound on /sysroot/dev.
mount: /dev/pts bound on /sysroot/dev/pts.
mount: /proc bound on /sysroot/proc.
mount: /sys bound on /sysroot/sys.
Directory: /root
Thu Jun  5 13:20:51 UTC 2014
(none):~ #
   </screen>
   <para>You are now running the VM in rescue mode:</para>
   <screen>(none):~ # cat /etc/fstab 
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
  </sect2>
  <sect2 id="sec.guestfs.tools.virt-resize">
   <title>virt-resize</title>
   <para>
    <command>virt-resize</command> is a tool which can resize a virtual
    machine disk, making it larger or smaller overall, and resizing or
    deleting any partitions contained within.
   </para>
   <procedure id="pro.guestfs.tools.virt-resize">
    <title>Expanding a disk</title>
    <para>Full step by step example how to exand a virtual machine disk</para>
    <step>
     <para>First your virtual machine must be off. Then find out the size of
     the partition available on this virtual machine:
     </para>
     <screen>&prompt.user; virt-filesystems --long --parts --blkdevs -h -a sles11sp3-64.qcow2
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   16G   /dev/sda
/dev/sda   device     -    16G   -</screen>
    </step>
    <step>
     <para>
      <command>virt-resize</command> can not do in-place disk modification.
      You need to have space to store the resized output disk. Use the
      <command>truncate</command> command to create a file of suitable size:
     </para>
     <screen>&prompt.user; truncate -s 32G outdisk.img</screen>
    </step>
    <step>
     <para>Then use <command>virt-resize</command> which needs to mandatory
     parameter, the input disk, and the output disk.</para>
     <screen>&prompt.user; virt-resize --expand /dev/sda1 sles11sp3-64.qcow2 outdisk.img
Examining sles11sp3-64.qcow2 ...
**********
Summary of changes:

/dev/sda1: This partition will be resized from 16,0G to 32,0G.  The 
    filesystem ext3 on /dev/sda1 will be expanded using the 'resize2fs' 
    method.

**********
Setting up initial partition table on outdisk.img ...
Copying /dev/sda1 ...
◐ 84%
⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒════════⟧ 00:03
Expanding /dev/sda1 using the 'resize2fs' method ...

Resize operation completed with no errors.  Before deleting the old 
disk, carefully check that the resized disk boots and works correctly.</screen>
    </step>
    <step>
     <para>The size should be 32G now:</para>
     <screen>&prompt.user; virt-filesystems --long --parts --blkdevs -h -a outdisk.img
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   32G   /dev/sda
/dev/sda   device     -    32G   -</screen>
    </step>
    <step>
     <para>
      Then check that the resized disk is usable before deleting the old one.
     </para>
    </step>
   </procedure>
  </sect2>
  <sect2 id="sec.guestfs.tools.others">
   <title>other virt-* tools</title>
   <para>
    These tools are very usefull for viewing and editing files, or grab
    information on the virtual machine.
   </para>
   <sect3 id="sec.guestfs.tools.others.filesystem">
    <title>virt-filesystems</title>
    <para>
     This tool allows you to discover filesystems, partitions, logical
     volumes, and their sizes in a disk image or virtual machine.
    </para>
    <screen>&prompt.user; virt-filesystems -l -a sles11sp3-64.qcow2 
Name       Type        VFS   Label  Size         Parent
/dev/sda1  filesystem  ext3  -      17178820608  -</screen>
   </sect3>
   <sect3 id="sec.guestfs.tools.others.ls">
    <title>virt-ls</title>
    <para>
     <command>virt-ls</command> lists filenames, file sizes, checksums, extended attributes and
     more from a virtual machine or disk image.
     Multiple directory names can be given, in which case the output from each is
     concatenated.
     To list directories from a libvirt guest use the <option>-d</option> option to specify the name
     of the guest. For a disk image, use the <option>-a</option> option.
    </para>
    <screen>&prompt.user; virt-ls -h -lR -a sles11sp3-64.qcow2 /var/log/ 
d 0755       4,0K /var/log/
d 0700       4,0K /var/log//YaST2
- 0644       1,9K /var/log//YaST2/mkinitrd.log
- 0644        496 /var/log//YaST2/perl-BL-standalone-log
- 0600       3,2K /var/log//faillog
d 0700       4,0K /var/log//krb5
- 0644        29K /var/log//lastlog
- 0644        496 /var/log//pbl.log
- 0664          0 /var/log//wtmp
d 0755       4,0K /var/log//zypp</screen>
   </sect3>
   <sect3 id="sec.guestfs.tools.others.cat">
    <title>virt-cat</title>
    <para>
     <command>virt-cat</command> is a command line tool to display the contents of file where file
     exists in the named virtual machine (or disk image).
     Multiple filenames can be given, in which case they are concatenated
     together. Each filename must be a full path, starting at the root
     directory (starting with '/').
    </para>
    <screen>&prompt.user; virt-cat -a sles11sp3-64.qcow2 /etc/fstab
devpts /dev/pts devpts mode=0620,gid=5 0 0 
proc   /proc    proc   defaults        0 0</screen>
   </sect3>
   <sect3 id="sec.guestfs.tools.others.df">
    <title>virt-df</title>
    <para>
     <command>virt-df</command> is a command line tool to display free space on virtual machine
     filesystems. Unlike other tools, it doesn't just display the size of disk
     allocated to a virtual machine, but can look inside disk images to see
     how much space is really being used.
    </para>
    <screen>&prompt.user; virt-df -a sles11sp3-64.qcow2 
Filesystem                           1K-blocks       Used  Available  Use%
sles11sp3-64.qcow2:/dev/sda1          16381864     520564   15022492  4%</screen>
   </sect3>
   <sect3 id="sec.guestfs.tools.others.edit">
    <title>virt-edit</title>
    <para>
     <command>virt-edit</command> is a command line tool to edit file where each file exists in
     the named virtual machine (or disk image).
    </para>
   </sect3>
   <sect3 id="sec.guestfs.tools.others.tar">
    <title>virt-tar-in/out</title>
    <para>
     <command>virt-tar-in</command> unpacks an uncompressed tarball into a virtual machine disk
     image or named libvirt domain.
     <command>virt-tar-out</command> packs a virtual machine disk image directory into a tarball.
    </para>
    <screen>&prompt.user; virt-tar-out -a sles11sp3-64.qcow2 /home homes.tar</screen>
   </sect3>   
   <sect3 id="sec.guestfs.tools.others.copy">
    <title>virt-copy-in/out</title>
    <para>
     <command>virt-copy-in</command> copies files and directories from the local disk into a
     virtual machine disk image or named libvirt domain.
     <command>virt-copy-out</command> copies files and directories out of a virtual
     machine disk image or named libvirt domain.
    </para>
    <screen>&prompt.user; virt-copy-in -a sles11sp3-64.qcow2 data.tar /tmp/
virt-ls -a sles11sp3-64.qcow2 /tmp/
.ICE-unix
.X11-unix
data.tar</screen>
   </sect3>
  </sect2>
  <sect2 id="sec.guestfs.guestfish">
   <title>guestfish</title>
   <para>
    <command>guestfish</command> is a shell and command-line tool for examining and modifying
    virtual machine filesystems. It uses libguestfs and exposes all of the
    functionality of the guestfs API.
   </para>
   <para>Examples of usage:</para>
   <screen>&prompt.user; guestfish -a disk.img &lt;&lt;EOF
run
list-filesystems
EOF</screen>
<screen>guestfish 

Welcome to guestfish, the guest filesystem shell for
editing virtual machine filesystems and disk images.

Type: 'help' for help on commands
      'man' to read the manual
      'quit' to quit the shell

&gt;&lt;fs&gt; add sles11sp3-64.qcow2
&gt;&lt;fs&gt; run
&gt;&lt;fs&gt; list-filesystems 
/dev/sda1: ext3
&gt;&lt;fs&gt; mount /dev/sda1 /
 cat /etc/fstab 
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
  </sect2>
  
 </sect1>
 <sect1 id="sec.guestfs.trouble">
  <title>Troubleshooting</title>
  <para>
  </para>
  <sect2 id="sec.guestfs.trouble.env">
   <title>Environment</title>
   <para>
    If you think there is some problem inside the libguestfs appliance
    you should use <emphasis>LIBGUESTFS_DEBUG=1</emphasis> in order to enable
    debug messages. To out each command/API call in a format which is similar
    to guestfish commands use <emphasis>LIBGUESTFS_TRACE=1</emphasis>
   </para>
  </sect2>
  <sect2 id="sec.guestfs.trouble.tools">
   <title>libguestfs-test-tool</title>
   <para>
    <command>libguestfs-test-tool</command> is a test program which check basic libguestfs
    functionality are working. It will print lots of diagnostic messages,
    guestfs environment, and will create a test image and tries to start it.
    If it runs to completion successfully, you will see this near the end:
   </para>
   <screen>===== TEST FINISHED OK =====</screen>
  </sect2>
 </sect1>

 <sect1 id="sec.guestfs.external.doc">
  <title>External references</title>
  <para></para>
  <itemizedlist>
   <listitem>
    <para>
     <ulink url="http://libguestfs.org">libguestfs.org</ulink>
    </para>
   </listitem>
   <listitem>
    <para>
     <ulink url="http://libguestfs.org/guestfs-faq.1.html">libguestfs FAQ</ulink>
    </para>
   </listitem>
<!--   <listitem>
    <para>
     <ulink url="http://libguestfs.org/guestfs-release-notes.1.html">guestfs
     release notes</ulink>
    </para>
   </listitem> -->
  </itemizedlist>
 </sect1>
</chapter>
