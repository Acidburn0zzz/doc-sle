<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="cha.update.sle">
 <title>Updating &sle;</title>
 <abstract>
  <para>
   &slereg; (&slea;) allows to update an existing system to the new version,
   for example, going from &slea; 11 SP3 to &slea; 12. No new installation
   is needed. Existing data, such as home and data directories and system
   configuration, is kept intact. You can update from a local CD or DVD
   drive or from a central network installation source.
  </para>

  <para>
   This chapter first gives background information on the &suse; product
   lifecycles and Service Pack releases, recommended upgrade policies and on
   &suse; backports, which are cherry-picked fixes to our stable enterprise
   releases.
  </para>

  <para>
   If you are familiar with &sle; updates, upgrades and service packs in
   general, you can skip the background section and jump right to the
   <remark>link</remark>
   update overview section, which shows the available update possibilities
   and guides you in planning the overall update.
  </para>

  <para>
   The rest of the chapter gives step-by-step update instructions to the
   current release, &productname; &productnumber;.
  </para>
 </abstract>
 <important>
  <title>Cross-architecture Upgrades Are Not Supported</title>
  <para>
   Cross-architecture upgrades, such as upgrading from a 32-bit version of
   &productname; to the 64-bit version, or upgrading from &slea; 11 SP3 on
   &ppc; (big endian) to &slea; 12 on &ppc; (new: little endian!), are
   <emphasis>not</emphasis> supported.
  </para>
 </important>
 <sect1 id="sec.update.terminology">
  <title>Background Info: Terminology</title>

  <para>
   This chapter uses several terms. In order to understand the information,
   read the definitions below:
  </para>

  <variablelist>
   <varlistentry>
    <term>Backporting</term>
    <listitem>
     <para>
      Backporting is the act of adapting specific changes from a newer
      version of software and applying it to an older version. The most
      commonly used case is fixing security holes in older software
      components. Usually it is also part of a maintenance model to supply
      enhancements or (less commonly) new features.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Delta RPM</term>
    <listitem>
     <para>
      A delta RPM consists only of the binary diff between two defined
      versions of a package, and therefore has the smallest download size.
      Before being installed, the full RPM package is rebuilt on the local
      machine.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Downstream</term>
    <listitem>
     <para>
      A metaphor of how software is developed in the open source world
      (compare it with <emphasis>upstream</emphasis>). The term
      <emphasis>downstream</emphasis> refers to people or organizations like
      &suse; who integrate the source code from upstream with other software
      to build a distribution which is then used by end users. Thus, the
      software flows downstream from its developers via the integrators to
      the end users.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Extensions</term>
    <term>Add-On Products</term>
    <listitem>
     <para>
      <remark>froh 2014-06-03: review</remark>
      Extensions (also known as add-on products) provide additional
      functionality of product value to &productname;. They are provided by
      SUSE and by SUSE partners, and they are registered and installed on
      top of the base product &productname;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Modules</term>
    <listitem>
     <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
		 href="inst_yast2.xml"
		 xpointer="ann.i.yast2.inst_mode.add-on.modules/2"/>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Online Migration</term>
    <listitem>
     <para>
      Updating to a Service Pack (SP) by using the online update tools
      (rather than the installation media) to install the respective
      patches. It updates all packages of the installed system to the latest
      state&mdash;including updates&mdash;of SP3 plus SP2 updates.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Package</term>
    <listitem>
     <para>
      A package is a compressed file in <literal>rpm</literal> format that
      contains all files for a particular program, including optional
      components like configuration, examples, and documentation.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
<!-- Taken from yast2_sw.xml -->
    <term>Patch</term>
    <listitem>
     <para>
      A patch consists of one or more packages and may be applied by means
      of delta RPMs. It may also introduce dependencies to packages that are
      not installed yet.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Service Packs (SP)</term>
    <listitem>
     <para>
      Combines several patches into a form which is easy to install or
      deploy. Service packs are numbered and usually contain security fixes,
      updates, upgrades, or enhancements of programs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upstream</term>
    <listitem>
     <para>
      A metaphor of how software is developed in the open source world
      (compare it with <emphasis>downstream</emphasis>). The term
      <emphasis>upstream</emphasis> refers to the original project, author
      or maintainer of a software that is distributed as source code.
      Feedback, patches, feature enhancements, or other improvements flow
      from end users or contributors to upstream developers. They decide if
      the request will be integrated or rejected.
     </para>
     <para>
      If the project members decide to integrate the request, it will show
      up in newer versions of the software. An accepted request will benefit
      all parties involved.
     </para>
     <para>
      If a request is not accepted, it may be for different reasons. Either
      it is in a state which is not compliant with the project's guidelines,
      it is invalid, it is already integrated, or it is not in the interest
      or roadmap of the project. An unaccepted request makes it harder for
      upstream developers as they need to synchronize their patches with the
      upstream code. This practice is generally avoided, but sometimes it is
      still needed.
     </para>
    </listitem>
   </varlistentry>
<!-- Taken from FATE#308189, see also bnc#711791 -->
   <varlistentry>
    <term>Update</term>
    <listitem>
     <para>
      Installation of a newer <emphasis>minor</emphasis> version of a
      package.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrade</term>
    <listitem>
     <para>
      Installation of a newer <emphasis>major</emphasis> version of a
      package or distribution, which brings <emphasis>new
      features</emphasis>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.update.nmm">
  <title>Background info: The Product Lifecycle of &sle;</title>

  <para>
   <remark>
    <uri>http://support.novell.com/lifecycle/</uri>
    <uri>https://www.suse.com/support/policy.html</uri>
    <uri>https://www.suse.com/support/self-support.html</uri>
    <uri>https://www.novell.com/docrep/2013/04/long_term_service_pack_support_flyer.pdf</uri>
   </remark>
   &sls; has a 13-year life-cycle: 10 years of general support and 3 years
   of extended support.
  </para>

  <para>
   &sled; has a 10-year life-cycle: 7 years of general support and 3 years
   of extended support.
  </para>

  <para>
   Major releases are made every 4 years.  Service packs are made
   every 18 months.
  </para>

  <para>
   &suse; supports previous service packs for 6 months after the release of
   the new service pack. <xref linkend="fig.update.releases.service.packs"/>
   depicts some of the mentioned aspects.
  </para>

  <figure id="fig.update.releases.service.packs">
   <title>Major Releases and Service Packs</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="new-maintenance-model.svg"  width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="new-maintenance-model.png" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>
   If you need additional time to design, validate and test your upgrade
   plans, Long Term Service Pack Support can extend the support you get an
   additional 12 to 36 months in twelve month increments, giving you a total
   of 3 to 5 years of support on any given service pack (see
   <xref
   linkend="fig.update.maintenance.long-term-service-pack"/>).
  </para>

  <figure id="fig.update.maintenance.long-term-service-pack">
   <title>Long Term Service Pack Support</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="long-term-service-pack-support.svg" 
		 width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="long-term-service-pack-support.png"
		 width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <sect2 id="sec.update.supportlevel-lifecycle">
   <title>Support Levels</title>
   <para>
    The range for extended support levels starts from year 10 and ends in
    year 13. These contain continued L3 engineering level diagnosis and
    reactive critical bug fixes. These support levels proactively update
    trivial local root exploits in Kernel or other root exploits directly
    executable without user interaction. Furthermore they support existing
    workloads, software stacks, and hardware with limited package exclusion
    list. Find an overview in <xref linkend="tab.security-and-bug-fixes"/>.
   </para>
   <table id="tab.security-and-bug-fixes">
    <title>Security Updates and Bug Fixes</title>
    <tgroup cols="6">
     <colspec colname="c1"/>
     <colspec colname="c2"/>
     <colspec colname="c3"/>
     <colspec colname="c4"/>
     <colspec colname="c5"/>
     <colspec colname="c6"/>
     <thead>
      <row>
       <entry/>
       <entry namest="c2" nameend="c4" align="center">
        <para>
         General Support for Most Recent Service Pack (SP)
        </para>
       </entry>
       <entry>
        <para>
         General Support for Previous SP, with LTSS
        </para>
       </entry>
       <entry>
        <para>
         Extended Support with LTSS
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Feature
        </para>
       </entry>
       <entry>
        <para>
         Year 1-5
        </para>
       </entry>
       <entry>
        <para>
         Year 6-7
        </para>
       </entry>
       <entry>
        <para>
         Year 8-10
        </para>
       </entry>
       <entry>
        <para>
         Year 4-10
        </para>
       </entry>
       <entry>
        <para>
         Year 10-13
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Technical Services
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Access to Patches and Fixes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Access to Documentation and Knowledge Base
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Support for Existing Stacks and Workloads
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Support for New Deployments
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Enhancement Requests
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Hardware Enablement and Optimization
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Driver updates via SUSE SolidDriver Program (formerly PLDP)
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         No
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Backport of Fixes from recent SP
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Based on partner and customer requests)
        </para>
       </entry>
       <entry>
        <para>
         N/A
        </para>
       </entry>
       <entry>
        <para>
         N/A
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Critical Security Updates
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Defect Resolution
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Yes
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Severity Level 1 and 2 defects only)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Severity Level 1 and 2 defects only)
        </para>
       </entry>
       <entry>
        <para>
         Limited
         (Severity Level 1 and 2 defects only)
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 id="sec.update.nmm.channels">
   <title>Channel Model</title>

   <para>
    The channel layout corresponds to the product lifecycles.  <xref
    linkend="tab.update.nmm.channels.sp2"/> contains a list of all
    channels from &sle; 11 SP2 to &sle; 12.
   </para>
   <table id="tab.update.nmm.channels.sp2">
    <title>Channel Layout for &sle; 11 SP2 and SP3 and for &sle; 12</title>
<!-- 
         toms 2013-03-20:
         Used simplelist here as it turned out itemizedlist occupies too
         much space
    -->
    <tgroup cols="3">
     <colspec colnum="1" colname="c1" colwidth="1.2*"/>
     <colspec colnum="2" colname="c2" colwidth="3*"/>
     <colspec colnum="3" colname="c3" colwidth="3*"/>
     <thead>
      <row>
       <entry>
        <para>
         Type
        </para>
       </entry>
       <entry>
        <para>
         &slsa;
        </para>
       </entry>
       <entry>
        <para>
         &sleda;
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>
         Required Channels
        </para>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP1-Pool</literal>
         </member>
         <member><literal>&slsa;11-SP1-Updates</literal>
         </member>
         <member><literal>&slsa;11-SP2-Core</literal>
         </member>
         <member><literal>&slsa;11-SP2-Updates</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP3-Pool</literal>
         </member>
         <member><literal>&slsa;11-SP3-Updates</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&slsa;12-GA-Pool</literal>
         </member>
         <member><literal>&slsa;12-GA-Updates</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP1-Pool</literal>
         </member>
         <member><literal>&sleda;11-SP1-Updates</literal>
         </member>
         <member><literal>&sleda;11-SP2-Core</literal>
         </member>
         <member><literal>&sleda;11-SP2-Updates</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP3-Pool</literal>
         </member>
         <member><literal>&sleda;11-SP3-Updates</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&sleda;12-GA-Pool</literal>
         </member>
         <member><literal>&sleda;12-GA-Updates</literal>
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         Optional Channels
        </para>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP2-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;11-SP2-Debuginfo-Updates</literal>
         </member>
         <member><literal>&slsa;11-Extras</literal>
         </member>
         <member><literal>&slsa;11-SP2-Extension-Store</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&slsa;11-SP3-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;11-SP3-Debuginfo-Updates</literal>
         </member>
         <member><literal>&slsa;11-SP3-Extension-Store</literal>
         </member>
         <member><literal>&slsa;11-Extra</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&slsa;12-GA-Debuginfo-Core</literal>
         </member>
         <member><literal>&slsa;12-GA-Debuginfo-Updates</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         11 SP2
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP2-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;11-SP2-Debuginfo-Updates</literal>
         </member>
         <member><literal>&sleda;11-Extras</literal>
         </member>
         <member><literal>&sleda;11-SP2-Extension-Store</literal>
         </member>
        </simplelist>
        <para>
         11 SP3
        </para>
        <simplelist>
         <member><literal>&sleda;11-SP3-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;11-SP3-Debuginfo-Updates</literal>
         </member>
         <member><literal>&sleda;11-SP3-Extension-Store</literal>
         </member>
         <member><literal>&sleda;11-Extra</literal>
         </member>
        </simplelist>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>&sleda;12-GA-Debuginfo-Core</literal>
         </member>
         <member><literal>&sleda;12-GA-Debuginfo-Updates</literal>
         </member>
        </simplelist>
       </entry>
      </row>
      <row>
       <entry>
        <para>
         NEW: <emphasis>Module</emphasis> Specific Channels
        </para>
       </entry>
       <entry>
        <para>
         12
        </para>
        <simplelist>
         <member><literal>sle-module-web-scripting</literal>
         </member>
         <member><literal>sle-module-adv-systems-management</literal>
         </member>
         <member><literal>sle-module-public-cloud</literal>
         </member>
         <member><literal>sle-module-legacy</literal>
         </member>
        </simplelist>
       </entry>
       <entry>
        <para>
         12<remark>2014-07-23 froh: are these the same for SLES and SLED?</remark>
        </para>
        <simplelist>
         <member><literal>sle-module-web-scripting</literal>
         </member>
         <member><literal>sle-module-adv-systems-management</literal>
         </member>
         <member><literal>sle-module-public-cloud</literal>
         </member>
         <member><literal>sle-module-legacy</literal>
         </member>
        </simplelist>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <variablelist>
    <title>Description of Required Channels</title>
    <varlistentry>
     <term>Updates</term>
     <listitem>
      <para>
       Maintenance updates to packages in the corresponding
       <literal>Core</literal> or <literal>Pool</literal> repository.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Pool</term>
     <listitem>
      <para>
       Containing all binary RPMs from the installation media, plus pattern
       information and support status metadata.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <variablelist>
    <title>Description of Optional Channels</title>
    <varlistentry>
     <term>Debuginfo-Pool</term>
     <term>Debuginfo-Updates</term>
     <listitem>
      <para>
       These channels contain static content. Of these two, only the
       <literal>Debuginfo-Updates</literal> channel receives updates. Enable
       these channels if you need to install libraries with debug
       information in case of an issue.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <sect3 id="sec.update.nmm.channels.origin">
    <title>Origin of Packages</title>
    <formalpara>
     <title>&sle; 11 SP3</title>
     <para>
      With the installation of SP3 there are only two channels available:
      <literal
        os="sles">&slsa;11-SP3-Pool</literal><literal
        os="sled">&sleda;11-SP3-Pool</literal>
      and
      <literal
        os="sles">&slsa;11-SP3-Updates</literal><literal
        os="sled">&sleda;11-SP3-Updates</literal>.
      Any previous channels from SP2 are visible, but not enabled. These
      disabled channels are only needed for users who have particular needs.
     </para>
    </formalpara>
   </sect3>
   <sect3 id="sec.update.nmm.channels.working">
    <title>Working with Channels</title>
    <para>
     On registration, the system receives channels from the &ncc;. The
     channel names map to specific URIs in the customer center (see
     <ulink url="&sccurl;"/>). To list all available channels on your
     system, use <command>zypper</command> as follows:
    </para>
<screen>zypper repos -u</screen>
<!-- zypper lr -u -->
    <para>
     This gives you a list of all available channels on your system. Each
     channel is listed by its alias, name and whether it is enabled and will
     be refreshed. The option <option>-u</option> gives you also the URI
     from where it originated.
    </para>
    <para>
     If you want to remove old channels (for example, from SP1), use
     <command>zypper removerepo</command> and the name(s) of the channel(s).
     For example, to remove the old SP1 and SP2 channels, use the following
     command:
    </para>
<screen>zypper removerepo SLES11-SP1-Pool SLES11-SP1-Updates \
    SLE11-SP1-Debuginfo-Pool SLE11-SP1-Debuginfo-Updates \
    SLES11-SP2-Core SLES11-SP2-Updates \
    SLE11-SP2-Debuginfo-Core SLES11-SP2-Extension-Store\
    SLE11-SP2-Debuginfo-Updates</screen>
    <para>
     If you want to re-add some of your channels, log in to
     <ulink
       url="&sccurl;"/> and select from the menu <menuchoice>
     <guimenu>My Products</guimenu> <guimenu>Mirror Credentials</guimenu>
     </menuchoice>. There you can see a list of URIs; Only channels from
     this list of products can be added. For example, to add the SP2
     Extension Store, use the following command (one line, without the
     backslash):
    </para>
<screen>zypper addrepo -n SLES11-SP2-Extension-Store \
    https://nu.novell.com/repo/\$RCE/SLES11-SP2-Extension-Store/nu_novell_com:SLES11-SP2-Extension-Store</screen>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.update.backports">
  <title>Background: Backporting Source Code</title>

  <para>
   &suse; extensively uses backports, i.e. the migration of current
   software fixes and features into released &sle; packages. The
   information in this section helps you understand why it can be
   deceptive to compare version numbers in order to judge the
   capabilities and the security of &sle; software packages.  You'll
   understand how &suse; keeps the system software secure and current
   while maintaining compatibility for your application software on
   top of &sle; products.  You'll also learn how to check which public
   security issues actually are addressed in your &sle; system
   software, and how current your software really is.
<!--To
       do so, we first provide some background on how free software is
       developed and how it gets into Linux distributions.-->
  </para>

  <sect2 id="sec.update.backports.why">
   <title>Why Backporting?</title>
   <para>
    Upstream developers are primarily concerned with advancing the software
    they develop. In many cases they combine fixing bugs with introducing
    new features which have not yet received extensive testing and which may
    introduce new bugs.
   </para>
   <para>
    For distribution developers, it is important to distinguish between:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      bugfixes with a limited potential for disrupting functionality; and
     </para>
    </listitem>
    <listitem>
     <para>
      changes that may disrupt existing functionality.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    In most cases, distribution developers do not follow all upstream
    changes once a package has become part of a released distribution.
    Usually they stick instead with the upstream version that they initially
    released and create patches based on upstream changes to fix bugs. This
    practice is known as <emphasis>backporting</emphasis>.
   </para>
   <para>
    Distribution developers generally will only introduce a newer version of
    software in two cases:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      when the changes between their packages and the upstream versions have
      become so large that backporting is no longer feasible, or
     </para>
    </listitem>
    <listitem>
     <para>
      for software that inherently ages badly, like anti-malware software.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec.update.backports.reasons-for">
   <title>Reasons for Backporting</title>
   <para>
    &suse; uses backports extensively as we strike a good balance between a
    number of concerns for enterprise software. The most important of these
    are:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      Having stable interfaces (APIs) that software vendors can rely on when
      building products for use on &suse;'s enterprise products.
     </para>
    </listitem>
    <listitem>
     <para>
      Ensuring that packages used in the release of &suse;'s enterprise
      products are of the highest quality and have been thoroughly tested,
      both in themselves and as part of the whole enterprise product.
     </para>
    </listitem>
    <listitem>
     <para>
      Maintaining the various certifications of &suse;'s enterprise products
      by other vendors, like certifications for Oracle or SAP products.
     </para>
    </listitem>
    <listitem>
     <para>
      Allowing &suse;'s developers to focus on making the next version of
      the product as good as they can make it, rather than them having to
      spread their focus thinly across a wide range of releases.
     </para>
    </listitem>
    <listitem>
     <para>
      Keeping a clear view of what is in a particular enterprise release, so
      that
<!--Novell Technical Services-->
      our support can provide accurate and timely information about it.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 id="sec.update.backports.reasons-against">
   <title>Reasons against Backports</title>
   <para>
    It is a general policy rule that no new upstream versions of a package
    are introduced into our enterprise products. This rule is not an
    absolute rule however. For a limited class of packages, in particular
    anti-virus software, security concerns weigh heavier than the
    conservative approach that is preferable from the perspective of quality
    assurance. For packages in that class, occasionally newer versions are
    introduced into a released version of an enterprise product line.
   </para>
   <para>
    Sometimes also for other types of packages the choice is made to
    introduce a new version rather than a backport. This is done when
    producing a backport is not economically feasible or when there is a
    very relevant technical reason to introduce the newer version.
   </para>
  </sect2>

  <sect2 id="sec.update.backports.">
   <title>The Implications of Backports for Interpreting Version Numbers</title>
   <para>
    Because of the practice of backporting, one cannot simply compare
    version numbers to determine whether a &suse; package contains a fix for
    a particular issue or has had a particular feature added to it. With
    backporting, the upstream part of a &suse; package's version number
    merely indicates what upstream version the &suse; package is based on.
    It may contain bug fixes and features that are not in the corresponding
    upstream release, but that have been backported into the &suse; package.
   </para>
   <para><remark>froh: there will be some new "CVE fixed in &sle;"
    lookup tool, need to work with sarsene@ to figure the details or a
    link.</remark>
    One particular area where this limited value of version numbers when
    backporting is involved can cause problems is with security scanning
    tools. Some security vulnerability scanning tools (or particular tests
    in such tools) operate solely on version information. These tools/tests
    are thus prone to generating <quote>false positives</quote> (claims that
    a vulnerable piece of software has been found which in fact is not
    vulnerable) when backports are involved. When evaluating reports from
    security scanning tools, one should always investigate whether an entry
    is based on a version number or on an actual test of whether an actual
    vulnerability exists.
   </para>
  </sect2>
  <sect2>
   <title>
    How to Check Which Bugs are Fixed and Which Features are
    Backported and Available
   </title>
   <para>
    There are a number of locations where information regarding
    backported bug fixes and features is stored:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      The package's changelog:
     </para>
<screen>rpm -q --changelog name-of-installed-package
rpm -qp --changelog packagefile.rpm</screen>
     <para>
      The output briefly documents the change history of the package.
     </para>
    </listitem>
    <listitem>
     <para>
      The package changelog may contain entries like
      <literal>bnc#1234</literal> that refer to bugs in Novell's Bugzilla
      tracking system or links to other bugtracking systems. (Because of
      confidentiality policies, not all such information may be accessible
      to you).
     </para>
    </listitem>
    <listitem>
     <para>
      A package may contain a
      <filename>/usr/share/doc/<replaceable>packagename</replaceable>/README.SUSE</filename> or
      <filename>README.SuSE</filename> file which contains general,
      high-level information specific to the &suse; package.
     </para>
    </listitem>
    <listitem>
     <para>
      The RPM source package contains the patches that were applied during
      the building of the regular binary RPMs as separate files that can be
      interpreted if you are familiar with reading source code. See the
      <ulink 
        url="http://www.rpm.org/max-rpm/"
        >Maximum
      RPM</ulink> book for more information.<remark>2014-07-23 froh: a
      link to installing &suse; source rpms might be even more usefull
      here!</remark>
     </para>
    </listitem>
    <listitem>
     <para>
      For security bug fixes, the
      <ulink
        url="http://www.suse.com/support/security/#1">&suse;
      security announcements</ulink>. These often refer to bugs through
      standardized names like <literal>CAN-2005-2495</literal> which are
      maintained by the <ulink url="http://cve.mitre.org">Common
      Vulnerabilities and Exposures</ulink> project.
     </para>
    </listitem>
   </itemizedlist>

  </sect2>
 </sect1>

 <sect1 id="sec.update.proc.prep.paths">
  <title>Supported Upgrade Paths to &slea;</title>

  <abstract>
   <para>
    &sle; supports direct upgrades from one release to the next. For
    example, if you currently run &sle; 11 SP2, you will upgrade in two
    steps, first to &sle; 11 SP3 and then to &sle; 12.
   </para>

   <para>
    It is not possible to skip an intermediate release when updating. For
    that reson, when you are running several versions back, like &sle; 10 or
    &sle; 11 SP1, &suse; recommends to consider a fresh install instead of a
    long sequence of upgrades.
   </para>
  </abstract>

  <variablelist>
   <varlistentry>
    <term>Upgrading from &sle; 10 (any Service Pack)</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12. A fresh
      install is recommended instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 GA or &sle; 11 SP1</term>
    <listitem>
     <para>
      There is no supported direct migration path to &sle; 12. An
      update needs to be performed from &sle; 11 GA to SP1 first, then
      to SP2, then proceed with <xref linkend="sec.update.sle11sp2"/>
      afterwards.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 SP2</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.update.sle11sp2"/> for details.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Upgrading from &sle; 11 SP3 to &sle; 12</term>
    <listitem>
     <para>
      Refer to <xref linkend="sec.update.sle12"/> for details.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.update.prep">
  <title>General Preparations for Updating</title>

  <para>
   Before starting the update procedure, make sure your system is properly
   prepared. Among others, preparation involves backing up data and checking
   the release notes.
  </para>

  <sect2 id="sec.update.prep.backup">
   <title>Make a Backup</title>
   <para>
    Before updating, copy existing configuration files to a separate medium
    (such as tape device, removable hard disk, etc.) to back up the data.
    This primarily applies to files stored in <filename>/etc</filename> as
    well as some of the directories and files in <filename>/var</filename>
    and <filename>/opt</filename>. You may also want to write the user data
    in <filename>/home</filename> (the <envar>HOME</envar> directories) to a
    backup medium. Back up this data as &rootuser;. Only &rootuser; has read
    permissions for all local files.
   </para>
   <para>
    If you have selected <guimenu>Update an Existing System</guimenu> as the
    installation mode in &yast;, you can choose to do a (system) backup at a
    later point in time. You can choose to include all modified files and
    files from the <filename>/etc/sysconfig</filename> directory. However,
    this is not a complete backup, as all the other important directories
    mentioned above are missing. Find the backup in the
    <filename>/var/adm/backup</filename> directory.
   </para>
  </sect2>

  <sect2 id="sec.update.prep.disks">
   <title>Partitioning and Disk Space</title>
   <para>
    Before starting your update, make note of the root partition. The
    command <command>df&nbsp;/</command> lists the device name of the
    root partition. For example, in <xref linkend="aus.update.df"/>,
    the root partition to write down is <filename>/dev/sda3</filename>
    (mounted as <filename>/</filename>).
   </para>
   <example id="aus.update.df">
    <title>List with <command>df -h</command></title>
<screen os="sled">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       39G  1.6G   37G   4% /windows/C
/dev/sda2      4.6G  2.6G  2.1G  57% /windows/D</screen>
<screen os="sles">Filesystem     Size  Used Avail Use% Mounted on
/dev/sda3       74G   22G   53G  29% /
tmpfs          506M     0  506M   0% /dev/shm
/dev/sda5      116G  5.8G  111G   5% /home
/dev/sda1       44G    4G   40G   9% /data</screen>
   </example>
   <para>
    Software tends to <quote>grow</quote> from version to version.
    Therefore, take a look at the available partition space with
    <command>df</command> before updating. If you suspect you are running
    short of disk space, secure your data before updating and repartitioning
    your system. There is no general rule regarding how much space each
    partition should have. Space requirements depend on your particular
    partitioning profile and the software selected.
   </para>
  </sect2>

  <sect2 id="sec.update.prep.vms">
   <title>Shut Down Virtual Machine Guests</title>
   <para>
    If your machine serves as a &vmhost; for &kvm; or &xen;, make sure to
    properly shut down all running &vmguest;s prior to the update. Otherwise
    you may not be able to access the guests after the update.
   </para>
  </sect2>

  <sect2 id="sec.update.prep.relnotes">
   <title>Version-Specific Requirements</title>
   <para>
    For version specific requirements, refer to the release notes coming
    with the update product. In the release notes you can find additional
    information about upgrade procedures.
   </para>
   <para>
    The current version of the release notes document containing the latest
    information on &productname; can be read online at
    <remark>check URL</remark>
    <ulink url="http://www.suse.com/doc/sles12/#additional"/>.
   </para>
  </sect2>
 </sect1>
  <sect1 id="sec.update.sle11sp2">
  <title>Updating &slea; 11 SP2 to &slea; 11 SP3</title>

  <para>
   Online Migration is supported by the following tools:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <guimenu>&yast; wagon</guimenu> (graphical user interface)
    </para>
   </listitem>
   <listitem>
    <para>
     <command>zypper</command> (command line)
    </para>
   </listitem>
  </itemizedlist>

  <para>
   If updating your system via online migration, the update is carried out
   while the system is running. You only need to reboot once, after the
   update is completed. It is still possible to update with the following
   alternatives:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     <xref linkend="sec.update.sle11spx.medium"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.update.sle11spx.smt"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.update.sle11spx.manager"/>
    </para>
   </listitem>
  </itemizedlist>

  <sect2 id="sec.update.sle11sp3.online.requirements">
   <title>Requirements</title>
   <para>
    In order to do an online update, the following requirements must be met.
    Make sure to also read <xref linkend="sec.update.prep"/>.
   </para>
   <variablelist>
    <varlistentry>
     <term>Product Registration</term>
     <listitem>
      <para>
       In order to be able to connect to the update channels, your product
       has to be registered. If this is not the case, either run the
       <guimenu>&scc; Configuration</guimenu> module in &yast; or the
       <command>suse_register</command> command line tool to start the
       registration.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Run an Online Update</term>
     <listitem>
      <para>
       Make sure the currently installed version has the latest patches
       installed. Run an Online Update prior to the Online Migration. When
       using a graphical interface, start the &yast; Online Update or the
       updater applet. On the command line, run the following commands (the
       last command needs to be run twice):
      </para>
<screen>zypper ref -s
zypper update -t patch
zypper update -t patch</screen>
      <para>
       Reboot the system if needed.
      </para>
      <para>
       See <xref linkend="cha.onlineupdate.you"/> or
       <xref
         linkend="sec.zypper.softup"/> for more information on
       the online update tools.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Third-Party Software</term>
     <listitem>
      <para>
       If your setup involves third-party software or add-on software, test
       this procedure on another machine to make sure that the dependencies
       are not broken by the update.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <important>
    <title>Always Run a Complete Online Migration</title>
    <para>
     The online migration always has to be completed from beginning to end.
     If an online migration is interrupted in between, the system will be
     corrupted beyond recovery.
    </para>
   </important>
  </sect2>

  <sect2 id="sec.update.sle11sp3.online.wagon">
   <title>Online Migration with &yast; <guimenu>Wagon</guimenu></title>
   <procedure>
    <step>
     <para>
      When all requirements are met (see
      <xref
        linkend="sec.update.sle11spx.online.requirements"/>),
      the update applet in the tray will display a message that a
      distribution upgrade is available. Click it to start &yast;
      <guimenu>Wagon</guimenu>. Alternatively run
      <command>/usr/sbin/wagon</command> as &rootuser; from the command
      line.
     </para>
    </step>
    <step>
     <para>
      Confirm the <guimenu>Welcome</guimenu> dialog with
      <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      If <guimenu>Wagon</guimenu> finds that the requirements are not met
      (required maintenance updates are available but not yet installed) it
      will do an automatic self-update which may require a reboot. Follow
      the on-screen instructions.
     </para>
    </step>
    <step>
     <para>
      Choose the update method in the following dialog. Choose
      <guimenu>Customer Center</guimenu> to use the default setup
      (recommended).
     </para>
     <para>
      Click <guimenu>Custom URL</guimenu> to manually choose the software
      channels used for the online migration. A list of channels will be
      displayed, providing the opportunity to manually enable, disable, add,
      or delete channels. Add the SP3 update source(s). This can either be
      the SP3 installation media or the <literal>SP3-Pool</literal> and
      <literal>SP3-Updates</literal> channels. Click <guimenu>OK</guimenu>
      to return to the <guimenu>Update Method</guimenu> dialog.
     </para>
     <para>
      If you want to review changes to the channel setup caused by the
      update process, select <guimenu>Check Automatic Repository
      Changes</guimenu>.
     </para>
     <para>
      Proceed with <guimenu>Next</guimenu>.
     </para>
    </step>
    <step>
     <para>
      The system will be re-registered. During this process the
      <literal>SP3-Pool</literal> and <literal>SP3-Updates</literal>
      channels will be added to the system (see
      <xref
        linkend="sec.update.nmm.channels"/> for more
      information). Confirm the addition of the channels.
     </para>
    </step>
    <step>
     <para>
      If you have selected <guimenu>Check Automatic Repository
      Changes</guimenu> in the <guimenu>Update Method</guimenu> dialog, the
      list of repositories will be displayed, providing the opportunity to
      manually enable, disable, add, or delete channels. Proceed with
      <guimenu>OK</guimenu> when finished.
     </para>
    </step>
    <step>
     <para>
      The <guimenu>Distribution Upgrade Settings</guimenu> screen opens
      presenting a summary of the update configuration. The following
      sections are available:
     </para>
     <variablelist>
      <varlistentry>
       <term><guimenu>Add-On Products</guimenu>
       </term>
       <listitem>
        <para>
         You may add &sls; add-on products or third-party products here.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Update Options</guimenu>
       </term>
       <listitem>
        <para>
         Lists the actions that will be performed during the update. You can
         choose whether to download all packages before installing them
         (default, recommended), or whether to download and install packages
         one by one.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>Packages</guimenu>
       </term>
       <listitem>
        <para>
         Statistical overview of the update.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Backup</term>
       <listitem>
        <para>
         Set backup options.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>
      Click <guimenu>Next</guimenu> and <guimenu>Start The Update</guimenu>
      to proceed.
     </para>
     <important>
      <title>Aborting the Online Migration</title>
      <para>
       It is safe to abort the online migration on this screen
       <emphasis>prior</emphasis> to clicking <guimenu>Start The
       Update</guimenu> and on all previous screens. Click
       <guimenu>Abort</guimenu> to leave the update procedure and restore
       the system to the state it was in prior to starting &yast; Wagon.
       Follow the instructions on screen and perform a re-registration
       before leaving Wagon to remove the SP2 channels from your system.
      </para>
     </important>
    </step>
    <step>
     <para>
      During the update procedure the following steps are executed:
     </para>
     <substeps>
      <step>
       <para>
        Packages will be updated.
       </para>
      </step>
      <step>
       <para>
        The system will be rebooted (press <guimenu>OK</guimenu>).
       </para>
      </step>
      <step>
       <para>
        The newly updated system will be re-registered.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Your system has been successfully updated to Service Pack 3.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.update.sle11sp3.online.zypper">
   <title>Online Migration with <command>zypper</command></title>
   <procedure>
    <step>
     <para>
      When all requirements are met (see
      <xref
        linkend="sec.update.sle11spx.online.requirements"/>),
      the <quote>products</quote> needed for the online migration are added
      to <filename>/etc/products.d</filename>. Get a list of these products
      by running the following command:
     </para>
<!--
	 grep -ho '&lt;product.*>.*-migration' /etc/products.d/*.prod | sed 's/&lt;[^>]*>//g'
	 zypper se -t product | awk -F" | " '/migration/ {print $3}'
     -->
<screen>zypper se -t product | grep -h -- "-migration" | cut -d'|' -f2</screen>
     <para>
      This command should at least return
      <literal
        os="sles">SUSE_&slsa;-SP3-migration</literal><literal
        os="sled">SUSE_&sleda;-SP3-migration</literal>.
      Depending on the scope of your installation, more products may be
      listed.
     </para>
    </step>
    <step>
     <para>
      Install the migration products retrieved in the previous step with the
      command <command>zypper in -t product
      <replaceable>LIST_OF_PRODUCTS</replaceable></command>, for example
     </para>
<screen os="sles">zypper in -t product SUSE_&slsa;-SP3-migration</screen>
<screen os="sled">zypper in -t product SUSE_&sleda;-SP3-migration</screen>
    </step>
    <step>
     <para>
      Register the products installed in the previous step in order to get
      the respective update channels:
     </para>
<screen>suse_register -d 2 -L /root/.suse_register.log</screen>
    </step>
    <step>
     <para>
      Refresh the repositories and services:
     </para>
<screen>zypper ref -s</screen>
    </step>
    <step>
     <para>
      Check the list of repositories you can retrieve with <command>zypper
      lr</command>.
     </para>
     <para>
      If any of these repositories is not enabled (the
      <literal>SP3</literal> ones are not enabled by default when following
      this workflow), enable them with <command>zypper modifyrepo --enable
      <replaceable>REPOSITORY ALIAS</replaceable></command>, for example:
     </para>
<screen os="sles">zypper modifyrepo --enable &slsa;11-SP3-Core &slsa;11-SP3-Updates</screen>
<screen os="sled">zypper modifyrepo --enable &sleda;11-SP3-Core &sleda;11-SP3-Updates</screen>
     <para>
      If your setup contains third-party repositories that may not be
      compatible with SP3, disable them with <command>zypper modifyrepo
      --disable <replaceable>REPOSITORY ALIAS</replaceable></command>.
     </para>
    </step>
    <step>
     <para>
      Now everything is in place to perform the distribution upgrade with
      <command>zypper dup --from <replaceable>REPO 1</replaceable> --from
      <replaceable>REPO 2</replaceable>
      <replaceable>...</replaceable></command>. Make sure to list all needed
      repositories with <option>--from</option>, for example:
     </para>
<screen os="sles">zypper dup --from &slsa;11-SP3-Pool --from &slsa;11-SP3-Updates</screen>
<screen os="sled">zypper dup --from &sleda;11-SP3-Pool --from &sleda;11-SP3-Updates</screen>
     <para>
      Confirm with <guimenu>y</guimenu> to start the upgrade.
     </para>
    </step>
    <step>
     <para>
      Upon completion of the distribution upgrade from the previous step,
      run the following command:
     </para>
<screen>zypper update -t patch</screen>
    </step>
    <step>
     <para>
      Now that the upgrade to SP3 has been completed, you need to
      re-register your product:
     </para>
<screen>suse_register -d 2 -L /root/.suse_register.log</screen>
    </step>
    <step>
     <para>
      Lastly, reboot your system.
     </para>
    </step>
    <step>
     <para>
      Your system has been successfully updated to Service Pack 3.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.update.sle11spx.online">
   <title>Online Migration</title>
   <para>
    Updating your system via online migration is done from within the
    running system. You only need to reboot once, after the update is
    completed.
   </para>
   <sect3 id="sec.update.sle11spx.online.requirements">
    <title>Requirements</title>
    <para>
     In order to do an online update, the following requirements must be
     met. Make sure to also read <xref linkend="sec.update.prep"/>.
    </para>
    <variablelist>
     <varlistentry>
      <term>Product Registration</term>
      <listitem>
       <para>
        In order to be able to connect to the update channels, your product
        needs to be registered. If this is not the case, either run the
        <guimenu>&scc; Configuration</guimenu> module in &yast; or the
        <command>suse_register</command> command line tool to start the
        registration.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Run an Online Update</term>
      <listitem>
       <para>
        Make sure the currently installed version has the latest patches
        installed. Run an Online Update prior to the Online Migration. When
        using a graphical interface, start the &yast; Online Update or the
        updater applet. On the command line, run the following commands (the
        last command needs to be run twice):
       </para>
<screen>zypper ref -s
zypper update -t patch
zypper update -t patch</screen>
       <para>
        Reboot the system if needed.
       </para>
       <para>
        See <xref linkend="cha.onlineupdate.you"/> or at
        <xref linkend="sec.zypper.softup"/>. for more information. on the
        online update tools.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Third-Party Software</term>
      <listitem>
       <para>
        If your setup involves third-party software or add-on software, test
        this procedure on another machine to make sure that the dependencies
        are not broken by the update.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <important>
     <title>Always Run a Complete Online Migration</title>
     <para>
      The online migration always needs to be completed from beginning to
      end. If an online migration is interrupted in between, the system is
      corrupted beyond recovery.
     </para>
    </important>
   </sect3>
   <sect3 id="sec.update.sle11spx.online.wagon">
    <title>Online Migration with &yast; <guimenu>Wagon</guimenu></title>
    <note>
     <para>
      The online migration with &yast; Wagon is only available prior to
      &sls; 12.
     </para>
    </note>
    <procedure>
     <step>
      <para>
       When all requirements are met (see
       <xref
         linkend="sec.update.sle11spx.online.requirements"/>),
       the update applet in the tray will display a message that a
       distribution upgrade is available. Click it to start &yast;
       <guimenu>Wagon</guimenu>. Alternatively run
       <command>/usr/sbin/wagon</command> as &rootuser; from the command
       line.
      </para>
     </step>
     <step>
      <para>
       Confirm the <guimenu>Welcome</guimenu> dialog with
       <guimenu>Next</guimenu>.
      </para>
     </step>
     <step>
      <para>
       If <guimenu>Wagon</guimenu> finds that the requirements are not met
       (required maintenance updates are available but not yet installed) it
       will do an automatic self-update, which may require a reboot. Follow
       the on-screen instructions.
      </para>
     </step>
     <step>
      <para>
       Choose the update method in the following dialog. Choose
       <guimenu>Customer Center</guimenu> to use the default setup
       (recommended).
      </para>
      <para>
       Click <guimenu>Custom URL</guimenu> to manually choose the software
       channels used for the online migration. A list of channels will be
       displayed, providing the opportunity to manually enable, disable,
       add, or delete channels. Add the SP2 update source(s). This can
       either be the SP2 installation media or the
       <literal>SP2-Core</literal> and <literal>SP2-Updates</literal>
       channels. Click <guimenu>OK</guimenu> to return to the
       <guimenu>Update Method</guimenu> dialog.
      </para>
      <para>
       If you want to review changes to the channel setup caused by the
       update process, select <guimenu>Check Automatic Repository
       Changes</guimenu>.
      </para>
      <para>
       Proceed with <guimenu>Next</guimenu>.
      </para>
     </step>
     <step>
      <para>
       The system will be re-registered. During this process the
       <literal>SP2-Core</literal> and <literal>SP2-Updates</literal>
       channels will be added to the system (see
       <xref
         linkend="sec.update.nmm.channels"/> for more
       information). Confirm the addition of the channels.
      </para>
     </step>
     <step>
      <para>
       If you have selected <guimenu>Check Automatic Repository
       Changes</guimenu> in the <guimenu>Update Method</guimenu> dialog, the
       list of repositories will be displayed, providing the opportunity to
       manually enable, disable, add, or delete channels. Proceed with
       <guimenu>OK</guimenu> when finished.
      </para>
     </step>
     <step>
      <para>
       Choose the migration type:
      </para>
      <variablelist>
       <varlistentry>
        <term><guimenu>Full migration</guimenu>
        </term>
        <listitem>
         <para>
          Updates all packages to the latest SP2 level.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><guimenu>Minimal Migration</guimenu>
        </term>
        <listitem>
         <para>
          Updates a minimal set of packages to the latest SP2 level.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       Click <guimenu>Advanced</guimenu> to manually select the repositories
       used for upgrading.
      </para>
      <para>
       Confirm your selection.
      </para>
     </step>
     <step>
      <para>
       The <guimenu>Distribution Upgrade Settings</guimenu> screen opens,
       presenting a summary of the update configuration. The following
       sections are available:
      </para>
      <variablelist>
       <varlistentry>
        <term><guimenu>Add-On Products</guimenu>
        </term>
        <listitem>
         <para>
          You may add &sls; add-on products or third-party products here.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><guimenu>Update Options</guimenu>
        </term>
        <listitem>
         <para>
          Lists the actions that will be performed during the update. You
          can choose whether to download all packages before installing them
          (default, recommended), or whether to download and install
          packages one by one.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term><guimenu>Packages</guimenu>
        </term>
        <listitem>
         <para>
          Statistical overview of the update.
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>Backup</term>
        <listitem>
         <para>
          Set backup options.
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
      <para>
       Click <guimenu>Next</guimenu> and <guimenu>Start The Update</guimenu>
       to proceed.
      </para>
      <important>
       <title>Aborting the Online Migration</title>
       <para>
        It is safe to abort the online migration on this screen
        <emphasis>prior</emphasis> to clicking <guimenu>Start The
        Update</guimenu> and on all previous screens. Click
        <guimenu>Abort</guimenu> to leave the update procedure and restore
        the system to the state it was in prior to starting &yast; wagon.
        Follow the instructions on screen and perform a re-registration
        before leaving Wagon to remove the SP2 channels from your system.
       </para>
      </important>
     </step>
     <step>
      <para>
       During the update procedure the following steps are executed:
      </para>
      <substeps>
       <step>
        <para>
         Packages will be updated.
        </para>
       </step>
       <step>
        <para>
         The system will be rebooted (press <guimenu>OK</guimenu>).
        </para>
       </step>
       <step>
        <para>
         The newly updated system will be re-registered.
        </para>
       </step>
      </substeps>
     </step>
     <step>
      <para>
       Your system has been successfully updated to Service Pack 2.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 id="sec.update.sle11spx.online.zypper">
    <title>Online Migration with <command>zypper</command></title>
    <procedure>
     <step>
      <para>
       When all requirements are met (see
       <xref
         linkend="sec.update.sle11spx.online.requirements"/>),
       the <quote>products</quote> needed for the online migration have been
       added to <filename>/etc/products.d</filename>. Get a list of these
       products by running the following command:
      </para>
<!--
	  grep -ho '&lt;product.*>.*-migration' /etc/products.d/*.prod | sed 's/&lt;[^>]*>//g'
	  zypper se -t product | awk -F" | " '/migration/ {print $3}'
      -->
<screen>zypper se -t product | grep -h -- "-migration" | cut -d'|' -f2</screen>
      <para>
       This command should at least return
       <literal
         os="sles">SUSE_&slsa;-SP2-migration</literal><literal
         os="sled">SUSE_&sleda;-SP2-migration</literal>.
       Depending on the scope of your installation, more products may be
       listed.
      </para>
     </step>
     <step>
      <para>
       Install the migration products retrieved on the previous step with
       the command <command>zypper in -t product
       <replaceable>LIST_OF_PRODUCTS</replaceable></command>, for example
      </para>
<screen os="sles">zypper in -t product SUSE_&slsa;-SP2-migration</screen>
<screen os="sled">zypper in -t product SUSE_&sleda;-SP2-migration</screen>
     </step>
     <step>
      <para>
       Register the products installed in the previous step in order to get
       the respective update channels:
      </para>
<screen>suse_register -d 2 -L /root/.suse_register.log'</screen>
     </step>
     <step>
      <para>
       Refresh repositories and services again:
      </para>
<screen>zypper ref -s</screen>
     </step>
     <step>
      <para>
       Check the list of repositories you can retrieve with <command>zypper
       lr</command>. <emphasis>At least</emphasis> the following
       repositories need to be <guimenu>Enabled</guimenu>:
      </para>
      <itemizedlist os="sles">
       <listitem>
        <para>
         <literal>&slsa;11-SP1-Pool</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&slsa;11-SP1-Updates</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&slsa;11-SP2-Core</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&slsa;11-SP2-Updates</literal>
        </para>
       </listitem>
      </itemizedlist>
      <itemizedlist os="sled">
       <listitem>
        <para>
         <literal>&sleda;11-SP1-Pool</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&sleda;11-SP1-Updates</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&sleda;11-SP2-Core</literal>
        </para>
       </listitem>
       <listitem>
        <para>
         <literal>&sleda;11-SP2-Updates</literal>
        </para>
       </listitem>
      </itemizedlist>
      <para>
       Depending on the scope of your installation, further repositories for
       add-on products or extensions need to be enabled.
      </para>
      <para>
       If one of these repositories is not enabled (the
       <literal>SP2</literal> ones are not enabled by default when following
       this workflow), enable them with <command>zypper modifyrepo --enable
       <replaceable>REPOSITORY ALIAS</replaceable></command>, for example:
      </para>
<screen os="sles">zypper modifyrepo --enable &slsa;11-SP2-Core &slsa;11-SP2-Updates</screen>
<screen os="sled">zypper modifyrepo --enable &sleda;11-SP2-Core &sleda;11-SP2-Updates</screen>
      <para>
       If your setup contains third-party repositories that may not be
       compatible with SP2, disable them with <command>zypper modifyrepo
       --disable <replaceable>REPOSITORY ALIAS</replaceable></command>.
      </para>
     </step>
     <step>
      <para>
       Now everything is in place to perform the distribution upgrade with
       <command>zypper dup --from <replaceable>REPO 1</replaceable> --from
       <replaceable>REPO 2</replaceable>
       <replaceable>...</replaceable></command>. Make sure to list all
       needed repositories with <option>--from</option>, for example:
      </para>
<screen os="sles">zypper dup --from &slsa;11-SP2-Core --from &slsa;11-SP2-Updates</screen>
<screen os="sled">zypper dup --from &sleda;11-SP2-Core --from &sleda;11-SP2-Updates</screen>
      <para>
       Confirm with <guimenu>y</guimenu> to start the upgrade.
      </para>
     </step>
     <step>
      <para>
       Upon completion of the distribution upgrade from the previous step, a
       Minimal Migration has been performed (a minimal set of packages has
       been updated to the latest SP2 level). Skip this step if you do not
       intend to do a Full Migration.
      </para>
      <para>
       In order to do a Full Migration (updates all packages to the latest
       SP2 level), run the following command:
      </para>
<screen>zypper update -t patch</screen>
     </step>
     <step>
      <para>
       Now that the upgrade to SP2 has been completed, you need to
       re-register your product:
      </para>
<screen>suse_register -d 2 -L /root/.suse_register.log</screen>
     </step>
     <step>
      <para>
       Last, reboot your system.
      </para>
     </step>
     <step>
      <para>
       Your system has been successfully updated to Service Pack 2.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 id="sec.update.sle11spx.medium">
   <title>Updating by Booting from an Installation Source</title>
   <para>
    As an alternative to the Online Migration (see
    <xref
      linkend="sec.update.sle11spx.online"/> for details) you may
    also update your system by booting from an installation
    source&mdash;either a DVD or a network installation source. The update
    will start like a normal installation.
   </para>
   <para>
    Service Pack 2 ISO images can be obtained from
    <ulink
      url="http://download.suse.com/"/>. Either burn it to a DVD
    or prepare a network installation source as described in
    <xref
      linkend="sec.deployment.remoteinst.instserver"/>.
   </para>
   <sect3 id="sec.upgrade.install-from-dvd">
    <title>Updating from a Local DVD Drive</title>
    <para>
     Before starting a new installation of a &sle; SP, ensure that all the
     Service Pack installation media (DVDs) are available.
    </para>
    <procedure id="upgrade.sp.instsp.fromsp">
     <title>Booting from the Service Pack Medium</title>
     <step>
      <para>
       Insert the first &sle; SP medium and boot your machine. A boot screen
       similar to the original installation of &sle; 11 is displayed.
      </para>
     </step>
     <step>
      <para>
       Select <guimenu>Installation</guimenu> and continue as outlined in
       the &yast; installation instructions in <xref linkend="cha.inst"/>.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 id="sec.upgrade.install-from-network">
    <title>Updating from a Network Installation Source</title>
    <para>
     Before starting an update of a &sle; SP from a network installation
     source, make sure that the following requirements are met:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       A network installation source is set up according to
       <xref linkend="sec.deployment.remoteinst.instserver"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       A working network connection on both the installation server and the
       target machine that includes a name service, DHCP (optional, but
       needed for PXE boot), and OpenSLP (optional) exists.
      </para>
     </listitem>
     <listitem>
      <para>
       The &sle; SP DVD 1 to boot the target system <emphasis>or</emphasis>
       a target system set up for PXE boot according to
       <xref linkend="sec.deployment.remoteinst.boot.pxeprep"
             xrefstyle="HeadingOnPage" />
       exist.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Refer to <xref linkend="cha.deployment.remoteinst"/> for in-depth
     information on starting the upgrade from a remote server.
    </para>
    <sect4 id="sec.upgrade.install-from-network.dvdboot">
     <title>Network Installation&mdash;Boot from DVD</title>
     <para>
      To perform a network installation using the SP DVD as the boot medium,
      proceed as follows:
     </para>
     <procedure>
      <step>
       <para>
        Insert the &sle; SP DVD 1 and boot your machine. A boot screen
        similar to the original installation of &sle; 11 is displayed.
       </para>
      </step>
      <step>
       <para>
        Select <guimenu>Installation</guimenu> to boot the SP Kernel then
        use <keycap>F4</keycap> to select the type of network installation
        source (FTP, HTTP, NFS, or SMB).
       </para>
      </step>
      <step>
       <para>
        Provide the appropriate path information or select
        <guimenu>SLP</guimenu> as the installation source.
       </para>
      </step>
      <step>
       <para>
        Select the appropriate installation server from those offered or use
        the boot options prompt to provide the type of installation source
        and its actual location as in
        <xref 
          linkend="sec.i.yast2.source.net"/>. &yast; starts.
       </para>
       <para>
        Finish the installation as outlined in
        <xref linkend="sec.update.sle11spx.medium.update"/>.
       </para>
      </step>
     </procedure>
    </sect4>
    <sect4 id="sec.upgrade.install-from-network.pxeboot">
     <title>Network Installation&mdash;PXE Boot</title>
     <para>
      To perform a network installation of a &sle; Service Pack via network,
      proceed as follows:
     </para>
     <procedure>
      <step>
       <para>
        Adjust the setup of your DHCP server to provide the address
        information needed for PXE boot according to
        <xref linkend="sec.deployment.remoteinst.boot.pxeprep"/>.
       </para>
      </step>
      <step>
       <para>
        Set up a TFTP server to hold the boot image needed for PXE boot.
       </para>
       <para>
        Use the first CD or DVD of your &sle; Service Pack for this or
        follow the instructions in
        <xref linkend="sec.deployment.remoteinst.boot.tftp"/>.
       </para>
      </step>
      <step>
       <para>
        Prepare PXE boot and Wake-on-LAN on the target machine.
       </para>
      </step>
      <step>
       <para>
        Initiate the boot of the target system and use VNC to remotely
        connect to the installation routine running on this machine. See
        <xref linkend="sec.deployment.remoteinst.monitor.vnc"/> for more
        information.
       </para>
      </step>
      <step>
       <para>
        Finish the installation as outlined in
        <xref linkend="sec.update.sle11spx.medium.update"/>.
       </para>
      </step>
     </procedure>
    </sect4>
   </sect3>
   <sect3 id="sec.update.sle11spx.medium.update">
    <title>The Update Procedure</title>
    <para>
     Once you have successfully booted from installation medium or the
     network, proceed as follows to start the update:
    </para>
    <procedure>
     <step>
      <para>
       On the <guimenu>Welcome</guimenu> screen choose
       <guimenu>Language</guimenu> and <guimenu>Keyboard</guimenu> and
       Accept the license agreement. Proceed with <guimenu>Next</guimenu>.
      </para>
     </step>
     <step>
      <para>
       In case you have booted from a physical medium, perform a
       <guimenu>Media Check</guimenu> to verify the integrity of the medium.
       Only skip this step if you have checked the medium before.
      </para>
     </step>
     <step>
      <para>
       On the <guimenu>Installation Mode</guimenu> screen, choose
       <guimenu>Update</guimenu>. Clicking <guimenu>Next</guimenu> will
       start the update procedure.
      </para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 id="sec.update.sle11spx.smt">
   <title>Updating via &smtool; (&smt;)</title>
   <para>
    As an alternative to downloading the updates for each single client
    system from the &suse; update server, it is possible to use the &smtool;
    (&smt;) for &sle; to mirror the updates to a local server.
   </para>
   <para>
    This tool acts as &ncc; proxy both for client registrations and as
    software update repository. The &smt; documentation at
    <ulink
      url="http://www.suse.com/doc/smt11/"/> gives an overview of
    its features as well as instructions on how to implement it.
   </para>
  </sect2>

  <sect2 id="sec.update.sle11spx.manager">
   <title>Updating via &susemgr;</title>
   <para>
    &susemgr; is a server solution for providing updates, patches, and
    security fixes for &sle; clients. It comes with a set of tools and a
    Web-based user interface for management tasks.
   </para>
   <para>
    The &susemgr; documentation at
    <ulink
      url="http://www.suse.com/doc/suse_manager/"/> gives an
    overview of its features as well as instructions on how to set up server
    and clients.
   </para>
  </sect2>
 </sect1>

 <sect1 id="sec.update.sle12">
  <title>Upgrading to &slea; 12</title>

  <remark>toms 2014-02-11: See FATEs #315969 and #313189</remark>

  <para>
   Upgrading from &sle;&nbsp;11 SP3 (or higher) to &sle;&nbsp;12 is
   supported by the following tools:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Booting from an ISO
    </para>
   </listitem>
   <listitem>
    <para>
     Automated migration <phrase os="sles">(see
     <xref linkend="sec.update.sle12.automated"/>)</phrase>
    </para>
   </listitem>
  </itemizedlist>

  <sect2 id="sec.update.sle12.iso">
   <title>
    Booting a &sle;&nbsp;12 ISO to upgrade from &sle;&nbsp;11 SP3 or
    higher
   </title>
   <para>
    You may upgrade your system by booting from an installation
    source&mdash;either a local DVD or a network installation source,
    just as if you'd perform a fresh install.  You then just select
    "Upgrade" instead of "Install" in the Boot Screen to upgrade the
    system.
   </para>

   <procedure id="pro.update.sle12.iso">
    <title>
    Booting a &sle;&nbsp;12 ISO to upgrade from &sle;&nbsp;11 SP3 or
    higher
   </title>
    <step>
     <para>
      Select a boot method to start the system from the ISO (see <xref
      linkend="sec.i.yast2.method"/>).
     </para>
    </step>
    <step>
     <para>
      Start up the system from the ISO (see 
      <xref linkend="sec.i.yast2.startup"/>).
     </para>
     <para>
      On the Boot Screen, select "Upgrade" to start the system
      upgrade.
     </para>
    </step>
    <step>
     <para>
      Perform the usual upgrade process (see <xref linkend="sec.update.sle11spx.medium.update"/>).
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 id="sec.update.sle12.automated">
   <title>Automated Migration from &sle; 11 SP3 to &sle; 12</title>
   <para>
    To perform an automated migration, proceed as follows:
   </para>
   <procedure id="pro.update.sle12">
    <title>Automated Migration from &sle; 11 SP3 to &sle; 12</title>
    <remark>toms 2014-03-19: See FATE#315037</remark>
    <remark role="future">toms 2014-03-20: From SLE12 SP1 on, we should probably base
    this example on GRUB2, but not for GA.</remark>
    <step>
     <para>
      Copy the installation Kernel <filename>linux</filename> and the file
      <filename>initrd</filename> from
      <filename>/boot/x86_64/loader/</filename> of your first installation
      DVD to your system's <filename>/boot</filename> directory:
     </para>
     <screen><command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/linux /boot/linux.upgrade
<command>cp</command> -vi <replaceable>DVDROOT</replaceable>/boot/x86_64/loader/initrd /boot/initrd.upgrade</screen>
     <para>
      <replaceable>DVDROOT</replaceable> denotes the path where your system
      mounts the DVD, usually
      <filename>/run/media/$USER/$DVDNAME</filename>.
     </para>
    </step>
    <step>
     <para>
      Open the GRUB legacy configuration file
      <filename>/boot/grub/menu.lst</filename> and add another section. For
      other boot loaders, edit the respective configuration file(s). Adjust
      device names accordingly. For example:
     </para>
     <screen>title Linux Upgrade Kernel
kernel (hd0,0)/boot/linux.upgrade root=/dev/sda1 upgrade <replaceable>OPTIONAL_PARAMETERS</replaceable>
initrd (hd0,0)/boot/initrd.upgrade.img</screen>
     <para>
      <replaceable>OPTIONAL_PARAMETERS</replaceable> denote additional
      Kernel parameters which you might need to boot your system.
      There may be other useful parameter to add.  Probably you want
      to copy those from an existing GRUB entry.
     </para>
    </step>
    <step>
     <para>
      If the upgrade should be done automated
<!--taroth 2014-06-18: not
      sure if that way exists between SLE 11 SPx and SLE 12, therefore
      commenting the following link <phrase os="sles"> (see <xref linkend="sec.update.auto.run"/>)</phrase>-->
      , add the <option>autoupgrade=1</option> at the end of the
      <literal>kernel</literal> line in your GRUB configuration.
     </para>
    </step>
    <step>
     <para>
      Reboot your machine and select the newly added section from the boot
      menu (here: <emphasis>Linux Upgrade Kernel</emphasis>).
     </para>
    </step>
    <step>
     <para>
      Perform the usual upgrade process (see <xref linkend="sec.update.sle11spx.medium.update"/>).
     </para>
    </step>
    <step>
     <para>
      After the upgrade process was finished successfully, remove the
      installation Kernel and initrd files
      (<filename>/boot/linux.upgrade</filename> and
      <filename>/boot/initrd.upgrade</filename>). They are useless now and
      are not needed anymore.
     </para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
	     href="update_split_brain.xml"/>
 <sect1 id="sec.update.wagonhooks">
  <title>Background: Migration Hooks for &yast; Wagon</title>

<!-- FATE#314132 -->

  <para>
   Migration hooks allow you to run a custom external script at some point
   during the migration process. These scripts allow you to handle specific
   problems that cannot be handled via the usual RPM scripts, or allow you
   to perform any extra actions that might be needed during migration (not
   required during normal package update).
  </para>

  <para>
   The migration hooks are executed with root privileges so it is possible
   to do any maintenance tasks in the scripts (starting/stopping services,
   data backup, data migration, etc...). The scripts must not be
   interactive; STDIN and STDOUT are redirected to pipes when running in
   &yast;. The X session should not be used, as it might not be available in
   all cases (for example, when running in text mode). Do not forget to set
   the executable permission for the hook scripts.
  </para>

  <para>
   Migration hooks are supported in
   <systemitem 
     class="resource">yast2-wagon</systemitem> package
   version 2.17.32.1 (provided as an update for SLES11-SP2) or 2.17.34
   (included in SLES11-SP3) or higher versions.
  </para>

  <sect2>
   <title>Hook Script Location and Name Conventions</title>
   <para>
    The scripts are searched in
    <filename>/var/lib/YaST2/wagon/hooks/</filename> directory. The expected
    script name is in the format
    <replaceable>step_seq_prefix_name</replaceable>, where:
   </para>
   <variablelist>
    <varlistentry>
     <term><replaceable>step</replaceable>
     </term>
     <listitem>
      <para>
       is a predefined migration step name, describing the current migration
       step.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>seq</replaceable>
     </term>
     <listitem>
      <para>
       is a sequence number in range 00...99, which makes it possible to set
       the order in which the scripts are executed. (It is important to keep
       the zeros at the beginning to enable correct sorting!)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>prefix</replaceable>
     </term>
     <listitem>
      <para>
       should be unique to avoid conflicts (like a namespace). Use package
       name (if it is part of a package) or your vendor name, Internet
       domain name, etc., anything that can be considered sufficiently
       unique
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><replaceable>name</replaceable>
     </term>
     <listitem>
      <para>
       can be any string (used to differentiate the scripts). Some
       descriptive name is recommended.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <example>
    <title>Hook Script with Full Path</title>
<screen>/var/lib/YaST2/wagon/hooks/before_package_migration_00_postgresql_backup</screen>
   </example>
  </sect2>

  <sect2>
   <title>Hook Script Exit Value</title>
   <para>
    The script should return exit value 0. If it fails (any non-zero exit
    value) an error message is displayed in Wagon and it is possible to
    restart the script, ignore the failure (and continue with other scripts)
    or completely cancel the hooks for the current step and stage.
   </para>
  </sect2>

  <sect2>
   <title>Idempotent Scripts</title>
   <para>
    The hook scripts <emphasis>can be potentially run more times</emphasis>
    (when going back and forth in the Wagon dialogs, Wagon might restart
    itself or some steps might be executed multiple times in the migration
    workflow), so the scripts have to cope with that fact (they can check at
    the beginning whether they need to do the action or the action has been
    already done or they can create a simple temporary stamp file or
    otherwise solve multiple runs properly).
   </para>
  </sect2>

  <sect2>
   <title>List of Supported Hooks</title>
   <remark>toms 2014-02-11: See Trello card#39, https://github.com/yast/yast-yast2/blob/master/library/general/doc/Hooks.md</remark>
   <para>
    Some hooks are optional (because the depend on the previous results or
    depend on user selected values). Note that some hooks are called
    multiple times (for example, registration is called before migration and
    after migration). Here is the list of supported hooks (step names) in
    execution order:
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_init</command>
     </term>
     <listitem>
      <para>
       started at the very beginning (note: it is called again after Wagon
       restarts)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_welcome</command>
     </term>
     <term><command>after_welcome</command>
     </term>
     <listitem>
      <para>
       started before/after displaying the welcome dialog
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration_check</command>
     </term>
     <term><command>after_registration_check</command>
     </term>
     <listitem>
      <para>
       Wagon checks the registration status (if registration of some
       products has expired the migration might fail). If everything is OK,
       no dialog is displayed and Wagon automatically continues with the
       next step
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_custom_url</command>
     </term>
     <term><command>after_custom_url</command>
     </term>
     <listitem>
      <para>
       repository manager is started (optional, in Patch CD mode only)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_self_update</command>
     </term>
     <term><command>after_self_update</command>
     </term>
     <listitem>
      <para>
       called before/after Wagon updates itself (to ensure the latest
       version is used for migration)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_installing_migration_products</command>
     </term>
     <term><command>after_installing_migration_products</command>
     </term>
     <listitem>
      <para>
       called before/after installing the migration products
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_selecting_migration_source</command>
     </term>
     <term><command>after_selecting_migration_source</command>
     </term>
     <listitem>
      <para>
       Wagon asks the user to migrate via &ncc; repositories or using a
       custom repository; the next step depends on the user selection
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration</command>
     </term>
     <term><command>after_registration</command>
     </term>
     <listitem>
      <para>
       running SUSE register (to add migration repositories)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_repo_selection</command>
     </term>
     <term><command>after_repo_selection</command>
     </term>
     <listitem>
      <para>
       manual repository management
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_set_migration_repo</command>
     </term>
     <term><command>after_set_migration_repo</command>
     </term>
     <listitem>
      <para>
       selecting migration repositories (full/minimal migration when using
       &ncc;) or update repository selection (custom repository migration)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_package_migration</command>
     </term>
     <listitem>
      <para>
       before package update starts, after this step the real migration
       starts and it is not possible to go back to the previous state
       automatically (aborting in this phase results in an inconsistent
       (half upgraded) system, and manual rollback is needed)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_registration</command>
     </term>
     <term><command>after_registration</command>
     </term>
     <listitem>
      <para>
       running SUSE register (to register updated products)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_congratulate</command>
     </term>
     <term><command>after_congratulate</command>
     </term>
     <listitem>
      <para>
       before/after Wagon displays the congratulation dialog as a result of
       a successful migration
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_exit</command>
     </term>
     <listitem>
      <para>
       called just before Wagon exits (always, regardless the migration
       result, also after abort and at restart)
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Abort Hooks</title>
   <para>
    These are special abort hooks which are called when the user aborts the
    migration. These hooks can be called in any step in the migration
    workflow therefore the execution order cannot be guaranteed. The scripts
    need to check the current state if they rely on the results of other
    hooks.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_abort</command>
     </term>
     <listitem>
      <para>
       user confirmed aborting the migration
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>before_abort_rollback</command>
     </term>
     <term><command>after_abort_rollback</command>
     </term>
     <listitem>
      <para>
       user confirmed rollback after abort (reverting to the old products
       installed before starting migration). These hooks are called after
       before_abort and skipped when the user does not confirm rollback.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Restart Hooks</title>
   <para>
    These hooks are called whenever Wagon restarts itself.
   </para>
   <variablelist>
    <varlistentry>
     <term><command>before_restart</command>
     </term>
     <listitem>
      <para>
       Wagon is finishing and will be started again
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>after_restart</command>
     </term>
     <listitem>
      <para>
       Wagon has restarted and runs the next step in the migration workflow
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Usually Used Hooks</title>
   <para>
    The list of hooks is fairly large, but many of them only make sense in
    special cases. In normal use cases these should be given preference:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      To do some action before the system is migrated (still running the
      previous version) use the <command>before_package_migration</command>
      hook.
     </para>
     <para>
      At this point it is clear that the migration is ready and is about to
      start, whereas in all steps before it was possible to abort the
      migration.
<!-- and therefore calling the
           scripts might have not been necessary -->
     </para>
    </listitem>
    <listitem>
     <para>
      To do some action after the system has migrated (the system is running
      the new migrated version, but some things might not be active yet, for
      example, updated kernel requires reboot, updated services might need
      restart etc..), use <command>before_congratulate</command> or
      <command>after_congratulate</command> hook.
     </para>
     <para>
      This can be also used for cleaning up the temporary results of the
      <command>before_package_migration</command> hook. At this point the
      migration has successfully finished.
     </para>
    </listitem>
    <listitem>
     <para>
      To reverse the changes if the migration is aborted, use one of the
      abort hooks depending on the case. Keep in mind that the abort hooks
      can be called anytime, so the revert might not be needed (the hook
      that does the changes might not have been called yet). The abort hooks
      need to check the current state.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2>
   <title>Obsolete Hooks</title>
   <para>
    Older versions of Wagon supported only two hook scripts:
    <filename>/usr/lib/YaST2/bin/wagon_hook_init</filename> and
    <filename>/usr/lib/YaST2/bin/wagon_hook_finish</filename>. The problem
    was that only one script could be run as a hook and it was not possible
    to put hooks directly into RPM packages.
   </para>
   <para>
    These old hook scripts are still supported in newer versions of Wagon
    for backward compatibility, but the new hooks
    <command>before_init</command> and <command>before_exit</command> should
    be used instead of the obsolete ones.
   </para>
  </sect2>
 </sect1>
</chapter>
