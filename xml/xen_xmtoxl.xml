<?xml version="1.0"?>
<!DOCTYPE appendix PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<appendix id="cha.xmtoxl">
 <title>XM, XL Toolstacks and Libvirt framework</title>
 <sect1 id="sec.xmtoxl.intro">
  <title>&xen; Toolstacks</title>
  <para>
   Since the early &xen; 2.x releases, <command>xend</command> has been the
   defacto toolstack for managing &xen; installations. In &xen; 4.1, a new
   toolstack called libxenlight (also known as libxl) was introduced with
   technology preview status. libxl is a small, low-level library written in
   C. It has been designed to provide a simple API for all client toolstacks (
   (<ulink url="http://wiki.xen.org/wiki/XAPI">XAPI</ulink>, &libvirt;,
   xl). In &xen; 4.2, libxl was promoted to officially supported status and
   <command>xend</command> was marked deprecated. <command>xend</command> has
   been included in the &xen; 4.3 and 4.4 series to give users ample time to
   convert their tooling to libxl, but it has been removed from the upstream
   &xen; project and will no longer be provided starting with the &xen; 4.5
   series.
  </para>
  <para>
   Although SLES11 SP3 contains &xen; 4.2, &suse; retained the
   <command>xend</command> toolstack since making such an invasive change in a
   service pack would be too disruptive for &sle; customers. However, SLES12
   provides a suitable opportunity to move to the new libxl toolstack and
   remove the deprecated, unmaintained <command>xend</command> stack.
  </para>
  <para>
   One of the major differences between <command>xend</command> and libxl is
   that the former is stateful, while the latter is stateless. With
   <command>xend</command>, all client applications such as
   <command>xm</command> and &libvirt; see the same system state.
   <command>xend</command> is responsible for maintaining state for the entire
   &xen; host. In libxl, client applications such as <command>xl</command> or
   &libvirt; must maintain state. Thus domains created with
   <command>xl</command> or not visible or known to other libxl applications
   such as &libvirt;. Generally, it is discouraged to mix and match libxl
   applications and is preferred that a single libxl application be used to
   manage a &xen; host. In &sle; 12 , it is recommended to use &libvirt; to
   manage &xen; hosts, allowing management of the &xen; system through
   &libvirt; applications such as <command>virt-manager</command>,
   <command>virt-install</command>, <command>vm-install</command>,
   <command>virt-viewer</command>, libguestfs, etc. If <command>xl</command>
   is used to manage the &xen; host, any virtual machines under it's
   management will not be accessible to &libvirt;, and hence not accessible to
   any of the &libvirt; applications.
  </para>
  <sect2 id="sec.xmtoxl.upgrade">
   <title>Upgrading from xend/xm to xl/libxl</title>
   <para>
    The <command>xl</command> application, along with its configuration format
    (see <command>man xl.cfg</command>), was designed to be
    backwards-compatible with the <command>xm</command> application and its
    configuration format (see <command>man xm.cfg</command>). Existing
    <command>xm</command> configuration should be usable with
    <command>xl</command>. Since libxl is stateless, and <command>xl</command>
    does not support the notion of managed domains, &suse; recommends using
    &libvirt; to manage SLES12 &xen; hosts. SUSE has provided a tool called
    <command>xen2libvirt</command>, which provides a simple mechanism to
    import domains previously managed by <command>xend</command> into
    &libvirt;. See <xref linkend="xen.xen2libvirt"/> for more information on
    <command>xen2libvirt</command>.
   </para>
  </sect2>
  <sect2 id="sec.xmltoxl.design">
   <title>XL design</title>
   <para>
    The basic structure of every <command>xl</command> command is:
   </para>
   <screen><command>xl subcommand <option>OPTIONS</option> <replaceable>DOMAIN</replaceable></command></screen>
   <para>
    <replaceable>DOMAIN</replaceable> is the numeric domain id, or the domain
    name (which will be internally translated to domain id), and
    <replaceable>OPTIONS</replaceable> are subcommand specific options.
   </para>
   <para>
    Although xl/libxl was designed to be backward-compatible with xm/xend,
    there are a few differences that should be noted:
   </para>
   <itemizedlist>
   <listitem>
    <para>
     Managed or persistent domains. &libvirt; now provides this
     functionality.
    </para>
   </listitem>
   <listitem>
    <para>
     xl/libxl does not support Python code in the domain configuration files.
    </para>
   </listitem>
   <listitem>
    <para>
     xl/libxl does not support creating domains from SXP format
     configuration files (<command>xm <option>create</option> -F</command>).
    </para>
   </listitem>
   <listitem>
    <para>
     xl/libxl does not support sharing storage across DomU's via
     <command>w!</command> in domain configuration files.
    </para>
   </listitem>
   </itemizedlist>
   <para>
    xl/libxl is relatively new and under heavy development, hence a few
    features are still missing with respect to the xm/xend toolstack:
   </para>
   <itemizedlist>
   <listitem>
    <para>
     SCSI LUN/Host pass-through (PVSCSI)
    </para>
   </listitem>
   <listitem>
    <para>
     USB passthrough (PVUSB)
    </para>
   </listitem>
   <listitem>
    <para>
     Support Direct Kernel Boot for fully virtualized Linux guests for &xen;
     does not work anymore
    </para>
   </listitem>
   </itemizedlist>
  </sect2>
  
  <sect2 id="sec.xmtoxl.checklist">
   <title>Checklist before Upgrade</title>
   <para>
    Before upgrading a SLES11 SP3 Xen host to SLES12
   </para>
   <itemizedlist>
    <listitem>
     <para>
      You must remove any Python code from your xm domain configuration files.      
     </para>
    </listitem>
    <listitem>
     <para>
      It is recommended to capture the libvirt domain XML from all existing
      virtual machines using <command>virsh <option>dumpxml</option>
      <replaceable>DOMAIN_NAME</replaceable>
      <replaceable>DOMAIN_NAME.xml</replaceable></command>.
     </para>
    </listitem>
   </itemizedlist>
   <note>
    <para>
     Currently, live migrating virtual machines running on a SLES11 SP3 &xen;
     host to a SLES12 &xen; host is not supported. The <command>xend</command>
     and libxl toolstacks are not runtime-compatible. Virtual machine downtime
     will be required to move the virtual machines from SLES11 SP3 to a SLES12
     host.
    </para>
   </note>
  </sect2>
 </sect1>

 <!-- xen2libvirt -->
 <xi:include href="xm_vs_xl_xen2libvirt.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
 <!-- xm vs xl -->
 <xi:include href="xm_vs_xl.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
 <!-- external ref -->
 <xi:include href="xm_vs_xl_links.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
 <!-- savin xen to xm -->
  <sect1 id="sec.libvirt.managing.export_Xen_xm">
   <title>
    Saving a &xen; Guest Configuration in an <command>xm</command> Compatible
    Format
   </title>
   <para>
    Although <command>xl</command> is now the current toolkit for managing
    &xen; guests (apart from the preferred &libvirt;), you may need to
    export the guest configuration to the previously used
    <command>xm</command> format. To do this, follow these steps:
   </para>
   <procedure>
    <step>
     <para>
      First export the guest configuration to a file:
     </para>
     <screen>virsh dumpxml guest_id > guest_cfg.xml</screen>
    </step>
    <step>
     <para>
      Then convert the configuration to the <command>xm</command> format:
     </para>
<screen>virsh domxml-to-native xen-xm guest_cfg.xml > guest_xm_cfg</screen>
    </step>
   </procedure>
  </sect1>

 <!-- Glossary -->
<!--
 <xi:include href="xm_vs_xl_glossary.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
-->
</appendix>
