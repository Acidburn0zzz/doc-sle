<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:novdoc-profile.xsl" type="text/xml" title="Profiling step"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="art.docker" xml:lang="en">
<?suse-quickstart color="suse"?>
 <title>Docker Quick Start</title>
 <subtitle>&productname; &productnumber;</subtitle>
 <info><productname>&productname;</productname>
  <productnumber>&productnumber;</productnumber><date>
<?dbtimestamp format="B d, Y"?></date>
  <abstract>
   <para>
    This guide introduces Docker, a lightweight virtualization solution to
    run virtual units simultaneously on a single control host.
   </para>
  </abstract>
 </info>
<?suse-quickstart color="suse"?>
 <para>
  Docker is a lightweight virtualization solution to run multiple virtual
  units (containers) simultaneously on a single control host. Containers are
  isolated with Kernel Control Groups (<xref linkend="vle.docker.cgroup"/>)
  and <xref linkend="vle.docker.namespace"/>.
 </para>
 <para>
  Full virtualization solutions such as &xen;, &kvm;, or &libvirt;
  are based on the processor simulating a complete hardware environment and
  controlling the virtual machines. However, Docker only provides operating
  system-level virtualization where the Linux kernel controls isolated
  containers.
 </para>
 <sect1 xml:id="sec.docker.term">
  <title>Terminology</title>

  <para>
   The following list contains important terminology and introduces you to
   certain fundamental concepts of Docker.
   <remark>taroth 2014-10-30: aginies,
    perhaps sort the terms alphabetically? like in a glossary?</remark>
  </para>

  <variablelist>
   <varlistentry xml:id="vle.docker.cgroup">
    <term>cgroups</term>
    <listitem>
     <para>
      Control Groups is a Linux kernel feature that allows aggregating or
      partitioning tasks (processes) and all their children into
      hierarchically organized groups to isolate resources.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image</term>
    <listitem>
     <para>
      A <emphasis>virtual machine</emphasis> on the host server that can run
      any Linux system, for example &sls;, &sled;, or &opensuse;. A
      Docker image is made by a series of layers built one over the other.
      Each layer corresponds to a permanent change committed from a
      container to the image. For more details, see the official Docker
      documentation at
      <link xlink:href="http://docs.docker.com/terms/image/"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image Name</term>
    <listitem>
     <para>
      A name that refers to an image. The name is used by the Docker
      commands.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container</term>
    <listitem>
     <para>
      A running Docker image.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container ID</term>
    <listitem>
     <para>
      An ID that refers to a particular container. The ID is used by the
      Docker commands.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Tag</term>
    <listitem>
     <para>
      A string associated with an image. It is commonly used to identify a
      specific version of an image (similar to tags in version control
      systems). It is also possible to refer the same image with different
      tags.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="vle.docker.namespace">
    <term>Kernel Namespaces</term>
    <listitem>
     <para>
      Namespaces are a kernel feature to isolate some resources like
      network, users, and others for a group of processes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Docker Host Server</term>
    <listitem>
     <para>
      The system that runs the Docker daemon, and provides images and
      management control capabilities through
      <xref linkend="vle.docker.cgroup"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Registry</term>
    <listitem>
     <para>
      A remote storage for Docker images.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Repository</term>
    <listitem>
     <para>
      Place where all the version of a Docker image are kept.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.docker.overview">
  <title>Overview</title>

  <para>
   Docker is a platform that allows developers and system administrators to
   manage the complete life cycle of images. Docker makes it easy to build,
   ship and run images containing applications.
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <title>Benefits of Docker</title>
   <listitem>
    <para>
     Isolation of applications and operating systems through containers.
    </para>
   </listitem>
   <listitem>
    <para>
     Near native performance, as Docker manages allocation of resources in
     real-time.
    </para>
   </listitem>
   <listitem>
    <para>
     Controls network interfaces and resources available inside containers
     through cgroups.
    </para>
   </listitem>
   <listitem>
    <para>
     Versioning of images.
    </para>
   </listitem>
   <listitem>
    <para>
     Allows building new images based on existing ones.
    </para>
   </listitem>
   <listitem>
    <para>
     Docker Hub allows sharing and storing of images on
     <link xlink:href="http://docs.docker.com/docker-hub/">public</link> or
     <link xlink:href="http://docs.docker.com/userguide/dockerrepos/#private-repositories">
     private</link> repositories.
    </para>
   </listitem>
  </itemizedlist>

  <itemizedlist mark="bullet" spacing="normal">
   <title>Limitations of Docker</title>
   <listitem>
    <para>
     Containers run inside the host system's kernel and cannot use a
     different kernel.
    </para>
   </listitem>
   <listitem>
    <para>
     Only allows Linux <emphasis>guest</emphasis> operating systems.
    </para>
   </listitem>
   <listitem>
    <para>
     Docker is not a full virtualization stack like &xen;, &kvm;, or
     &libvirt;.
    </para>
   </listitem>
   <listitem>
    <para>
     Security depends on the host system. Refer to the
     <link xlink:href="http://docs.docker.com/articles/security/">official
     security documentation</link> for more details.
    </para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.docker.containerd">
   <title>Container Drivers</title>
   <para>
    Docker has different back-end drivers to handle containers:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <link xlink:href="https://github.com/docker/libcontainer">libcontainer</link>:
      this is the recommended driver and the default choice.
     </para>
    </listitem>
    <listitem>
     <para>
      &lxc;: this driver handles the containers using the &lxc; tools.
      &productname; &productnumber; does not provide the &lxc;
      package, hence this driver cannot be used.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="library">libvirt-lxc</systemitem>: this driver
      controls the containers using the
      <link xlink:href="http://libvirt.org/drvlxc.html">libvirt-lxc</link>
      tool. At the time of writing this driver is not yet mature as the
      others.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec.docker.storaged">
   <title>Storage Drivers</title>
   <para>
    Docker supports different storage drivers:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      <systemitem class="resource">vfs</systemitem>: this driver is
      automatically used when the Docker host file system does not support
      copy-on-write. This is a simple driver which does not offer some of
      the advantages of Docker (like sharing layers, more on that in the
      next sections). It is highly reliable but also slow.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">devicemapper</systemitem>: this driver
      relies on the device-mapper thin provisioning module. It supports
      copy-on-write, hence it offers all the advantages of Docker.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">btrfs</systemitem>: this driver relies on
      Btrfs to provide all the features required by Docker. To use this
      driver the <filename>/var/lib/docker</filename> directory must be on a
      Btrfs file system.
     </para>
    </listitem>
    <listitem>
     <para>
      <systemitem class="resource">AUFS</systemitem>: this driver relies on
      AUFS union file system. Neither the upstream kernel nor the SUSE one
      supports this file system. Hence the AUFS driver is not built into the
      SUSE Docker package.
     </para>
    </listitem>
   </itemizedlist>
   <para>
    &slea;&nbsp;12 uses the Btrfs file system by default, which leads
    Docker to use the <systemitem class="resource">btrfs</systemitem>
    driver.
   </para>
   <para>
    It is possible to specify which driver to use by changing the value of
    the <envar>DOCKER_OPTS</envar> variable defined inside of the
    <filename>/etc/sysconfig/docker</filename> file. This can be done either
    manually or using &yast; by browsing to <menuchoice>
    <guimenu>System</guimenu> <guimenu>/etc/sysconfig Editor</guimenu>
    <guimenu>System</guimenu> <guimenu>Management</guimenu>
    <guimenu>DOCKER_OPTS</guimenu> </menuchoice> menu and entering the
    <systemitem class="library">-s storage_driver</systemitem> string.
   </para>
   <para>
    For example, to force the usage of the
    <systemitem class="resource">devicemapper</systemitem> driver enter the
    following text:
   </para>
<screen>DOCKER_OPTS="-s devicemapper</screen>
   <note>
    <para>
     It is recommended to have <filename>/var/lib/docker</filename> mounted
     on a different file system to not affect the Docker host operating
     system in case of a file system corruption.
    </para>
   </note>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.docker.setup">
  <title>Setting Up a Docker Host</title>

  <para/>

  <sect2 xml:id="sec.docker.setup.general">
   <title>General Preparation</title>
   <para>
    Prepare the host:
   </para>
   <procedure>
    <step>
     <para>
      Install the <systemitem>docker</systemitem> package.
     </para>
    </step>
    <step>
     <para>
      Automatically start the Docker daemon at boot:
     </para>
<screen>sudo systemctl enable docker</screen>
    </step>
    <step>
     <para>
      Start the Docker daemon:
     </para>
<screen>sudo systemctl start docker</screen>
    </step>
   </procedure>
   <para>
    The Docker daemon listens on a local socket which is accessible only by
    the <systemitem class="username">root</systemitem> user and by the
    members of the <systemitem class="groupname">docker</systemitem> group.
    The <systemitem class="groupname">docker</systemitem> group is
    automatically created at package installation time. To allow a certain
    user to connect to the local Docker daemon, use the following command:
   </para>
<screen>sudo /usr/sbin/usermod -aG docker <replaceable>USERNAME</replaceable></screen>
   <para>
    The user can communicate with the local Docker daemon upon his next
    login.
   </para>
  </sect2>

  <sect2 xml:id="sec.docker.setup.net">
   <title>Networking</title>
   <para>
    If you want your containers to be able to access the external network,
    you must enable the <option>ipv4 ip_forward</option> rule. This can be
    done using &yast; by browsing to <menuchoice> <guimenu>Network
    Devices</guimenu> <guimenu>Network Settings</guimenu>
    <guimenu>Routing</guimenu> </menuchoice> menu and ensuring
    <option>Enable IPv4 Forwarding</option> is checked.
   </para>
   <para>
    This option cannot be changed when networking is handled by the Network
    Manager. In such cases the
    <filename>/etc/sysconfig/SuSEfirewall2</filename> file needs to be
    edited by hand to ensure the <option>FW_ROUTE</option> flag is set to
    <option>yes</option>:
   </para>
<screen>FW_ROUTE="yes"</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.docker.basic">
  <title>Basic Docker Operations</title>

  <para>
   Images can be pulled from Docker's central index at
   <link xlink:href="http://index.docker.io"/> using the following command:
  </para>

<screen>docker pull <replaceable>IMAGE_NAME</replaceable></screen>

  <para>
   Containers can be started using the <command>docker run</command>
   command. Refer to the official documentation of Docker at
   <link xlink:href="http://docs.docker.com/"/> for more details.
  </para>
 </sect1>
 <sect1 xml:id="sec.docker.building_images">
  <title>Building Docker Images</title>

  <para>
   Starting with version 5.06.8, &kiwi; can be used to build Docker
   images. Also see the official &kiwi; documentation, in particular
   <link xlink:href="https://doc.opensuse.org/projects/kiwi/doc/#chap.lxc"/>.
   The official <systemitem>kiwi-doc</systemitem> package contains examples
   of Docker images.
  </para>

  <para>
   Docker has an
   <link xlink:href="http://docs.docker.com/reference/builder/">internal
   build system</link> which can be used to create new images based on
   existing ones.
  </para>

  <para>
   Some users might be confused about which build system to use for what
   task. The recommended approach is to build the
   <link xlink:href="http://docs.docker.com/terms/image/#base-image-def">base
   images</link> using &kiwi; and then use those as foundation blocks
   inside of the Docker build system. This approach has two advantages:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     You can use Docker-specific directives (like
     <literal>ENTRYPOINT</literal>, <literal>EXPOSE</literal>, ...).
    </para>
   </listitem>
   <listitem>
    <para>
     You can re-use existing layers.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Sharing the common layers between different images makes it possible to:
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Use less disk space on the Docker hosts and on the remote registry
     service.
    </para>
   </listitem>
   <listitem>
    <para>
     Deploy faster: only the requested layers are sent over the network
     (this is similar to upgrading installed packages using delta RPMs).
    </para>
   </listitem>
   <listitem>
    <para>
     Take full advantage of caching while building Docker images: this will
     result in faster executions of the <command>docker build</command>
     command.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   As you can see, &kiwi; is not intended as a replacement for Docker's
   build system, it rather complements it.
  </para>
 </sect1>
 <sect1 xml:id="sec.docker.sle_images">
  <title>&sle; Images for Docker</title>

  <para>
   Currently we cannot distribute &slea; images for Docker because there
   is no way to associate an End-User License Agreement (EULA) to a Docker
   image. However, we provide official &kiwi; templates and a convenience
   tool called
   <link xlink:href="https://github.com/SUSE/sle2docker">sle2docker</link>
   that can be used to build these images locally.
  </para>

  <sect2 xml:id="sec.docker.sle_images.sle2docker_install">
   <title>Installing sle2docker</title>
   <para>
    The <command>sle2docker</command> tool is part of the official
    &slea;&nbsp;12 repositories. It can be installed using the
    following command:
   </para>
<screen>sudo zypper install sle2docker</screen>
   <note>
    <para>
     <command>sle2docker</command> requires the Docker daemon to be running
     on the system.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="sec.docker.sle_images.build">
   <title>Building Docker Images</title>
   <para>
    The official &slea; templates are shipped with the
    <command>sle2docker</command> package. Use the following command to list
    the available templates:
   </para>
<screen>sle2docker list</screen>
   <para>
    Select a template and build it using the following command:
   </para>
<screen>sle2docker build <replaceable>TEMPLATE_NAME</replaceable></screen>
   <para>
    At the end of the build process <command>sle2docker</command> will print
    the command that can be used to import the image.
   </para>
   <sect3 xml:id="sec.docker.sle_images.build.ncc">
    <title>&scc; Integration</title>
    <para>
     By default <command>sle2docker</command> downloads all the required
     packages from &scc;. Before the build starts,
     <command>sle2docker</command> prompts the user for his &scc;
     credentials. It is possible to start a build in a non interactive way
     by using the following command:
    </para>
<screen>sle2docker build -u <replaceable>User Name</replaceable> -p <replaceable>PASSWORD</replaceable> <replaceable>TEMPLATE_NAME</replaceable></screen>
   </sect3>
   <sect3 xml:id="sec.docker.sle_images.build.smt">
    <title>&smtool; Integration</title>
    <para>
     It is possible to download all the required packages from a local
     &smtool; (SMT) instance:
    </para>
<screen>sle2docker build -s <replaceable>SMT_SERVER_Host Name</replaceable> <replaceable>TEMPLATE_NAME</replaceable></screen>
    <para>
     By default <command>sle2docker</command> assumes the contents of the
     &smt; server to be served over HTTPS. To force the retrieval of the
     package over plain HTTP use the following command:
    </para>
<screen>sle2docker build -s <replaceable>SMT_SERVER_Host Name</replaceable> --disable-https <replaceable>TEMPLATE_NAME</replaceable></screen>
    <para>
     By default <command>sle2docker</command> expects the &smt; instance
     to not require any form of authentication. However, it is possible to
     specify the access credentials by using the following command:
    </para>
<screen>sle2docker build -s <replaceable>SMT_SERVER_Host Name</replaceable> -u <replaceable>User Name</replaceable> -p <replaceable>PASSWORD</replaceable> <replaceable>TEMPLATE_NAME</replaceable></screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec.docker.sle_images.how_the_build_process_works">
   <title>How the Build Process Works</title>
   <para>
    The <command>sle2docker</command> package comes with a set of supported
    &slea; templates. These are &kiwi; source files which are filled
    with the information provided by the user at runtime.
   </para>
   <para>
    The image creation happens inside of
    <link xlink:href="https://registry.hub.docker.com/u/opensuse/kiwi/">this
    Docker image</link>. This is done because on recent systems (like
    &slea;&nbsp;12) &kiwi; cannot create &slea;&nbsp;11
    images. That happens because building a &slea;&nbsp;11 system
    requires the <systemitem class="library">db45-utils</systemitem> package
    to be installed on the host system . This package is obsolete and is not
    available on &slea;&nbsp;12.
   </para>
   <para>
    The Docker image used by <command>sle2docker</command> is based on the
    &opensuse; one which is freely downloadable from the
    <link xlink:href="https://registry.hub.docker.com/">Docker Hub</link>.
    The image is built using Docker's build system by starting from the
    <link xlink:href="https://registry.hub.docker.com/_/opensuse/"> official
    &opensuse; image</link>. The
    <systemitem class="library">Dockerfile</systemitem> used to create this
    image can be found inside
    <link xlink:href="https://github.com/openSUSE/docker-containers">this
    repository</link>.
   </para>
   <para>
    <command>sle2docker</command> automatically fetches the
    <systemitem class="library">opensuse/kiwi</systemitem> image if not
    found on the system.
   </para>
  </sect2>
 </sect1>
</article>
