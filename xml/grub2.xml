<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<!-- http://www.dedoimedo.com/computers/grub-2.html -->

<!--
 2012-07-02 toba:
 * deadline ~ end of August
 * info provider: Steffen Winterfeld
 * FATE: https://fate.suse.com/308497
 * doc sources:
  https://help.ubuntu.com/community/Grub
  http://www.gnu.org/software/grub/manual
-->
<chapter id="grub2">
 <title>The Boot Loader &grub;</title><indexterm>
 <primary>booting</primary>
 <secondary>&grub;</secondary></indexterm><indexterm>
 <primary>&grub;</primary></indexterm>
 <abstract>
  <para>
   This chapter describes how to configure &grub;, the boot loader used in 
   &productnamereg;. It is the successor of the traditional GRUB boot loader&mdash;
   now called <quote>&grub; Legacy</quote>. &grub; has become the default boot loader
   in &productnamereg; since version 12. A special &yast; module is
   available for configuring the most important settings.

   The boot procedure as a whole is outlined in <xref linkend="cha.boot"/>. For 
   details on Secure Boot support on UEFI machines see <xref linkend="cha.uefi"/>.
  </para>
 </abstract>
 <sect1 id="grub2.new.features">
  <title>Main Differences from GRUB Legacy to &grub;</title>

  <itemizedlist>
   <listitem>
    <para>
     The configuration is stored in different files.
    </para>
   </listitem>
   <listitem>
    <para>
     More file-systems are supported.
    </para>
   </listitem>
   <listitem>
    <para>
     Can directly read files stored on LVM or RAID devices.
    </para>
   </listitem>
   <listitem>
    <para>
     The user interface can be translated and designed with themes.
    </para>
   </listitem>
   <listitem>
    <para>
     Includes a mechanism for loading modules to support specific
     features, such as file systems etc.
    </para>
   </listitem>
   <listitem>
    <para>
     Automatically searches and generates boot entries for other kernels and operating systems, such as Windows. 
    </para>
   </listitem>
   <listitem>
    <para>
     Includes a minimal BASH-like console.  
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 id="grub2.file_structure">
  <title>Configuration File Structure</title>

  <para>
   The actual configuration of &grub; is based on the following files:
  </para>

  <variablelist>
   <varlistentry>
    <term><filename>/boot/grub2/grub.cfg</filename></term>
    <listitem><indexterm>
     <primary>&grub;</primary>
     <secondary>grub.cfg</secondary></indexterm>
     <para>
      This file contains all information about the &grub; menu items. It
      replaces <filename>menu.lst</filename> used in GRUB Legacy.
      <filename>grub.cfg</filename> is built by the
      <xref linkend="grub2.grub2-mkconfig"/> command, and should not be edited.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/boot/grub2/custom.cfg</filename></term>
    <listitem><indexterm>
     <primary>&grub;</primary>
     <secondary>custom.cfg</secondary></indexterm>
     <para>
      This optional file is directly sourced by the <filename>grub.cfg</filename>
      at boot time. 
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/default/grub</filename>
    </term>
    <listitem><indexterm>
     <primary>&grub;</primary>
     <secondary>/etc/default/grub</secondary></indexterm>
     <para>
      This file controls the user settings of &grub; and usually includes
      additional environmental settings such as backgrounds and themes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Scripts under <filename>/etc/grub.d/</filename>
    </term>
    <listitem><indexterm>
     <primary>&grub;</primary>
     <secondary>/etc/grub.d/</secondary></indexterm>
     <para>
      The scripts in this directory are read during execution of the
      <xref linkend="grub2.grub2-mkconfig"/> command. Their instructions are
      integrated into the main configuration file
      <filename>/boot/grub/grub.cfg</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry id="grub2.sysconfig">
    <term><filename>/etc/sysconfig/bootloader</filename>
    </term>
    <listitem><indexterm>
     <primary>&grub;</primary>
     <secondary>sysconfig/bootloader</secondary></indexterm>
     <para>
      This configuration file is only used when configuring the boot loader
      with &yast; or every time a new kernel is installed. It is evaluated by
      the perl-bootloader which modifies the boot loader configuration file
      (for example <filename>/boot/grub2/grub.cfg</filename> for &grub;)
      accordingly. <filename>/etc/sysconfig/bootloader</filename> is not a
      &grub; specific configuration file - the values are applied to any
      boot loader installed on &productname;.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   &grub; can be controlled in various ways. Boot entries from an existing
   configuration can be selected from the graphical menu (splash screen).
   The configuration is loaded from the file <filename>/boot/grub2/grub.cfg</filename>
   which is compiled from other configuration files (see below). All &grub;
   configuration files are considered system files, and you need &rootuser;
   privileges to edit them.
  </para>
  <note>
   <title>Activating Configuration Changes</title>
   <para>
    When having manually edited &grub; configuration files, you need to run
    <xref linkend="grub2.grub2-mkconfig"/> to activate the changes. However, this
    is not necessary when changing the configuration with &yast;, since it will
    automatically run <xref linkend="grub2.grub2-mkconfig"/>.
   </para>
  </note>
  <sect2 id="grub2.grub_cfg">
   <title>The File <filename>/boot/grub2/grub.cfg</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>grub.cfg</secondary></indexterm><indexterm>
   <primary>&grub;</primary>
   <secondary>boot menu</secondary></indexterm><indexterm>
   <primary>&grub;</primary>
   <secondary>grub.cfg</secondary></indexterm>
   <para>
    The graphical splash screen with the boot menu is based on the &grub;
    configuration file <filename>/boot/grub2/grub.cfg</filename>, which
    contains all information about all partitions or operating systems that
    can be booted by the menu.
   </para>
   <para>
    Every time the system is booted, &grub; loads the menu file from the
    file system. For this reason, &grub; does not need to be re-installed
    after every change to the file. <filename>grub.cfg</filename> is
    automatically rebuilt with kernel installations or removals.
   </para>
   <para>
    <filename>grub.cfg</filename> is compiled from the file
    <filename>/etc/default/grub</filename> and scripts found in the
    <filename>/etc/grub.d/</filename> directory with the
    <xref linkend="grub2.grub2-mkconfig"/> command.
    Therefore you should never edit the file manually. Instead, edit the
    related source files or use the &yast; Boot Loader module to modify the
    configuration as described in <xref linkend="grub2.yast2.config"/>.
   </para>
  </sect2>

  <sect2 id="grub2.etc_default_grub">
   <title>The File <filename>/etc/default/grub</filename></title><indexterm>
   <primary>configuration files</primary>
   <secondary>/etc/default/grub</secondary></indexterm><indexterm>
   <primary>&grub;</primary>
   <secondary>/etc/default/grub</secondary></indexterm>
   <para>
    More general options of &grub; belong here, such as the time the menu
    is displayed, or the default OS to boot. To list all available options,
    see the output of the following command:
   </para>
    <screen>grep "export GRUB_DEFAULT" -A50 /usr/sbin/grub2-mkconfig | grep GRUB_</screen>
   <para>
    In addition to already defined variables, the user may introduce their
    own variables, and use them later in the scripts found in the
    <filename>/etc/grub.d</filename> directory.
   </para>
   <para>
    After you edit <filename>/etc/default/grub</filename>, run
    <xref linkend="grub2.grub2-mkconfig"/> to update the main configuration file.
   </para>
   <note>
    <para>
     All options set in this file are general options that affect all boot entries.
     Specific options for &xen; Kernels or the &xen; hypervisor can be set via the
     GRUB_*_XEN_* configuration options. See below for details.
    </para>
   </note>
    <variablelist>
     <varlistentry>
      <term><literal>GRUB_DEFAULT</literal></term>
      <listitem>
       <para>
        Sets the default menu entry that will be booted next time the
        computer is rebooted. It can be a numeric value, a complete menu
        entry quotation, or <quote>saved</quote>. A few examples follow:
       </para>
       <para>
        <literal>GRUB_DEFAULT=2</literal> boots the third (counted from
        zero) boot menu entry.
       </para>
       <para>
        <literal>GRUB_DEFAULT="2>0"</literal> boots the first submenu entry of the
        third top level menu entry.
       </para>
       <para>
        <literal>GRUB_DEFAULT="Example boot menu entry"</literal> boots the
        menu entry whose title matches the quotation.
       </para>
       <para>
        <literal>GRUB_DEFAULT=saved</literal> boots the entry specified by
        the <command>grub2-reboot </command> or <command>grub2-set-default
        </command> commands. While <command>grub2-reboot</command> sets the
        default boot entry for the next reboot only,
        <command>grub2-set-default</command> sets the default boot entry
        until changed.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_HIDDEN_TIMEOUT</literal></term>
      <listitem>
       <para>
        Waits the specified number of seconds for the user to press a key.
        During the period no menu is shown unless the user presses a key. If
        no key is pressed during the time specified, the control is passed
        to <literal>GRUB_TIMEOUT</literal>.
        <literal>GRUB_HIDDEN_TIMEOUT=0</literal> first checks whether
        <keycap function="shift"/> is pressed and shows the boot menu if
        yes, otherwise immediately boots the default menu entry. This is the
        default when only one bootable OS is identified by &grub;.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_HIDDEN_TIMEOUT_QUIET</literal></term>
      <listitem>
       <para>
        If <literal>false</literal> is specified, a countdown timer is
        displayed on a blank screen when the
        <literal>GRUB_HIDDEN_TIMEOUT</literal> feature is active.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_TIMEOUT</literal></term>
      <listitem>
       <para>
        Time period in seconds the boot menu is displayed before
        automatically booting the default boot entry. If you press a key,
        the timeout is cancelled and &grub; waits for you to make the
        selection manually. <literal>GRUB_TIMEOUT=-1</literal> will cause
        the menu to be displayed until you select the boot entry manually.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_LINUX</literal></term>
      <listitem>
       <para>
        Entries on this line are added at the end of the boot entries for
	normal and recovery mode. Use it to attach your own parameters to
        the boot entry.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_LINUX_DEFAULT</literal></term>
      <listitem>
       <para>
        Same as <literal>GRUB_CMDLINE_LINUX</literal> but the entries are
        appended in the normal mode only.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_LINUX_RECOVERY</literal></term>
      <listitem>
       <para>
        Same as <literal>GRUB_CMDLINE_LINUX</literal> but the entries are
        appended in the recovery mode only.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_LINUX_XEN_REPLACE</literal></term>
      <listitem>
       <para>
        This entry will completely replace the <literal>GRUB_CMDLINE_LINUX</literal>
        parameters for all &xen; boot entries.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT</literal></term>
      <listitem>
       <para>
        Same as <literal>GRUB_CMDLINE_LINUX_XEN_REPLACE</literal> but it will 
        only replace parameters of<literal>GRUB_CMDLINE_LINUX_DEFAULT</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_XEN</literal></term>
      <listitem>
       <para>
        This entry specifies the kernel parameters for the &xen; guest kernel
        only&mdash;the operation principle is the same as for
        <literal>GRUB_CMDLINE_LINUX</literal>. 
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_CMDLINE_XEN_DEFAULT</literal></term>
      <listitem>
       <para>
        Same as <literal>GRUB_CMDLINE_XEN</literal>&mdash;the operation principle
        is the same as for <literal>GRUB_CMDLINE_LINUX_DEFAULT</literal>. 
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_TERMINAL</literal></term>
      <listitem>
       <para>
        Enables and specifies input/output terminal device. Can be
        <literal>console</literal> (PC BIOS and EFI consoles),
        <literal>serial</literal> (serial terminal),
        <literal>ofconsole</literal> (Open Firmware console), or the default
        <literal>gfxterm</literal> (graphics-mode output).
        It is also possible to enable more then one device by quoting
        the required options, for example
        <literal>GRUB_TERMINAL="console serial"</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_GFXMODE</literal></term>
      <listitem>
       <para>
        The resolution used for the <literal>gfxterm</literal> graphical
        terminal. Note that you can only use modes supported by your
        graphics card (VBE). The default is ‘auto’, which tries to
        select a preferred resolution. You can display the screen
        resolutions available to &grub; by typing
        <command>vbeinfo</command> in the &grub; command line. The command
        line is accessed by typing <keycap>c</keycap> when the &grub; boot
        menu screen is displayed.
       </para>
       <para>
        You can also specify a color bit depth by appending it to the
        resolution setting, for example
        <literal>GRUB_GFXMODE=1280x1024x24</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_BACKGROUND</literal></term>
      <listitem>
       <para>
        Set a background image for the <literal>gfxterm</literal> graphical
        terminal. The image must be a file readable by &grub; at boot time,
        and it must end with the <literal>.png</literal>,
        <literal>.tga</literal>, <literal>.jpg</literal>, or
        <literal>.jpeg</literal> suffix. If necessary, the image will be
        scaled to fit the screen.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>GRUB_DISABLE_OS_PROBER</literal></term>
      <listitem>
       <para>
        Is this option set to <literal>true</literal> the automated search
        for other operating systems is disabled. Only the kernel images in
        <filename>/boot/</filename> and the options from your own scripts in
        <filename>/etc/grub.d/</filename> are detected.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <note>
     <para>
      All <literal>*_DEFAULT</literal> parameters can be handled manually or by &yast;.
     </para>
    </note>
   <para>
    For a complete list, see
    <ulink
     url="http://www.gnu.org/software/grub/manual/grub.html#Simple-configuration">
     GNU GRUB manual</ulink>.
   </para>
  </sect2>

  <sect2 id="grub2.etc_grub_d">
   <title>Scripts in <filename>/etc/grub.d</filename></title>
   <para>
    The scripts in this directory are read during execution of the
    <xref linkend="grub2.grub2-mkconfig"/> command, and their instructions are
    incorporated into <filename>/boot/grub2/grub.cfg</filename>. The order
    of menu items in <filename>grub.cfg</filename> is determined by the
    order in which the files in this directory are run. Files with a leading
    numeral are executed first, beginning with the lowest number.
    <filename>00_header</filename> is run before
    <filename>10_linux</filename>, which would run before
    <filename>40_custom</filename>. If files with alphabetic names are
    present, they are executed after the numerically-named files. Only
    executable files generate output to <filename>grub.cfg</filename> during
    execution of <command>grub2-mkconfig</command>. By default all files in
    the <filename>/etc/grub.d</filename> directory are executable. The most
    important scripts are:
   </para>

  <variablelist>
    <varlistentry>
     <term><filename>00_header</filename>
     </term>
     <listitem>
      <para>
       Sets environmental variables such as system file locations, video
       settings, themes, and previously saved entries. It also imports
       preferences stored in the <filename>/etc/default/grub</filename>.
       Normally you do not need to make changes to this file.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>10_linux</filename>
     </term>
     <listitem>
      <para>
       Identifies Linux kernels on the root device and creates relevant menu
       entries. This includes the associated recovery mode option if
       enabled. Only the latest kernel is displayed on the main menu page,
       with additional kernels included in a submenu.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>30_os-prober</filename>
     </term>
     <listitem>
      <para>
       This script uses OS-prober to search for Linux and other operating
       systems and places the results in the &grub; menu. There are
       sections to identify specific other operating systems, such as 
       Windows or Mac OS X.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>40_custom</filename>
     </term>
     <listitem>
      <para>
       This file provides a simple way to include custom boot entries into
       <filename>grub.cfg</filename>. Please make sure that you don't change the
       <literal>exec tail -n +3 $0</literal> part at the beginning.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>90_persistent</filename>
     </term>
     <listitem>
      <para>
       This is a special script which copies a corresponding part of the
       <filename>grub.cfg</filename> file and outputs it back unchanged.
       This way you can modify that part of <filename>grub.cfg</filename>
       directly and the change survives the execution of
       <xref linkend="grub2.grub2-mkconfig"/>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>
    The processing sequence is set by the preceding numbers with the
    lowest number being executed first. If scripts are preceded by the 
    same number the alphabetical order of the complete name decides the
    order.
   </para>
  </sect2>
  <sect2 id="grub2.map">
   <title>Mapping between BIOS drives and Linux devices</title><indexterm>
   <primary>&grub;</primary>
   <secondary>device.map</secondary></indexterm>
   <para>
    In GRUB Legacy, the <filename>device.map</filename> configuration file
    was used to derive Linux device names from BIOS drive numbers. The map
    between BIOS drives and Linux devices cannot always be guessed
    correctly: for example, &grub; will get the order wrong if you exchange
    the boot sequence between IDE and SCSI in your BIOS.
   </para>
   <para>
    &grub; avoids this problem by using device ID strings (UUIDs) or file
    system labels when generating <filename>grub.cfg</filename>. &grub;
    utilities create a temporary device map on the fly, which is usually
    sufficient, particularly in the case of single-disk systems.
   </para>
   <para>
    However, if you need to override the &grub;'s automatic device mapping
    mechanism, create your custom mapping file
    <filename>/boot/grub2/device.map</filename>. The following example changes
    the mapping to make <literal>DISK 3</literal> the boot disk. Please
    note that &grub; partition number start at 1 and not at 0 as in GRUB
    Legacy.
   </para>
<screen>(hd1)  /dev/disk-by-id/<replaceable>DISK3 ID</replaceable>
(hd2)  /dev/disk-by-id/<replaceable>DISK1 ID</replaceable>
(hd3)  /dev/disk-by-id/<replaceable>DISK2 ID</replaceable></screen>
  </sect2>

  <sect2 id="grub2.menu.change">
   <title>Editing Menu Entries during the Boot Procedure</title><indexterm>
   <primary>&grub;</primary>
   <secondary>menu editor</secondary></indexterm>
   <para>
    Editing menu entries during the boot process can help repairing a defective
    system, because configuration file errors can be corrected by manually
    entering parameters. It is also useful for testing new settings without 
    impairing the native system.
   </para>
   <procedure>
    <step>
     <para>
      In the graphical boot menu, choose the entry you want to edit with the
      arrow keys.
     </para>
    </step>
    <step>
     <para>
      Press <keycap>E</keycap> to open the text-based editor.
     </para>
    </step>
    <step>
     <para>
      Use the arrow keys to move the data you want to edit.
     </para>
     <figure id="fig.grub2.boot.editor">
      <title>&grub; Boot Editor</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="grub2_edit_config.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="grub2_edit_config.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
     <para>
      Now you have to options:
     </para>
     <substeps>
      <step>
       <para>Add space separated parameters to the end of the line starting with
        <literal>linux</literal> or <literal>linuxefi</literal> to edit the
        kernel parameters. A complete list of parameters is available at
        <ulink url="https://en.opensuse.org/Linuxrc"/>.
       </para>
      </step>
      <step>
       <para>
        Or edit the general options to change for example the kernel version. The 
        <keycap>TAB</keycap> key suggests all possible completions.
       </para>
      </step>
     </substeps>
    </step>
    <step>
     <para>
      Press <keycap>F10</keycap> to boot the system with the changes you just made
      or press <keycap>ESC</keycap> to discard your edits and return to the &grub;
      menu.
     </para>
    </step>
   </procedure>
   <para>
    Changes made this way only apply to the current boot process and are not saved
    permanently.
   </para>
   <important>
    <title>Keyboard Layout during the Boot Procedure</title>
    <para>
     The US keyboard layout is the only one available when booting. See
     <xref
      linkend="fig.trouble.install.keyboard_us"/>.
    </para>
   </important>
   <note>
    <title>Boot Loader on the Installation Media</title>
    <para>
     The Boot Loader of the installation media on systems with a traditional BIOS
     is still GRUB Legacy. To add boot options just select an entry and start typing.
     Additions you make to the installation boot entry will be permanently saved
     in the installed system. 
    </para>
   </note>
  </sect2>

  <sect2 id="grub2.password">
   <title>Setting a Boot Password</title><indexterm>
   <primary>&grub;</primary>
   <secondary>boot password</secondary></indexterm>
   <para>
    Even before the operating system is booted, &grub; enables access to
    file systems. Users without root permissions can access files in your
    Linux system to which they have no access once the system is booted. To
    block this kind of access or to prevent users from booting certain
    operating systems, set a boot password.
   </para>
   <important>
    <title></title>
    <para>
     The boot password is required on every boot, that means the system doesn't
     boot automatically.
    </para>
   </important>
   <para>
    As the user <literal>root</literal>, proceed as follows to set a boot
    password or use &yast; (<xref linkend="grub2.yast2.boot.password"/>).
   </para>
   <procedure>
    <step>
     <para>
      Encrypt the password using <command>grub2-mkpasswd-pbkdf2:</command>
     </para>
<screen>&prompt.user; sudo grub2-mkpasswd-pbkdf2
Password: ****
Reenter password: ****
PBKDF2 hash of your password is grub.pbkdf2.sha512.10000.9CA4611006FE96BC77A...
</screen>
    </step>
    <step>
     <para>
      Paste the resulting string into the file
      <filename>/etc/grub.d/40_custom</filename> together with the
      <command>set superusers</command> command.
     </para>
<screen>set superusers="root"
password_pbkdf2 root grub.pbkdf2.sha512.10000.9CA4611006FE96BC77A...</screen>
    </step>
    <step>
     <para>
      Run <xref linkend="grub2.grub2-mkconfig"/> to
      import the changes into the main configuration file.
     </para>
     <para>
      After you reboot, you will be prompted for username and password when
      trying to boot any menu entry. Enter <literal>root</literal> and the
      password you typed during the <command>grub2-mkpasswd-pbkdf2</command>
      command. If the credentials are correct, the system will boot the
      selected boot entry.
     </para> 
    </step>
   </procedure>
  </sect2>
 </sect1>
 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="grub2_yast_i.xml"/>
 <sect1 id="grub2.commands">
  <title>Helpful &grub; Commands</title>
  <variablelist>
   <varlistentry id="grub2.grub2-mkconfig">
    <term><command>grub2-mkconfig</command></term>
    <listitem>
     <para>
      Generates an new <filename>/boot/grub2/grub.cfg</filename> based on
      <filename>/etc/default/grub</filename> and the scripts from
      <filename>/etc/grub.d/</filename>.
     </para>
     <example>
      <title>Usage of grub2-mkconfig</title>
      <screen>grub2-mkconfig -o /boot/grub2/grub.cfg</screen>
     </example>
     <tip>
      <title>Syntax Check</title>
      <para>
       Running <command>grub2-mkconfig</command> without any parameters prints
       the configuration to STDOUT where it can be reviewed.
       Use <xref linkend="grub2.grub2-script-check"/> after written 
       <filename>/boot/grub2/grub.cfg</filename> to check its syntax.
     </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry id="grub2.grub2-mkrescue">
    <term><command>grub2-mkrescue</command></term>
    <listitem>
     <para>
      <remark condition="FIXME">
       2014-03-11 rsalevsky: bnc#812681
      </remark>
      Creates a bootable rescue image of your installed &grub; configuration.
     </para>
     <example>
      <title>Usage of grub2-mkrescue</title>
      <screen>grub2-mkrescue -o save_path/name.iso iso</screen>
     </example>
    </listitem>
   </varlistentry>
   <varlistentry id="grub2.grub2-script-check">
    <term><command>grub2-script-check</command></term>
    <listitem>
     <para>
      Checks the given file for syntax errors.
     </para>
     <example>
      <title>Usage of grub2-script-check</title>
      <screen>grub2-check-config /boot/grub2/grub.cfg</screen>
     </example>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>grub2-once</command></term>
    <listitem>
     <para>
      Set the default boot entry for the next boot only.
     </para>
     <example>
      <title>Usage of grub2-once</title>
      <screen>grub2-once number_of_the_boot_entry</screen>
     </example>
     <tip>
      <para>
       Call the program without any option to get a full list of all possible
       options.
      </para>
     </tip>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 id="grub2.info">
  <title>More Information's</title>

  <para>
   Extensive information about &grub; is available at
   <ulink
    url="http://www.gnu.org/software/grub/"/>. Also refer to the
   <command>grub</command> info page. <phrase os="osuse">You can also search
   for the keyword <quote>&grub;</quote> in the Support Database at
   <ulink url="http://en.opensuse.org/Portal:Support_database"/> to get
   information about special issues.</phrase><phrase os="sles;sled">You can
   also search for the keyword <quote>&grub;</quote> in the Technical
   Information Search at <ulink url="http://www.suse.com/support"/> to get
   information about special issues.</phrase>
  </para>
 </sect1>
</chapter>
