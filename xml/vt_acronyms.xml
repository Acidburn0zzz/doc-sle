<?xml version="1.0"?>
<!DOCTYPE glossary PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>

<glossdiv id="gloss.vt.acronym">
 <title>Acronyms</title>
 <glossentry id="gloss.vt.acronym.vmroot">
  <glossterm>VM root</glossterm>
  <glossdef>
   <para>
    <xref linkend="gloss.vt.acronym.hypervisor_vmm"/> will run in VMX root
    operation and guest software will run in VMX non-root
    operation. Transitions between VMX root operation and VMX non-root
    operation are called VMX transitions.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vhs">
  <glossterm>VHS</glossterm>
  <glossdef>
   <para>virtualization host server
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.pae">
  <glossterm>PAE</glossterm>
  <glossdef>
   <para>
    Physical Address Extension
   </para>
   <para>
    32 bit x86 operating systems use Physical Address Extension (PAE) mode to
    enable addressing of more than 4 GB of physical memory. In PAE mode, page
    table entries (PTEs) are 64 bits in size.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.hypervisor_vmm">
  <glossterm>VMM</glossterm>
  <glossdef>
   <para>
    Virtual Machine Monitor (Hypervisor)
   </para>
   <para>
    When the processor encounters an instruction or event of interest to the
    Hypervisor (<xref linkend="gloss.vt.acronym.hypervisor_vmm"/>), it exits from guest mode back to the
    VMM. The VMM emulates the instruction or other event, at a fraction of
    native speed, and then returns to guest mode. The transitions from guest
    mode to the VMM and back again are high latency operations, during which
    guest execution is completely stalled.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.mmu">
  <glossterm>MMU</glossterm>
  <glossdef>
   <para>
    Memory Management Unit
   </para>
   <para>
    is a computer hardware component responsible for handling accesses to
    memory requested by the CPU. Its functions include translation of virtual
    addresses to physical addresses (i.e., virtual memory management), memory
    protection, cache control, bus arbitration and in simpler computer
    architectures (especially 8-bit systems) bank switching.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.iommu">
  <glossterm>IOMMU</glossterm>
  <glossdef>
   <para>
    Input/Output Memory Management Unit
   </para>
   <para>
    IOMMU is a memory management unit (<xref linkend="gloss.vt.acronym.mmu"/>)
    that connects a direct memory access-capable (DMA-capable) I/O bus to the main memory.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.ept">
  <glossterm>EPT</glossterm>
  <glossdef>
   <para>
    Extended Page Tables
   </para>
   <para>
    Performance in a virtualized environment is close to that in a native
    environment. Virtualization does create some overheads, however. These
    come from the virtualization of the CPU, the <xref linkend="gloss.vt.acronym.mmu"/>,
    and the I/O devices. In some of their recent x86 processors AMD and Intel
    have begun to provide hardware extensions to help bridge this performance
    gap. In 2006, both vendors introduced their first generation hardware
    support for x86 virtualization with AMD-VirtualizationTM (AMD-VTM) and
    IntelÂ® VT-x technologies. Recently Intel introduced its second generation
    of hardware support that incorporates MMU-virtualization, called Extended
    Page Tables (EPT). EPT-enabled systems can improve performance compared to
    using shadow paging for  <xref linkend="gloss.vt.acronym.mmu"/>
    virtualization. EPT increases memory access
    latencies for a few workloads, this cost can be reduced by effectively
    using large pages in the guest and the hypervisor.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.rvi_npt">
  <glossterm>RVI or NPT</glossterm>
  <glossdef>
   <para>
    Rapid Virtualization Indexing, Nested Page Tables
   </para>
   <para>
    It's an AMD second generation hardware-assisted virtualization technology
    for the processor memory management unit (<xref linkend="gloss.vt.acronym.mmu"/>)
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.pse_pse36">
  <glossterm>PSE and PSE36</glossterm>
  <glossdef>
   <para>
    Page Size Extended
   </para>
   <para>
    Page Size Extension (PSE) refers to a feature of x86 processors that
    allows for pages larger than the traditional 4 KiB size. PSE-36 capability
    offers 4 more bits, in addition to normal 10 bits, are used inside a page
    directory entry pointing to a large page. This allows a large page to be
    located in 36 bit address space.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.pt">
  <glossterm>PT</glossterm>
  <glossdef>
   <para>
    Page Table
   </para>
  <para>
   A page table is the data structure used by a virtual memory system in a
   computer operating system to store the mapping between virtual addresses
   and physical addresses. Virtual addresses are those unique to the accessing
   process. Physical addresses are those unique to the hardware (RAM).
  </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vmcs">
  <glossterm>VMCS</glossterm>
  <glossdef>
   <para>
    Virtual Machine Control Structure
   </para>
   <para>
    VMX non-root operation and VMX transitions are controlled by a data
    structure called a virtual-machine control structure (VMCS). Access to the
    VMCS is managed through a component of processor state called the VMCS
    pointer (one per logical processor). The value of the VMCS pointer is the
    64-bit address of the VMCS. The VMCS pointer is read and written using the
    instructions VMPTRST and VMPTRLD. The <xref
    linkend="gloss.vt.acronym.hypervisor_vmm"/> configures a VMCS using the
    VMREAD, VMWRITE, and VMCLEAR instructions. A 
    <xref linkend="gloss.vt.acronym.hypervisor_vmm"/> could use a different
    VMCS for each virtual machine that it supports. For a virtual machine with
    multiple logical processors (virtual processors), the
    <xref linkend="gloss.vt.acronym.hypervisor_vmm"/> could use a
    different VMCS for each virtual processor.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.tlb">
  <glossterm>TLB</glossterm>
  <glossdef>
   <para>
    Translation Lookaside Buffer
   </para>
   <para>
    TLB is a cache that memory management hardware uses to improve virtual
    address translation speed. All current desktop, notebook, and server
    processors use a TLB to map virtual and physical address spaces, and it is
    nearly always present in any hardware which utilizes virtual memory.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.pcid">
  <glossterm>PCID</glossterm>
  <glossdef>
   <para>
    Process-context identifiers
   </para>
   <para>
    They are a facility by which a logical processor may cache information for
    multiple linear-address spaces so that the processor may retain cached
    information when software switches to a different linear address
    space. INVPCID instruction is used for fine-grained <xref
    linkend="gloss.vt.acronym.tlb"/> flush which is
    benefit for kernel.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vpid">
  <glossterm>VPID</glossterm>
  <glossdef>
   <para>
    New Support for Software Control of TLB (VPID improves TLB performance
    with small <xref linkend="gloss.vt.acronym.hypervisor_vmm"/> development effort).
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vcpu">
  <glossterm>Vcpu</glossterm>
  <glossdef>
   <para>
    A scheduling entity, containing all the state for virtualized CPU.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.thp">
  <glossterm>THP</glossterm>
  <glossdef>
   <para>
    Transparent Huge Pages
   </para>
   <para>
    It's allows CPUs to address memory using pages larger than the default 4
    KB. This helps reducing memory consumption and CPU cache usage. KVM is
    optimized to use THP (via madvise and opportunistic methods) if enabled on
    the VM Host Server.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.tcg">
  <glossterm>TCG</glossterm>
  <glossdef>
   <para>
    Tiny Code Generator
   </para>
   <para>
    Instruction are emulated rather than executed by the CPU.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vfio">
  <glossterm>vfio</glossterm>
  <glossdef>
   <para>
    Since kernel v3.6 a new method of accessing PCI devices from userspace called vfio.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vtpm">
  <glossterm>vTPM</glossterm>
  <glossdef>
   <para>
    Component to establish end-to-end integrity for guests via Trusted Computing
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.seccomp2_based_sandboxing">
  <glossterm>Seccomp2 based sandboxing</glossterm>
  <glossdef>
   <para>
    Sandboxed environment where only predetermined system calls are permitted
    for added protection against malicious behavior
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.cg">
  <glossterm>CG</glossterm>
  <glossdef>
   <para>
    Control Groups
   </para>
   <para>
    Feature to limit, account and isolate resource usage (CPU, memory, disk
    I/O, etc.)
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.smep">
  <glossterm>SMEP</glossterm>
  <glossdef>
   <para>
    Supervisor Mode Execution Protection
   </para>
   <para>
    This prevent the execution of usermode pages by the Xen hypervisor, making
    many application-to-hypervisor exploits much harder.
   </para>
  </glossdef>
 </glossentry>
 <glossentry id="gloss.vt.acronym.vmdq">
  <glossterm>VMDq</glossterm>
  <glossdef>
   <para>
    Virtual Machine Device Queue
   </para>
  <para>
   Multi-queue network adapters exist which support multiple VMs at the
   hardware level, having separate packet queues associated to the different
   hosted VMs (by means of the IP addresses of the VMs).
  </para>
  </glossdef>
 </glossentry>
  <glossentry id="gloss.vt.acpi">
   <glossterm>ACPI</glossterm>
   <glossdef>
    <para>
     Advanced Configuration and Power Interface (ACPI) specification provides
     an open standard for device configuration and power management by the 
     operating system.
    </para>
   </glossdef>
  </glossentry>
  <glossentry id="gloss.vt.apic">
   <glossterm>APIC</glossterm>
   <glossdef>
    <para>
     Advanced Programmable Interrupt Controller (APIC) is a family of
     interrupt controllers.
    </para>
   </glossdef>
  </glossentry>
</glossdiv>

