<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       version="5.0"
       xml:id="sec.sdn">
 <title>Software-Defined Networking with &ovs;</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>
  With software-defined networking (SDN), you can manage network services
  through abstraction of higher-level functionality.
  It allows you to separate the system that controls where traffic is sent
  (the <emphasis>control plane</emphasis>) from the underlying systems that
  forward traffic to the selected destination
  (<emphasis>the data plane</emphasis>).
 </para>
 <para>
  &ovs; is software that implements a distributed virtual multilayer switch that
  <!-- disable hyphentation with phrase -->
  supports the<phrase role="productname">OpenFlow</phrase> protocol.
  This protocol is layered onto TCP and gives access to the data plane.
 </para>

 <sect2 xml:id="sec.ovs-advantage">
  <title>Advantages of Software-Defined Networking</title>
  <para>
   Software-defined networking with &ovs; brings with several advantages with it,
   especially when using it with virtual machines:
  </para>
  <remark>
   Tried to create short version of this:
   https://github.com/openvswitch/ovs/blob/master/WHY-OVS.md
   - sknorr, 2015-09-30
  </remark>
  <itemizedlist>
   <listitem>
    <para>
     Networking states can be determined and moved from one machine to another.
     <remark>Is this too broad? - sknorr, 2015-09-30</remark>
    </para>
   </listitem>
   <listitem>
    <para>
     Outside software can be enabled to respond to network dynamics.
    </para>
   </listitem>
   <listitem>
    <para>
     Tag packets to identify which machine they are coming from or going to.
    </para>
   </listitem>
   <listitem>
    <para>
     &ovs; is designed to integrate with networking hardware and thus can also
     control hardware switches.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="sec.ovs-install">
  <title>Installing &ovs;</title>
  <procedure>
   <step>
    <para>
     Install &ovs; and supplemental packages:
    </para>
    <screen>&prompt.root; <command>zypper install <replaceable>openvswitch openvswitch-switch</replaceable></command></screen>
    <para>
     If you plan to use &ovs; together with the &kvm; hypervisor,
     additionally install <package>tunctl</package>.
     If you plan to use &ovs; together with the &xen; hypervisor,
     additionally install <package>openvswitch-kmp-xen</package>.
    </para>
   </step>
   <step>
    <para>
     Load the kernel modules:
    </para>
    <screen>&prompt.root; modprobe openvswitch</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs-userspace">
  <title>Overview of &ovs; Daemons and Utilities</title>
  <para>
   &ovs; consists of a number of components.
   Among them are a kernel module and various userspace components.
   The kernel module is used for accelerating the data path, but would not
   be necessary for a minimal &ovs; installation.
  </para>
  <para>
   The most important executables of &ovs; are its two daemons.
  </para>
  <variablelist xml:id="vl.ovs-daemons">
   <title>&ovs; Daemons</title>
   <varlistentry>
    <term><command>ovsdb-server</command></term>
    <listitem>
     <para>
      The &ovs; database daemon.
      Serves the database that stores the state of &ovs;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovs-vswitchd</command></term>
    <listitem>
     <para>
      The &ovs; daemon that provides the implementation of a switch.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   &ovs; also comes with a number of utilities that help you work with it.
   The following list is not exhaustive, but instead describes important
   commands only.
  </para>
  <variablelist xml:id="vl.ovs-utility">
   <title>&ovs; Utilities</title>
   <varlistentry>
    <term><command>ovsdb-tool</command></term>
    <listitem>
     <para>
      Create, upgrade, compact, and query an &ovs; database.
      Do a transaction on a database.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovsdb-client</command></term>
    <listitem>
     <para>
      Retrieve lists of databases itself and their tables, rows, and columns.
      Monitor the contents of a database.
      Do a transaction on a database.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovs-appctl</command></term>
    <listitem>
     <para>
      Configure a running <command>ovs-vswitchd</command> or
      <command>ovsdb-server</command> daemon.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovs-benchmark</command></term>
    <listitem>
     <para>
      Test latency and throughput of a flow setup.
      <remark>
       Flow setup is what exactly? This comes from the man page. - sknorr,
       2015-09-30
      </remark>
     </para>
    </listitem>
   </varlistentry>
   <!-- <varlistentry>
    <term><command>ovs-bugtool</command></term>
    <listitem>
     <para>
      Report a bug in &ovs;.
     </para>
    </listitem>
   </varlistentry> -->
   <varlistentry>
    <term><command>ovs-dpctl</command>, <command>ovs-dpctl-top</command></term>
    <listitem>
     <para>
      Create, modify, visualize and delete data paths.
      Using this tool can interfere with <command>ovs-vswitchd</command> also
      performing data path management.
      It is therefore most useful for diagnostics.
     </para>
     <para>
      <command>ovs-dpctl-top</command> creates a <command>top</command>-like
      visualization for data paths.
      <remark>Is visualize/ation the right word? - sknorr, 2015-09-30</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovs-ofctl</command></term>
    <listitem>
     <para>
      Manage switches adhering to the OpenFlow protocol.
      This protocol is used by &ovs;, but also other software.
      Hence, <command>ovs-ofctl</command> can also manage switches created using
      other software.
     </para>
    </listitem>
   </varlistentry>
   <!-- <varlistentry>
    <term><command>ovs-pcap</command></term>
    <listitem>
     <para>
      Create a hexadecimal representation of a captured network package
      in the PCAP format.
      This can then be used to trace how a particular package would travel.
     </para>
    </listitem>
   </varlistentry> -->
   <!--<varlistentry>
    <term><command>ovs-parse-backtrace</command></term>
    <listitem>
     <para>
      Create a more readable version of backtraces from
      <command>ovs-appctl backtrace</command>.
     </para>
    </listitem>
   </varlistentry> -->
   <!-- <varlistentry>
    <term><command>ovs-tcpundump</command></term>
    <listitem>
     <para>
      Create a hexadecimal representation of the output of
      <command>tcpdump</command>.
      This can then be used to trace how a stream of packages would travel.
     </para>
    </listitem>
   </varlistentry> -->
   <varlistentry>
    <term><command>ovs-vlan-bug-workaround</command></term>
    <listitem>
     <para>
      Some device drivers have a buggy implementation of VLAN acceleration.
      Use this utility to work around such bugs.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>ovs-vsctl</command></term>
    <listitem>
     <para>
      Provides a high-level interface to the configuration database.
      It can be used to query and modify the database.
      In effect, it shows the shows the status of <command>ovs-vswitchd</command>
      and can be used to configure it.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="sec.ovs-database-create">
  <title>Creating a database for &ovs;</title>
  <procedure>
   <step>
    <para>
     Create a directory where &ovs; can write its database:
    </para>
<screen>&prompt.root; <command>mkdir <replaceable>/etc/openvswitch</replaceable></command></screen>
   </step>
   <step>
    <para>
     Create a configuration database with the default settings:
    </para>
<screen>&prompt.root; <command>ovsdb-tool create <replaceable>/etc/openvswitch/conf.db</replaceable> \
<replaceable>/usr/share/openvswitch/vswitch.ovsschema</replaceable></command></screen>
    <para>
     This creates a new database with the default schema.
     You can also leave away both the database and schema arguments to use the
     default in each case.
     You can check what the default file names are:
    </para>
<screen>&prompt.user; <command>ovsdb-tool --help</command> | <command>grep <replaceable>default</replaceable></command></screen>
   </step>
   <step>
    <para>
     Create a directory for the socket file of the &ovs; database:
    </para>
<screen>&prompt.root; <command>mkdir -p <replaceable>/var/run/openvswitch</replaceable></command></screen>
   </step>
   <step>
    <para>
     Now start the database server:
    </para>
<screen>&prompt.root; <command>ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--private-key=db:Open_vSwitch,SSL,private_key \
--certificate=db:Open_vSwitch,SSL,certificate \
--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
--pidfile --detach</command></screen>
    <warning>
     <title>Exposed SSL Certificate</title>
     <para>
      <option>--bootstrap-ca-cert</option> exposes the SSL certificate to
      man-in-the-middle attacks.
      It should therefore only be used for bootstrapping.
     </para>
     <remark>
      Correct? This is what the ovs-vctl man page says. How to mitigate?
      - sknorr, 2015-09-30
     </remark>
    </warning>
   </step>
   <step>
    <para>
     Initialize the database:
    </para>
    <screen>&prompt.root; sudo ovs-vsctl --no-wait init</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs-start">
  <title>Starting &ovs;</title>
  <procedure>
   <step>
    <para>
     If you have not already done so, start the database server:
    </para>
<screen>&prompt.root; <command>ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--private-key=db:Open_vSwitch,SSL,private_key \
--certificate=db:Open_vSwitch,SSL,certificate \
--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
--pidfile --detach</command></screen>
    <remark>Is the following helpful or obvious? I found a question about this
     on Stack Overflow. - sknorr, 2015-09-30
    </remark>
    <note>
     <title>Database Does Not Start Automatically</title>
     <para>
      If you restart the computer, you will have to start the database server
      again.
     </para>
    </note>
   </step>
   <step>
    <para>
     Start the &ovs; daemon:
    </para>
<screen>&prompt.root; <command></command></screen>
   </step>
  </procedure>
 </sect2>

 <sect2>
  <title>Using &ovs; together with &kvm;</title>
  <para>
   You can use &ovs; to manage the network access of virtual machines created
   with &kvm;.
   When you have installed, configured the database and started &ovs;, proceed
   as follows:
  </para>
  <procedure>
   <step>
    <para>
     Create a bridge for use by your virtual machine:
    </para>
<screen>&prompt.root; <command>ovs-vsctl add-br <replaceable>br0</replaceable></command></screen>
   </step>
   <step>
    <para>
     Assign your bridge a network interface that the guests can communicate
     over, such as <systemitem>eth0</systemitem>:
    </para>
<screen>&prompt.root; <command>ovs-vsctl add-port <replaceable>br0</replaceable> <replaceable>eth0</replaceable></command></screen>
   </step>
   <step>
    <para>
     Create a pair of <filename>ifup</filename>/<filename>ifdown</filename>
     scripts.
    </para>
    <para>
     The <filename>ifup</filename> script should look like this:
    </para>
<screen>#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 up
ovs-vsctl add-port ${switch} $1</screen>
    <para>
     The <filename>ifdown</filename> script should look like this:
    </para>
<screen>#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 down
ovs-vsctl del-port ${switch} $1</screen>
    <para>
     Save these in a location where you can find them later, such as
     <filename>/etc/ovs-ifup</filename> and <filename>/etc/ovs-ifdown</filename>.
    </para>
   </step>
   <step>
    <para>
     Allow the scripts to be executed:
    </para>
<screen>&prompt.root; <command>chmod +x <replaceable>/etc/ovs-ifup /etc/ovs-ifdown</replaceable></command></screen>
   </step>
   <step>
    <para>
     Next, start a virtual machine that uses the scripts defined before:
    </para>
<screen>&prompt.root; <command>qemu-system-x86_64 -drive file=<replaceable>/path/to/disk-image</replaceable>,boot=on \
-m <replaceable>512</replaceable> -net nic,macaddr=<replaceable>00:11:22:EE:EE:EE</replaceable> \
-net tap,script=<replaceable>/etc/ovs-ifup</replaceable>,downscript=<replaceable>/etc/ovs-ifdown</replaceable></command></screen>
    <para>
     The final line references a tap device associated with the two scripts.
     Note that the name of the executable can be different depending on the
     system architecture of your computer: <command>qemu-system-ARCH</command>.
    </para>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs-more">
  <title>For More Information</title>
  <para>
   To learn more about &ovs;, visit the documentation Web site of the project:
   <link xlink:href="http://openvswitch.org/support/"/>.
  </para>
 </sect2>
</sect1>
