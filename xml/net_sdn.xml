<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       version="5.0"
       xml:id="sec.ovs">
 <title>Software-Defined Networking with &ovs;</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>
  Software-defined networking (SDN) means separating the system that controls
  where traffic is sent (the <emphasis>control plane</emphasis>) from the
  underlying system that forwards traffic to the selected destination (the
  <emphasis>data plane</emphasis>, also called the
  <emphasis>forwarding plane</emphasis>).
  That means that the functions previously fulfilled by a single, usually
  inflexible switch can now be separated between a switch (data plane) and its
  controller (control plane).
  In this model, the controller is programmable and can be very flexible and
  adapt quickly to changing network conditions.
 </para>
 <para>
  &ovs; is software that implements a distributed virtual multilayer switch
  that is compatible with the
  <!-- phrase to disable hyphenation: --><phrase role="productname">OpenFlow</phrase>
  protocol.
  <phrase role="productname">OpenFlow</phrase> is layered onto TCP and is
  designed for software-defined networking.
  <phrase role="productname">OpenFlow</phrase> is implemented in a range of
  hardware and software, so that a single controller can drive different
  switches.
 </para>

 <sect2 xml:id="sec.ovs.advantage">
  <title>Advantages of &ovs;</title>
  <para>
   Software-defined networking with &ovs; brings several advantages with it,
   especially when you used together with virtual machines:
  </para>
  <remark>
   Tried to create short version of this:
   https://github.com/openvswitch/ovs/blob/master/WHY-OVS.md
   - sknorr, 2015-09-30
  </remark>
  <itemizedlist>
   <listitem>
    <para>
     Networking states can be identified easily.
    </para>
   </listitem>
   <listitem>
    <para>
     Networks and their live state can be moved from one host to another.
    </para>
   </listitem>
   <listitem>
    <para>
     Network dynamics are traceable and external software can be enabled to
     respond to them.
    </para>
   </listitem>
   <listitem>
    <para>
     Apply and manipulate tags in network packets to identify which machine they
     are coming from or going to and maintain other networking context.
     Tagging rules can be configured and migrated.
    </para>
    <remark>
     Feedback from Ã‰ric Bischoff: "[...] isn't that _how OVS works_, rather
     than _what OVS can do_?"
     => Added second sentence. It does ultimately seem like a feature to me,
       though. Leaving it in for the moment.
     - sknorr, 2015-10-15
    </remark>
   </listitem>
   <listitem>
    <para>
     &ovs; implements the GRE protocol
     (<emphasis>Generic Routing Encapsulation</emphasis>).
     This allows you to, for example, connect private VM networks to each other.
    </para>
   </listitem>
   <listitem>
    <para>
     &ovs; can be used on its own, but is designed to integrate
     with networking hardware and can control hardware switches.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="sec.ovs.install">
  <title>Installing &ovs;</title>
  <procedure>
   <step>
    <para>
     Install &ovs; and supplemental packages:
    </para>
    <screen>&prompt.root;<command>zypper</command> install openvswitch openvswitch-switch</screen>
    <para>
     If you plan to use &ovs; together with the &kvm; hypervisor,
     additionally install <package>tunctl</package>.
     If you plan to use &ovs; together with the &xen; hypervisor,
     additionally install <package>openvswitch-kmp-xen</package>.
    </para>
   </step>
   <step>
    <para>
     Enable the &ovs; Service:
    </para>
<screen>&prompt.root;<command>systemctl</command> enable openvswitch</screen>
   </step>
   <step>
    <para>
     Reboot the computer.
    </para>
   </step>
   <step>
    <para>
     To check whether &ovs; was activated correctly, use:
    </para>
<screen>&prompt.root;<command>systemctl</command> status openvswitch</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs.userspace">
  <title>Overview of &ovs; Daemons and Utilities</title>
  <para>
   &ovs; consists of a number of components.
   Among them are a kernel module and various userspace components.
   The kernel module is used for accelerating the data path, but is not
   necessary for a minimal &ovs; installation.
  </para>
  <sect3 xml:id="sec.ovs.daemon">
   <title>Daemons</title>
   <para>
    The central executables of &ovs; are its two daemons.
    When you start the <systemitem>openvswitch</systemitem> service, you are
    indirectly starting them.
   </para>
   <para>
    The main &ovs; daemon (<command>ovs-vswitchd</command>) provides the
    implementation of a switch.
    The &ovs; database daemon (<command>ovsdb-server</command>), serves the
    database that stores the configuration and state of &ovs;.
   </para>
  </sect3>
  <sect3 xml:id="sec.ovs.utility">
   <title>Utilities</title>
   <para>
    &ovs; also comes with a number of utilities that help you work with it.
    The following list is not exhaustive, but instead describes important
    commands only.
   </para>
   <!-- Some entries are commented out. These (very subjectively) seemed to be
   less important. - sknorr, 2015-10-12 -->
   <variablelist xml:id="vl.ovs.utility">
    <varlistentry>
     <term><command>ovsdb-tool</command></term>
     <listitem>
      <para>
       Create, upgrade, compact, and query an &ovs; database.
       Do a transaction on a database.
      </para>
     </listitem>
    </varlistentry>
    <!-- <varlistentry>
     <term><command>ovsdb-client</command></term>
     <listitem>
      <para>
       Retrieve lists of databases itself and their tables, rows, and columns.
       Monitor the contents of a database.
       Do a transaction on a database.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-appctl</command></term>
     <listitem>
      <para>
       Configure a running <command>ovs-vswitchd</command> or
       <command>ovsdb-server</command> daemon.
      </para>
     </listitem>
    </varlistentry>
    <!-- <varlistentry>
     <term><command>ovs-benchmark</command></term>
     <listitem>
      <para>
       Test latency and throughput of a flow setup.
       <remark>
        Flow setup is what exactly? This comes from the man page. - sknorr,
        2015-09-30
       </remark>
      </para>
     </listitem>
    </varlistentry> -->
    <!-- <varlistentry>
     <term><command>ovs-bugtool</command></term>
     <listitem>
      <para>
       Report a bug in &ovs;.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-dpctl</command>, <command>ovs-dpctl-top</command></term>
     <listitem>
      <para>
       Create, modify, visualize and delete data paths.
       Using this tool can interfere with <command>ovs-vswitchd</command> also
       performing data path management.
       It is therefore most useful for diagnostics.
      </para>
      <para>
       <command>ovs-dpctl-top</command> creates a <command>top</command>-like
       visualization for data paths.
       <remark>Is visualize/ation the right word? - sknorr, 2015-09-30</remark>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>ovs-ofctl</command></term>
     <listitem>
      <para>
       Manage any switches adhering to the
       <phrase role="productname">OpenFlow</phrase> protocol.
       <command>ovs-ofctl</command> is not limited to interacting with &ovs;.
      </para>
     </listitem>
    </varlistentry>
    <!-- <varlistentry>
     <term><command>ovs-pcap</command></term>
     <listitem>
      <para>
       Create a hexadecimal representation of a captured network package
       in the PCAP format.
       This can then be used to trace how a particular package would travel.
      </para>
     </listitem>
    </varlistentry> -->
    <!--<varlistentry>
     <term><command>ovs-parse-backtrace</command></term>
     <listitem>
      <para>
       Create a more readable version of backtraces from
       <command>ovs-appctl backtrace</command>.
      </para>
     </listitem>
    </varlistentry> -->
    <!-- <varlistentry>
     <term><command>ovs-tcpundump</command></term>
     <listitem>
      <para>
       Create a hexadecimal representation of the output of
       <command>tcpdump</command>.
       This can then be used to trace how a stream of packages would travel.
      </para>
     </listitem>
    </varlistentry> -->
    <!-- <varlistentry>
     <term><command>ovs-vlan-bug-workaround</command></term>
     <listitem>
      <para>
       Some device drivers have a buggy implementation of VLAN acceleration.
       Use this utility to work around such bugs.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-vsctl</command></term>
     <listitem>
      <para>
       Provides a high-level interface to the configuration database.
       It can be used to query and modify the database.
       In effect, it shows the shows the status of <command>ovs-vswitchd</command>
       and can be used to configure it.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
 </sect2>

 <sect2>
  <title>Using &ovs; together with &kvm;/&qemu;</title>
  <para>
   You can use &ovs; to manage the network access of virtual machines created
   with &kvm;/&qemu;.
   When you have installed &ovs;, configured the database and started it,
   proceed as follows:
  </para>
  <procedure>
   <step>
    <para>
     Create a bridge for use by your virtual machine:
    </para>
<screen>&prompt.root;<command>ovs-vsctl</command> add-br br0</screen>
   </step>
   <step>
    <para>
     Assign your bridge a network interface that the guest can communicate
     over, such as <systemitem>eth0</systemitem>:
    </para>
<screen>&prompt.root;<command>ovs-vsctl</command> add-port br0 eth0</screen>
   </step>
   <step>
    <para>
     Create a pair of <filename>ifup</filename>/<filename>ifdown</filename>
     scripts.
    </para>
    <para>
     The <filename>ifup</filename> script should look like this:
    </para>
<screen>#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 up
ovs-vsctl add-port ${switch} $1</screen>
    <para>
     The <filename>ifdown</filename> script should look like this:
    </para>
<screen>#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 down
ovs-vsctl del-port ${switch} $1</screen>
    <para>
     Save these in a location where you can find them later, such as
     <filename>/etc/ovs-ifup</filename> and <filename>/etc/ovs-ifdown</filename>.
    </para>
   </step>
   <step>
    <para>
     Allow the scripts to be executed:
    </para>
<screen>&prompt.root;<command>chmod</command> +x <replaceable>/etc/ovs-ifup /etc/ovs-ifdown</replaceable></screen>
   </step>
   <step>
    <para>
     Next, start a virtual machine that uses the scripts defined before:
    </para>
<screen>&prompt.root;<command>qemu-system-x86_64</command> -drive file=<replaceable>/PATH/TO/DISK-IMAGE</replaceable>,boot=on \
-m 512 -machine accel=kvm -cpu kvm64 -net nic,macaddr=00:11:22:EE:EE:EE \
-net tap,script=/etc/ovs-ifup,downscript=/etc/ovs-ifdown</screen>
    <para>
     The final line references a tap device associated with the two scripts.
    </para>
    <para>
     Note that the name of the executable can be different depending on the
     system architecture of your computer: <command>qemu-system-ARCH</command>.
    </para>
    <para>
     For further information on the usage of &kvm;/&qemu;, see
     <xref linkend="cha.qemu.overview"/>.
    </para>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs.more">
  <title>For More Information</title>
  <variablelist>
   <varlistentry>
    <term><link xlink:href="http://openvswitch.org/support/"/></term>
    <listitem>
     <para>
      The documentation section of project Web site
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="https://www.opennetworking.org/images/stories/downloads/sdn-resources/white-papers/wp-sdn-newnorm.pdf"/></term>
    <listitem>
     <para>
      Whitepaper by the Open Networking Foundation about software-defined
      networking and the <phrase role="productname">OpenFlow</phrase> protocol
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>
