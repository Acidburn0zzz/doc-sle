<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<sect1 xmlns="http://docbook.org/ns/docbook"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       version="5.0"
       xml:id="sec.sdn">
 <title>Software-Defined Networking with &ovs;</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>
  With software-defined networking (SDN), you can manage network services
  through abstraction of higher-level functionality.
  It allows you to separate the system that controls where traffic is sent
  (the control plane) from the underlying systems that forward traffic to the
  selected destination (the data plane).  <!-- programmable networks -->
 </para>
 <para>
  A related technology is network virtualization that can be done with the
  &ovs; implementation.
 </para>
 <sect2 xml:id="sec.ovs-install">
  <title>Installing &ovs;</title>
  <procedure>
   <step>
    <para>
     Install &ovs; and supplemental packages:
    </para>
    <screen>&prompt.root; <command>zypper install <replaceable>openvswitch openvswitch-switch</replaceable></command></screen>
    <para>
     If you plan to use &ovs; together with the &kvm; hypervisor,
     additionally install <package>tunctl</package>.
     If you plan to use &ovs; together with the &xen; hypervisor,
     additionally install <package>openvswitch-kmp-xen</package>.
    </para>
   </step>
   <step>
    <para>
     Load the kernel modules:
    </para>
    <screen>&prompt.root; modprobe openvswitch</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs-start">
  <title>Creating a database for &ovs;</title>
  <procedure>
   <step>
    <para>
     Create a directory where &ovs; can write its database:
    </para>
<screen>&prompt.root; <command>mkdir <replaceable>/etc/openvswitch</replaceable></command></screen>
   </step>
   <step>
    <para>
     Create a configuration database with the default settings:
    </para>
<screen>&prompt.root; <command>ovsdb-tool create <replaceable>/etc/openvswitch/conf.db</replaceable> \
<replaceable>/usr/share/openvswitch/vswitch.ovsschema</replaceable></command></screen>
    <para>
     This creates a new database with the default schema.
     You can also leave away both the database and schema arguments to use the
     default in each case.
     You can check what the default file names are:
    </para>
<screen>&prompt.user; <command>ovsdb-tool --help</command> | <command>grep <replaceable>default</replaceable></command></screen>
   </step>
   <step>
    <para>
     Create a directory for the socket file of the &ovs; database:
    </para>
<screen>&prompt.root; <command>mkdir -p <replaceable>/var/run/openvswitch</replaceable></command></screen>
   </step>
   <step>
    <para>
     Now start the database server:
    </para>
<screen>&prompt.root; <command>ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--private-key=db:Open_vSwitch,SSL,private_key \
--certificate=db:Open_vSwitch,SSL,certificate \
--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
--pidfile --detach</command></screen>
   </step>
   <step>
    <para>
     Initialize the database:
    </para>
    <screen>&prompt.root; sudo ovs-vsctl --no-wait init</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec.ovs-start">
  <title>Starting &ovs;</title>
  <procedure>
   <step>
    <para>
     If you have not already done so, start the database server:
    </para>
<screen>&prompt.root; <command>ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--private-key=db:Open_vSwitch,SSL,private_key \
--certificate=db:Open_vSwitch,SSL,certificate \
--bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
--pidfile --detach</command></screen>
   </step>
   <step>
    <para>
     Start the &ovs; daemon:
    </para>
<screen>&prompt.root; <command>ovs-vswitchd --pidfile --detach</command></screen>
   </step>
  </procedure>
 </sect2>

</sect1>
