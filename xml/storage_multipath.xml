<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd" [
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<chapter id="multipathing" lang="en">
  <title>Managing Multipath I/O for Devices</title>
  <para>
   This section describes how to manage failover and path load balancing for
   multiple paths between the servers and block storage devices.
  </para>
  <sect1 id="mpioovw">
   <title>Understanding Multipath I/O</title>

   <para>
    Multipathing is the ability of a server to communicate with the same
    physical or logical block storage device across multiple physical paths
    between the host bus adapters in the server and the storage controllers
    for the device, typically in Fibre Channel (FC) or iSCSI SAN
    environments. You can also achieve multiple connections with direct
    attached storage when multiple channels are available.
   </para>

   <para>
    Linux multipathing provides connection fault tolerance and can provide
    load balancing across the active connections. When multipathing is
    configured and running, it automatically isolates and identifies device
    connection failures, and reroutes I/O to alternate connections.
   </para>

   <para>
    Typical connection problems involve faulty adapters, cables, or
    controllers. When you configure multipath I/O for a device, the
    multipath driver monitors the active connection between devices. When
    the multipath driver detects I/O errors for an active path, it fails
    over the traffic to the device’s designated secondary path. When the
    preferred path becomes healthy again, control can be returned to the
    preferred path.
   </para>
  </sect1>
  <sect1 id="be5rvii">
   <title>Planning for Multipathing</title>
   <para>
    Use the guidelines in this section when planning your multipath I/O
    solution.
   </para>   
   <sect2 id="beg2qyg">
    <title>Prerequisites</title>
    <itemizedlist>
     <listitem>
      <para>
       Multipathing is managed at the device level.
      </para>
     </listitem>
     <listitem>
      <para>
       The storage array you use for the multipathed device must support
       multipathing. For more information, see
       <xref linkend="be5ruyr" xrefstyle="SectTitleOnPage"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       You need to configure multipathing only if multiple physical paths
       exist between host bus adapters in the server and host bus
       controllers for the block storage device. You configure multipathing
       for the logical device as seen by the server.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
   <sect2 id="beg2qpf">
    <title>Vendor-Provided Multipath Solutions</title>
    <para>
     For some storage arrays, the vendor provides its own multipathing
     software to manage multipathing for the array’s physical and logical
     devices. In this case, you should follow the vendor’s instructions
     for configuring multipathing for those devices.
    </para>
   </sect2>
   <sect2 id="beg2qgh">
    <title>Disk Management Tasks</title>
    <para>
     Perform the following disk management tasks before you attempt to
     configure multipathing for a physical or logical device that has
     multiple paths:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Use third-party tools to carve physical disks into smaller logical
       disks.
      </para>
     </listitem>
     <listitem>
      <para>
       Use third-party tools to partition physical or logical disks. If you
       change the partitioning in the running system, the Device Mapper
       Multipath (DM-MP) module does not automatically detect and reflect
       these changes. DM-MPIO must be re-initialized, which usually
       requires a reboot.
      </para>
     </listitem>
     <listitem>
      <para>
       Use third-party SAN array management tools to create and configure
       hardware RAID devices.
      </para>
     </listitem>
     <listitem>
      <para>
       Use third-party SAN array management tools to create logical devices
       such as LUNs. Logical device types that are supported for a given
       array depend on the array vendor.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
   <sect2 id="beg2q2x">
    <title>Software RAIDs</title>
    <para>
     The Linux software RAID management software runs on top of
     multipathing. For each device that has multiple I/O paths and that you
     plan to use in a software RAID, you must configure the device for
     multipathing before you attempt to create the software RAID device.
     Automatic discovery of multipathed devices is not available. The
     software RAID is not aware of the multipathing management running
     underneath.
    </para>
    <para>
     For information about setting up multipathing for existing software
     RAIDs, see <xref linkend="mpioraid" xrefstyle="SectTitleOnPage"/>.
    </para>
   </sect2>
   <sect2 id="beg2pi0">
    <title>High-Availability Solutions</title>
    <para>
     High-availability solutions for clustering storage resources run on
     top of the multipathing service on each node. Ensure that the
     configuration settings in the <filename>/etc/multipath.conf</filename>
     file on each node are consistent across the cluster.
    </para>
    <para>
     Ensure that multipath devices the same name across all devices by
     doing the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Use UUID and alias names to ensure that multipath device names are
       consistent across all nodes in the cluster. Alias names must be
       unique across all nodes. Copy the <filename>/etc/multipath.conf
       </filename>file from the node to the <filename>/etc/</filename>
       directory all of the other nodes in the cluster.
      </para>
     </listitem>
     <listitem>
      <para>
       When using links to multipath-mapped devices, ensure that you
       specify the <filename>dm-uuid*</filename> name or alias name in the
       <filename>/dev/disk/by-id</filename> directory, and not a fixed path
       instance of the device. For information, see
       <xref linkend="mpiousingdev" xrefstyle="SectTitleOnPage"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       Set the <literal>user_friendly_names</literal> configuration option
       to no to disable it. A user-friendly name is unique to a node, but a
       device might not be assigned the same user-friendly name on every
       node in the cluster.
      </para>
      <para>
       You can force the system-defined user-friendly names to be
       consistent across all nodes in the cluster by doing the following:
      </para>
      <orderedlist>
       <listitem>
        <para>
         In the <filename>/etc/multipath.conf</filename> file on one node:
        </para>
        <orderedlist>
         <listitem>
          <para>
           Set the <literal>user_friendly_names</literal> configuration
           option to yes to enable it.
          </para>
          <para>
           Multipath uses the
           <filename>/var/lib/multipath/bindings</filename> file to assign
           a persistent and unique name to the device in the form of
           <filename>mpath&lt;<replaceable>n</replaceable>&gt;</filename>
           in the <filename>/dev/mapper </filename>directory.
          </para>
         </listitem>
         <listitem>
          <para>
           (Optional) Set the <literal>bindings_file</literal> option in
           the <literal>defaults</literal> section of the
           <literal>/etc/multipath.conf</literal> file to specify an
           alternate location for the <filename>bindings</filename> file.
          </para>
          <para>
           The default location is
           <filename>/var/lib/multipath/bindings</filename>.
          </para>
         </listitem>
        </orderedlist>
       </listitem>
       <listitem>
        <para>
         Set up all of the multipath devices on the node.
        </para>
       </listitem>
       <listitem>
        <para>
         Copy the <filename>/etc/multipath.conf </filename>file from the
         node to the <filename>/etc/</filename> directory all of the other
         nodes in the cluster.
        </para>
       </listitem>
       <listitem>
        <para>
         Copy the <filename>bindings</filename> file from the node to the
         <filename>bindings_file</filename> path on all of the other nodes
         in the cluster.
        </para>
       </listitem>
      </orderedlist>
     </listitem>
    </itemizedlist>
    <para>
     The Distributed Replicated Block Device (DRBD) high-availability
     solution for mirroring devices across a LAN runs on top of
     multipathing. For each device that has multiple I/O paths and that you
     plan to use in a DRDB solution, you must configure the device for
     multipathing before you configure DRBD.
    </para>
   </sect2>
   <sect2 id="beg2pdq">
    <title>Volume Managers</title>
    <para>
     Volume managers such as LVM2 and Clustered LVM2 run on top of
     multipathing. You must configure multipathing for a device before you
     use LVM2 or cLVM2 to create segment managers and file systems on it.
     For information, see
     <xref linkend="mpiousinglvm" xrefstyle="SectTitleOnPage"/>.
    </para>
   </sect2>
   <sect2 id="beg2pdr">
    <title>Virtualization Environments</title>
    <para>
     When using multipathing in a virtualization environment, the
     multipathing is controlled in the host server environment. Configure
     multipathing for the device before you assign it to a virtual guest
     machine.
    </para>
   </sect2>
  
  <sect2 id="b122uvel">
   <title>PRIO Settings in multipath-tools-0.4.9</title>
   <para>
    SLES 11 SP2 upgrades the multipath-tools from 0.4.8 to 0.4.9. Some
    changes in PRIO syntax require that you manually modify the
    <filename>/etc/multipath.conf</filename> file as needed to comply with
    the new syntax.
   </para>
   <para>
    The syntax for the <literal>prio</literal> keyword in the
    <filename>/etc/multipath.conf</filename> file is changed in
    <filename>multipath-tools-0.4.9</filename>. The <literal>prio</literal>
    line specifies the prioritizer. If the prioritizer requires an
    argument, you specify the argument by using the
    <literal>prio_args</literal> keyword on a second line. Previously, the
    prioritizer and its arguments were included on the
    <literal>prio</literal> line.
   </para>
   <para>
    Multipath Tools 0.4.9 and later uses the <literal>prio</literal>
    setting in the <literal>defaults{}</literal> or
    <literal>devices{}</literal> section of the
    <filename>/etc/multipath.conf</filename> file. It silently ignores the
    keyword <literal>prio</literal> when it is specified for an individual
    <literal>multipath</literal> definition in the
    <literal>multipaths{)</literal> section. Multipath Tools 0.4.8 for SLES
    11 SP1 and earlier allows the prio setting in the individual
    <literal>multipath</literal> definition in the
    <literal>multipaths{)</literal> section to override the
    <literal>prio</literal> settings in the <literal>defaults{}</literal>
    or <literal>devices{}</literal> section.
   </para>
  </sect2>
  
   <sect2 id="mpiousingdev">
    <title>Using WWID, User-Friendly, and Alias Names for Multipathed Devices</title>
    <para role="intro">
     A multipath device can be uniquely identified by its WWID, by a
     user-friendly name, or by an alias that you assign for it. Device node
     names in the form of <filename>/dev/sdn</filename> and
     <filename>/dev/dm-n</filename> can change on reboot and might be
     assigned to different devices each time. A device’s WWID,
     user-friendly name, and alias name persist across reboots, and are the
     preferred way to identify the device.
    </para>
    <para>
     If you want to use the entire LUN directly (for example, if you are
     using the SAN features to partition your storage), you can use the
     <filename>/dev/disk/by-id/xxx</filename> names for
     <command>mkfs</command>, <command>fstab</command>, your application,
     and so on. Partitioned devices have <filename>_part&lt;n&gt;</filename>
     appended to the device name, such as
     <filename>/dev/disk/by-id/xxx_part1</filename>.
    </para>
    <para>
     In the <filename>/dev/disk/by-id</filename> directory, the
     multipath-mapped devices are represented by the device’s
     <filename>dm-uuid*</filename> name or alias name (if you assign an
     alias for it in the <filename>/etc/multipath.conf</filename> file). The
     <filename>scsi-</filename> and <filename>wwn-</filename> device names
     represent physical paths to the devices.
    </para>
    <important>
     <para>
      When using links to multipath-mapped devices, ensure that you specify
      the <filename>dm-uuid*</filename> name or alias name in the
      <filename>/dev/disk/by-id</filename> directory, and not a fixed path
      instance of the device.
     </para>
    </important>
    <para>
     When you define device aliases in the
     <filename>/etc/multipath.conf</filename> file, ensure that you use each
     device’s WWID (such as
     <filename>3600508e0000000009e6baa6f609e7908</filename>) and not its
     WWN, which replaces the first character of a device ID with
     <filename>0x</filename>, such as
     <filename>0x600508e0000000009e6baa6f609e7908</filename>.
    </para>
    <para>
     For information about using user-friendly names and aliases for
     multipathed devices, see
     <xref linkend="mpionames" xrefstyle="HeadingOnPage"/>.
    </para>
   </sect2>

   <sect2 id="mpiousinglvm">
    <title>Using LVM2 on Multipath Devices</title>
    <para>
     Ensure that the configuration file for <filename>lvm.conf</filename>
     points to the multipath-device names instead of fixed path names. This
     should happen automatically if <filename>boot.multipath</filename> is
     enabled and loads before <filename>boot.lvm</filename>.
    </para>
    <sect3 id="b13iv5ro">
     <title>Adding a Multipath Device Filter in the /etc/lvm/lvm.conf File</title>
     <para>
      By default, LVM2 does not recognize multipathed devices. To make LVM2
      recognize the multipathed devices as possible physical volumes, you
      must modify <filename>/etc/lvm/lvm.conf</filename> to scan multipathed
      devices through the multipath I/O layer.
     </para>
     <para>
      Adding a multipath filter prevents LVM from scanning and using the
      physical paths for raw device nodes that represent individual paths to
      the SAN (/dev/sd*). Ensure that you specify the filter path so that
      LVM scans only the device mapper names for the device
      (<filename>/dev/disk/by-id/dm-uuid-.*-mpath-.*</filename>) after
      multipathing is configured.
     </para>
     <para>
      To modify<filename> /etc/lvm/lvm.conf</filename> for multipath use:
     </para>
     <procedure id="bg89qbw">
      <step id="bg89qbx">
       <para>
        Open the <filename>/etc/lvm/lvm.conf</filename> file in a text
        editor.
       </para>
       <para>
        If <filename>/etc/lvm/lvm.conf</filename> does not exist, you can
        create one based on your current LVM configuration by entering the
        following at a terminal console prompt:
       </para>
<screen>
lvm dumpconfig &gt; /etc/lvm/lvm.conf
</screen>
      </step>
      <step id="bg89qku">
       <para>
        Change the <literal>filter</literal> and <literal>types</literal>
        entries in <filename>/etc/lvm/lvm.conf</filename> as follows:
       </para>
<screen>
filter = [ "a|/dev/disk/by-id/.*|", "r|.*|" ]
types = [ "device-mapper", 1 ]
</screen>
       <para>
        This allows LVM2 to scan only the by-id paths and reject everything
        else.
       </para>
       <para>
        If you are using user-friendly names, specify the filter path so
        that only the Device Mapper names are scanned after multipathing is
        configured. The following filter path accepts only partitions on a
        multipathed device:
       </para>
<screen>
filter = [ "a|/dev/disk/by-id/dm-uuid-.*-mpath-.*|", "r|.*|" ]
</screen>
       <para>
        To accept both raw disks and partitions for Device Mapper names,
        specify the path as follows, with no hyphen (-) before
        <filename>mpath</filename>:
       </para>
<screen>
filter = [ "a|/dev/disk/by-id/dm-uuid-.*mpath-.*|", "r|.*|" ]
</screen>
      </step>
      <step id="bg89rst">
       <para>
        If you are also using LVM2 on non-multipathed devices, make the
        necessary adjustments in the <literal>filter</literal> and
        <literal>types</literal> entries to suit your setup. Otherwise, the
        other LVM devices are not visible with a <command>pvscan</command>
        after you modify the <filename>lvm.conf</filename> file for
        multipathing.
       </para>
       <para>
        You want only those devices that are configured with LVM to be
        included in the LVM cache, so ensure that you are specific about
        which other non-multipathed devices are included by the filter.
       </para>
       <para>
        For example, if your local disk is <filename>/dev/sda</filename> and
        all SAN devices are <filename>/dev/sdb</filename> and above, specify
        the local and multipathing paths in the filter as follows:
       </para>
<screen>
filter = [ "a|/dev/sda.*|", "a|/dev/disk/by-id/.*|", "r|.*|" ]
types = [ "device-mapper", 253 ]
</screen>
      </step>
      <step id="bg89rib">
       <para>
        Save the file.
       </para>
      </step>
      <step id="bg89zhw">
       <para>
        Add dm-multipath to
        <filename>/etc/dracut.conf.d/01-dist.conf</filename> by adding the
        following line:
       </para>
<screen>force_drivers+="dm-multipath"</screen>
      </step>
      <step id="bg8aqrw">
       <para>
        Make a new <filename>initrd</filename> to ensure that the Device
        Mapper Multipath services are loaded with the changed settings.
        Running <command>dracut</command> is needed only if the root (/)
        device or any parts of it (such as <filename>/var</filename>,
        <filename>/etc</filename>, <filename>/log</filename>) are on the SAN
        and multipath is needed to boot.
       </para>
       <para>
        Enter the following at a terminal console prompt:
       </para>
<screen>
dracut -f --add-drivers multipath
</screen>
      </step>
      <step id="bg89rnr">
       <para>
        Reboot the server to apply the changes.
       </para>
      </step>
     </procedure>
    </sect3>
    <sect3 id="b13iv6p5">
     <title>Enabling boot.multipath</title>
     <para>
      Multipath must be loaded before LVM to ensure that multipath maps are
      built correctly. Loading multipath after LVM can result in incomplete
      device maps for a multipath device because LVM locks the device, and
      MPIO cannot create the maps properly.
     </para>
     <para>
      If the system device is a local device that does not use MPIO and LVM,
      you can disable both <filename>boot.multipath</filename> and
      <filename>boot.lvm</filename>. After the server starts, you can
      manually start multipath before you start LVM, then run a
      <command>pvscan</command> command to recognize the LVM objects.
     </para>
    </sect3>
    <sect3 id="b13iv6p6">
     <title>Troubleshooting MPIO Mapping for LVM Devices</title>
     <para>
      Timing is important for starting the LVM process. If LVM starts before
      MPIO maps are done, LVM might use a fixed path for the device instead
      of its multipath. The device works, so you might not be aware that the
      device’s MPIO map is incomplete until that fixed path fails. You can
      help prevent the problem by enabling
      <filename>boot.multipath</filename> and following the instructions in
      <xref linkend="b13iv5ro" xrefstyle="HeadingOnPage"/>.
     </para>
     <para>
      To troubleshoot a mapping problem, you can use
      <command>dmsetup</command> to check that the expected number of paths
      are present for each multipath device. As the
      &rootuser; user, enter the following at a command
      prompt:
     </para>
<screen>
dmsetup ls --tree
</screen>
     <para>
      In the following sample response, the first device has four paths. The
      second device is a local device with a single path. The third device
      has two paths. The distinction between active and passive paths is not
      reported through this tool.
     </para>
<screen>
  vg910-lv00 (253:23)
    └─ 360a980006465576657346d4b6c593362 (253:10)
      |- (65:96)
      |- (8:128)
      |- (8:240)
      └─ (8:16)
  vg00-lv08 (253:9)
    └─ (8:3)
  system_vg-data_lv (253:1)
    └─36006016088d014007e0d0d2213ecdf11 (253:0)
      ├─ (8:32)
      └─ (8:48)
</screen>
     <para>
      An incorrect mapping typically returns too few paths and does not have
      a major number of 253. For example, the following shows what an
      incorrect mapping looks like for the third device:
     </para>
<screen>
  system_vg-data_lv (8:31)
     └─ (8:32)
</screen>
    </sect3>
   </sect2>

   <sect2 id="mpiousingmdadm">
    <title>Using mdadm with Multipath Devices</title>
    <para>
     The <command>mdadm</command> tool requires that the devices be accessed
     by the ID rather than by the device node path. Therefore, the
     <systemitem>DEVICE</systemitem> entry in
     <filename>/etc/mdadm.conf</filename> file should be set as follows to
     ensure that only device mapper names are scanned after multipathing is
     configured:
    </para>
<screen>
DEVICE /dev/disk/by-id/dm-uuid-.*mpath-.*
</screen>
    <para>
     If you are using user-friendly names or multipath aliases, specify the
     path as follows:
    </para>
<screen>
DEVICE /dev/disk/by-id/dm-name-.*
</screen>
   </sect2>

   <sect2 id="b14ff9rs">
    <title>Using Multipath with NetApp Devices</title>
    <para>
     When using multipath for NetApp devices, we recommend the following
     settings in the <filename>/etc/multipath.conf</filename> file:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Set the default values for the following parameters globally for
       NetApp devices:
      </para>
<screen>
max_fds max

queue_without_daemon no
</screen>
     </listitem>
     <listitem>
      <para>
       Set the default values for the following parameters for NetApp
       devices in the hardware table:
      </para>
<screen>
dev_loss_tmo infinity

fast_io_fail_tmo 5

features "3 queue_if_no_path pg_init_retries 50"
</screen>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="bleqcv0">
    <title>Using --noflush with Multipath Devices</title>
    <para>
     The <literal>--noflush</literal> option should always be used when
     running on multipath devices.
    </para>
    <para>
     For example, in scripts where you perform a table reload, you use the
     <literal>--noflush</literal> option on resume to ensure that any
     outstanding I/O is not flushed, because you need the multipath topology
     information.
    </para>
<screen>
load
resume --noflush
</screen>
   </sect2>

   <sect2 id="bok8cn1">
    <title>SAN Timeout Settings When the Root Device Is Multipathed</title>
    <remark> Bug 492469 - FC boot lun with device mapper multipath, server died when no path available for short time, comment 42</remark>
    <para>
     A system with root (<filename>/</filename>) on a multipath device might
     stall when all paths have failed and are removed from the system
     because a <literal>dev_loss_tmo</literal> time-out is received from the
     storage subsystem (such as Fibre Channel storage arrays).
    </para>
    <para>
     If the system device is configured with multiple paths and the
     multipath <literal>no_path_retry</literal> setting is active, you
     should modify the storage subsystem’s <literal>dev_loss_tmo</literal>
     setting accordingly to ensure that no devices are removed during an
     all-paths-down scenario. We strongly recommend that you set the
     <literal>dev_loss_tmo</literal> value to be equal to or higher than the
     <literal>no_path_retry</literal> setting from multipath.
    </para>
    <para>
     The recommended setting for the storage subsystem’s
     <literal>dev_los_tmo</literal> is:
    </para>
<screen>
&lt;dev_loss_tmo&gt; = &lt;no_path_retry&gt; * &lt;polling_interval&gt;
</screen>
    <para>
     where the following definitions apply for the multipath values:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <literal>no_path_retry</literal> is the number of retries for
       multipath I/O until the path is considered to be lost, and queuing of
       IO is stopped.
      </para>
     </listitem>
     <listitem>
      <para>
       <literal>polling_interval</literal> is the time in seconds between
       path checks.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     Each of these multipath values should be set from the
     <filename>/etc/multipath.conf</filename> configuration file. For
     information, see <xref linkend="bbillhs" xrefstyle="SectTitleOnPage"/>.
    </para>
   </sect2>

   <sect2 id="mpiousingpart">
    <title>Partitioning Multipath Devices</title>
    <para>
     Behavior changes for how multipathed devices are partitioned might
     affect your configuration if you are upgrading.
    </para>
    <sect3 id="binawqz">
     <title>&productname; 11</title>
     <para>
      In &productname; 11, the default multipath setup relies
      on <command>udev</command> to overwrite the existing symbolic links in
      the <filename>/dev/disk/by-id</filename> directory when multipathing
      is started. Before you start multipathing, the link points to the SCSI
      device by using its <filename>scsi-xxx</filename> name. When
      multipathing is running, the symbolic link points to the device by
      using its <filename>dm-uuid-xxx</filename> name. This ensures that the
      symbolic links in the <filename>/dev/disk/by-id</filename> path
      persistently point to the same device regardless of whether multipath
      is started or not.
     </para>
     <para>
      Ensure that the configuration files for <filename>lvm.conf</filename>
      and <filename>md.conf</filename> point to the multipath-device names.
      This should happen automatically if
      <filename>boot.multipath</filename> is enabled and loads before
      <filename>boot.lvm</filename> and <filename>boot.md</filename>.
      Otherwise, the LVM and MD configuration files might contain fixed
      paths for multipath-devices, and you must correct those paths to use
      the multipath-device names. For LVM2 and cLVM information, see
      <xref linkend="mpiousinglvm" xrefstyle="SectTitleOnPage"/>. For
      software RAID information, see
      <xref linkend="mpioraid" xrefstyle="SectTitleOnPage"/>.
     </para>
    </sect3>
    <sect3 id="binazqd">
     <title>&productname; 10</title>
     <para>
      In &productname; 10, the <filename>kpartx</filename>
      software is used in the
<!--taroth 2014-02-27: systemd: the following can stay as it refers to SLE
       10-->
      <filename>/etc/init.d/boot.multipath</filename> to add symbolic links
      to the line <filename>/dev/dm-*</filename> in the
      <filename>multipath.conf</filename> configuration file for any newly
      created partitions without requiring a reboot. This triggers
      <filename>udevd</filename> to fill in the
      <filename>/dev/disk/by-*</filename> symbolic links. The main benefit
      is that you can call <filename>kpartx</filename> with the new
      parameters without rebooting the server.
     </para>
    </sect3>
    <sect3 id="binazxj">
     <title>&productname; 9</title>
     <para>
      In &productname; 9, it is not possible to partition
      multipath I/O devices themselves. If the underlying physical device is
      already partitioned, the multipath I/O device reflects those
      partitions and the layer provides
      <filename>/dev/disk/by-id/&lt;name&gt;p1 ... pN</filename> devices so
      you can access the partitions through the multipath I/O layer. As a
      consequence, the devices need to be partitioned prior to enabling
      multipath I/O. If you change the partitioning in the running system,
      DM-MPIO does not automatically detect and reflect these changes. The
      device must be re-initialized, which usually requires a reboot.
     </para>
    </sect3>
   </sect2>

   <sect2 id="be5rs3a">
    <title>Supported Architectures for Multipath I/O</title>
    <para>
     The multipathing drivers and tools support all seven of the supported
     processor architectures: IA32, AMD64/EM64T, IPF/IA64, p-Series (32-bit
     and 64-bit), and z-Series (31-bit and 64-bit).
    </para>
   </sect2>

   <sect2 id="be5ruyr">
    <title>Supported Storage Arrays for Multipathing</title>
    <para>
     The multipathing drivers and tools support most storage arrays. The
     storage array that houses the multipathed device must support
     multipathing in order to use the multipathing drivers and tools. Some
     storage array vendors provide their own multipathing management tools.
     Consult the vendor’s hardware documentation to determine what
     settings are required.
    </para>
    <sect3 id="be5s8ae">
     <title>Storage Arrays That Are Automatically Detected for Multipathing</title>
     <para>
      The <filename>multipath-tools</filename> package automatically detects
      the following storage arrays:
     </para>
     <simplelist>
      <member>3PARdata VV</member>
      <member>AIX NVDISK</member>
      <member>AIX VDASD</member>
      <member>APPLE Xserve RAID</member>
      <member>COMPELNT Compellent Vol</member>
      <member>COMPAQ/HP HSV101, HSV111, HSV200, HSV210, HSV300, HSV400, HSV 450</member>
      <member>COMPAQ/HP MSA, HSV</member>
      <member>COMPAQ/HP MSA VOLUME</member>
      <member>DataCore SANmelody</member>
      <member>DDN SAN DataDirector</member>
      <member>DEC HSG80</member>
      <member>DELL MD3000</member>
      <member>DELL MD3000i</member>
      <member>DELL MD32xx</member>
      <member>DELL MD32xxi</member>
      <member>DGC</member>
      <member>EMC Clariion</member>
      <member>EMC Invista</member>
      <member>EMC SYMMETRIX</member>
      <member>EUROLOGC FC2502</member>
      <member>FSC CentricStor</member>
      <member>FUJITSU ETERNUS_DX, DXL, DX400, DX8000</member>
      <member>HITACHI DF</member>
      <member>HITACHI/HP OPEN</member>
      <member>HP A6189A</member>
      <member>HP HSVX700</member>
      <member>HP LOGICAL VOLUME</member>
      <member>HP MSA2012fc, MSA 2212fc, MSA2012i</member>
      <member>HP MSA2012sa, MSA2312 fc/i/sa, MCA2324 fc/i/sa, MSA2000s VOLUME</member>
      <member>HP P2000 G3 FC|P2000G3 FC/iSCSI|P2000 G3 SAS|P2000 G3 iSCSI</member>
      <member>IBM 1722-600</member>
      <member>IBM 1724</member>
      <member>IBM 1726</member>
      <member>IBM 1742</member>
      <member>IBM 1745, 1746</member>
      <member>IBM 1750500</member>
      <member>IBM 1814</member>
      <member>IBM 1815</member>
      <member>IBM 1818</member>
      <member>IBM 1820N00</member>
      <member>IBM 2105800</member>
      <member>IBM 2105F20</member>
      <member>IBM 2107900</member>
      <member>IBM 2145</member>
      <member>IBM 2810XIV</member>
      <member>IBM 3303 NVDISK</member>
      <member>IBM 3526</member>
      <member>IBM 3542</member>
      <member>IBM IPR</member>
      <member>IBM Nseries</member>
      <member>IBM ProFibre 4000R</member>
      <member>IBM S/390 DASD ECKD</member>
      <member>IBM S/390 DASD FBA</member>
      <member>Intel Multi-Flex</member>
      <member>LSI/ENGENIO INF-01-00</member>
      <member>NEC DISK ARRAY</member>
      <member>NETAPP LUN</member>
      <member>NEXENTA COMSTAR</member>
      <member>Pillar Axiom</member>
      <member>PIVOT3 RAIGE VOLUME</member>
      <member>SGI IS</member>
      <member>SGI TP9100, TP 9300</member>
      <member>SGI TP9400, TP9500</member>
      <member>STK FLEXLINE 380</member>
      <member>STK OPENstorage D280</member>
      <member>SUN CSM200_R</member>
      <member>SUN LCSM100_[IEFS]</member>
      <member>SUN STK6580, STK6780</member>
      <member>SUN StorEdge 3510, T4</member>
      <member>SUN SUN_6180</member>
     </simplelist>
     <para>
      In general, most other storage arrays should work. When storage arrays
      are automatically detected, the default settings for multipathing
      apply. If you want non-default settings, you must manually create and
      configure the <filename>/etc/multipath.conf</filename> file. For
      information, see
      <xref linkend="bbillhs" xrefstyle="SectTitleOnPage"/>.
     </para>
     <para>
      Testing of the IBM zSeries device with multipathing has shown that the
      <literal>dev_loss_tmo</literal> parameter should be set to 90 seconds,
      and the <literal>fast_io_fail_tmo</literal> parameter should be set to
      5 seconds. If you are using zSeries devices, you must manually create
      and configure the <filename>/etc/multipath.conf</filename> file to
      specify the values. For information, see
      <xref linkend="bkj8n9w" xrefstyle="HeadingOnPage"/>.
     </para>
     <para>
      Hardware that is not automatically detected requires an appropriate
      entry for configuration in the <literal>devices</literal> section of
      the <filename>/etc/multipath.conf</filename> file. In this case, you
      must manually create and configure the configuration file. For
      information, see
      <xref linkend="bbillhs" xrefstyle="SectTitleOnPage"/>.
     </para>
     <para>
      Consider the following caveats:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Not all of the storage arrays that are automatically detected have
        been tested on &productname;. For information, see
        <xref linkend="mpiosuphw" xrefstyle="HeadingOnPage"/>.
       </para>
      </listitem>
      <listitem>
       <para>
        Some storage arrays might require specific hardware handlers. A
        hardware handler is a kernel module that performs hardware-specific
        actions when switching path groups and dealing with I/O errors. For
        information, see
        <xref linkend="be5s6p6" xrefstyle="HeadingOnPage"/>.
       </para>
      </listitem>
      <listitem>
       <para>
        After you modify the <filename>/etc/multipath.conf</filename> file,
        you must run <command>dracut <option>-f</option></command> to
        re-create the INITRD on your system, then reboot in order for the
        changes to take effect.
       </para>
      </listitem>
     </itemizedlist>
    </sect3>
    <sect3 id="mpiosuphw">
     <title>Tested Storage Arrays for Multipathing Support</title>
     <para>
      The following storage arrays have been tested with SUSE Linux
      Enterprise Server:
     </para>
     <simplelist>
      <member>EMC</member>
      <member>Hitachi</member>
      <member>Hewlett-Packard/Compaq</member>
      <member>IBM</member>
      <member>NetApp</member>
      <member>SGI</member>
     </simplelist>
     <para>
      Most other vendor storage arrays should also work. Consult your
      vendor’s documentation for guidance. For a list of the default
      storage arrays recognized by the <filename>multipath-tools</filename>
      package, see <xref linkend="be5s8ae" xrefstyle="HeadingOnPage"/>.
     </para>
    </sect3>
    <sect3 id="be5s6p6">
     <title>Storage Arrays that Require Specific Hardware Handlers</title>
     <para>
      Storage arrays that require special commands on failover from one path
      to the other or that require special nonstandard error handling might
      require more extensive support. Therefore, the Device Mapper Multipath
      service has hooks for hardware handlers. For example, one such handler
      for the EMC CLARiiON CX family of arrays is already provided.
     </para>
     <important>
      <para>
       Consult the hardware vendor’s documentation to determine if its
       hardware handler must be installed for Device Mapper Multipath.
      </para>
     </important>
     <para>
      The <command>multipath -t</command> command shows an internal table of
      storage arrays that require special handling with specific hardware
      handlers. The displayed list is not an exhaustive list of supported
      storage arrays. It lists only those arrays that require special
      handling and that the <filename>multipath-tools</filename> developers
      had access to during the tool development.
     </para>
     <important>
      <para>
       Arrays with true active/active multipath support do not require
       special handling, so they are not listed for the <command>multipath
       -t</command> command.
      </para>
     </important>
     <para>
      A listing in the <command>multipath -t</command> table does not
      necessarily mean that &productname; was tested on that
      specific hardware. For a list of tested storage arrays, see
      <xref linkend="mpiosuphw" xrefstyle="HeadingOnPage"/>.
     </para>
    </sect3>
   </sect2>
  </sect1>
  <sect1 id="mpiotools">
   <title>Multipath Management Tools</title>

   <para>
    The multipathing support in &productname; 10 and later is
    based on the Device Mapper Multipath module of the Linux 2.6 kernel and
    the <systemitem>multipath-tools</systemitem> userspace package. You can
    use the Multiple Devices Administration utility (MDADM,
    <command>mdadm</command>) to view the status of multipathed devices.
   </para>

   <sect2 id="mpiotoolsdm">
    <title>Device Mapper Multipath Module</title>
    <para>
     The Device Mapper Multipath (DM-MP) module provides the multipathing
     capability for Linux. DM-MPIO is the preferred solution for
     multipathing on &productname;. It is the only multipathing option
     shipped with the product that is completely supported by Novell and
     SUSE.
    </para>
    <para>
     DM-MPIO features automatic configuration of the multipathing subsystem
     for a large variety of setups. Configurations of up to 8 paths to each
     device are supported. Configurations are supported for active/passive
     (one path active, others passive) or active/active (all paths active
     with round-robin load balancing).
    </para>
    <para>
     The DM-MPIO framework is extensible in two ways:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Using specific hardware handlers. For information, see
       <xref linkend="be5s6p6" xrefstyle="HeadingOnPage"/>.
      </para>
     </listitem>
     <listitem>
      <para>
       Using load-balancing algorithms that are more sophisticated than the
       round-robin algorithm
      </para>
     </listitem>
    </itemizedlist>
    <para>
     The user-space component of DM-MPIO takes care of automatic path
     discovery and grouping, as well as automated path retesting, so that a
     previously failed path is automatically reinstated when it becomes
     healthy again. This minimizes the need for administrator attention in a
     production environment.
    </para>
    <para>
     DM-MPIO protects against failures in the paths to the device, and not
     failures in the device itself. If one of the active paths is lost (for
     example, a network adapter breaks or a fiber-optic cable is removed),
     I/O is redirected to the remaining paths. If the configuration is
     active/passive, then the path fails over to one of the passive paths.
     If you are using the round-robin load-balancing configuration, the
     traffic is balanced across the remaining healthy paths. If all active
     paths fail, inactive secondary paths must be waked up, so failover
     occurs with a delay of approximately 30 seconds.
    </para>
    <para>
     If a disk array has more than one storage processor, ensure that the
     SAN switch has a connection to the storage processor that owns the LUNs
     you want to access. On most disk arrays, all LUNs belong to both
     storage processors, so both connections are active.
    </para>
    <note>
     <para>
      On some disk arrays, the storage array manages the traffic through
      storage processors so that it presents only one storage processor at a
      time. One processor is active and the other one is passive until there
      is a failure. If you are connected to the wrong storage processor (the
      one with the passive path) you might not see the expected LUNs, or you
      might see the LUNs but get errors when you try to access them.
     </para>
    </note>
    <table id="b567ef1" frame="topbot" rowsep="1" pgwide="0">
     <title>Multipath I/O Features of Storage Arrays</title>
     <tgroup cols="2">
      <colspec colnum="1" colname="1" colwidth="2857*"/>
      <colspec colnum="2" colname="2" colwidth="7144*"/>
      <thead>
       <row id="b567fx1">
        <entry>
         <para>
          Features of Storage Arrays
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row id="b567fx2">
        <entry>
         <para>
          Active/passive controllers
         </para>
        </entry>
        <entry>
         <para>
          One controller is active and serves all LUNs. The second
          controller acts as a standby. The second controller also presents
          the LUNs to the multipath component so that the operating system
          knows about redundant paths. If the primary controller fails, the
          second controller takes over, and it serves all LUNs.
         </para>
         <para>
          In some arrays, the LUNs can be assigned to different controllers.
          A given LUN is assigned to one controller to be its active
          controller. One controller does the disk I/O for any given LUN at
          a time, and the second controller is the standby for that LUN. The
          second controller also presents the paths, but disk I/O is not
          possible. Servers that use that LUN are connected to the LUN’s
          assigned controller. If the primary controller for a set of LUNs
          fails, the second controller takes over, and it serves all LUNs.
         </para>
        </entry>
       </row>
       <row id="b567fx3">
        <entry>
         <para>
          Active/active controllers
         </para>
        </entry>
        <entry>
         <para>
          Both controllers share the load for all LUNs, and can process disk
          I/O for any given LUN. If one controller fails, the second
          controller automatically handles all traffic.
         </para>
        </entry>
       </row>
       <row id="b567fx4">
        <entry>
         <para>
          Load balancing
         </para>
        </entry>
        <entry>
         <para>
          The Device Mapper Multipath driver automatically load balances
          traffic across all active paths.
         </para>
        </entry>
       </row>
       <row id="b567fx6">
        <entry>
         <para>
          Controller failover
         </para>
        </entry>
        <entry>
         <para>
          When the active controller fails over to the passive, or standby,
          controller, the Device Mapper Multipath driver automatically
          activates the paths between the host and the standby, making them
          the primary paths.
         </para>
        </entry>
       </row>
       <row id="b567fx5">
        <entry>
         <para>
          Boot/Root device support
         </para>
        </entry>
        <entry>
         <para>
          Multipathing is supported for the root (<filename>/</filename>)
          device in &productname; 10 and later. The host
          server must be connected to the currently active controller and
          storage processor for the boot device.
         </para>
         <para>
          Multipathing is supported for the <filename>/boot</filename>
          device in &productname; 11 and later.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     Device Mapper Multipath detects every path for a multipathed device as
     a separate SCSI device. The SCSI device names take the form
     <filename>/dev/sd<replaceable>N</replaceable></filename>, where
     <filename><replaceable>N</replaceable></filename> is an autogenerated
     letter for the device, beginning with a and issued sequentially as the
     devices are created, such as <filename>/dev/sda</filename>,
     <filename>/dev/sdb</filename>, and so on. If the number of devices
     exceeds 26, the letters are duplicated so that the next device after
     <filename>/dev/sdz</filename> will be named
     <filename>/dev/sdaa</filename>, <filename>/dev/sdab</filename>, and so
     on.
    </para>
    <para>
     If multiple paths are not automatically detected, you can configure
     them manually in the <filename>/etc/multipath.conf</filename> file. The
     <filename>multipath.conf</filename> file does not exist until you
     create and configure it. For information, see
     <xref linkend="bbillhs" xrefstyle="SectTitleOnPage"/>.
    </para>
   </sect2>

   <sect2 id="mpiotoolsmpt">
    <title>Multipath I/O Management Tools</title>
    <para>
     The <command>multipath-tools</command> user-space package takes care of
     automatic path discovery and grouping. It automatically tests the path
     periodically, so that a previously failed path is automatically
     reinstated when it becomes healthy again. This minimizes the need for
     administrator attention in a production environment.
    </para>
    <table id="b59pxng" frame="topbot" rowsep="1" pgwide="0">
     <title>Tools in the multipath-tools Package</title>
     <tgroup cols="2">
      <colspec colnum="1" colname="1" colwidth="2857*"/>
      <colspec colnum="2" colname="2" colwidth="7144*"/>
      <thead>
       <row id="b59q186">
        <entry>
         <para>
          Tool
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row id="b59q187">
        <entry>
         <para>
          multipath
         </para>
        </entry>
        <entry>
         <para>
          Scans the system for multipathed devices and assembles them.
         </para>
        </entry>
       </row>
       <row id="b59q188">
        <entry>
         <para>
          multipathd
         </para>
        </entry>
        <entry>
         <para>
          Waits for maps events, then executes <command>multipath</command>.
         </para>
        </entry>
       </row>
       <row id="b59q189">
        <entry>
         <para>
          devmap-name
         </para>
        </entry>
        <entry>
         <para>
          Provides a meaningful device name to <command>udev</command> for
          device maps (devmaps).
         </para>
        </entry>
       </row>
       <row id="b59q18a">
        <entry>
         <para>
          kpartx
         </para>
        </entry>
        <entry>
         <para>
          Maps linear devmaps to partitions on the multipathed device, which
          makes it possible to create multipath monitoring for partitions on
          the device.
         </para>
        </entry>
       </row>
       <row id="b15jwqx6">
        <entry>
         <para>
          mpathpersist
         </para>
        </entry>
        <entry>
         <para>
          Manages SCSI persistent reservations on Device Mapper Multipath
          devices.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
    <para>
     The file list for a package can vary for different server
     architectures. For a list of files included in the multipath-tools
     package, go to the
     <ulink url="http://www.suse.com/products/server/?tab=1"><citetitle>SUSE
     Linux Enterprise Server Technical Specifications</citetitle> &gt;
     <citetitle>Package Descriptions </citetitle>Web page</ulink>, find your
     architecture and select <guimenu>Packages Sorted by Name</guimenu>,
     then search on <quote>multipath-tools</quote> to find the package list
     for that architecture.
    </para>
    <para>
     You can also determine the file list for an RPM file by querying the
     package itself: using the <command>rpm -ql</command> or <command>rpm
     -qpl</command> command options.
    </para>
    <itemizedlist>
     <listitem>
      <para>
       To query an installed package, enter
      </para>
<screen>
rpm -ql &lt;<replaceable>package_name</replaceable>&gt;
</screen>
     </listitem>
     <listitem>
      <para>
       To query a package not installed, enter
      </para>
<screen>
rpm -qpl &lt;<replaceable>URL_or_path_to_package</replaceable>&gt;
</screen>
     </listitem>
    </itemizedlist>
    <para>
     To check that the <filename>multipath-tools</filename> package is
     installed, do the following:
    </para>
    <procedure id="bcmre1m">
     <step id="bcmre1n">
      <para>
       Enter the following at a terminal console prompt:
      </para>
<screen>
rpm -q multipath-tools
</screen>
      <para>
       If it is installed, the response repeats the package name and
       provides the version information, such as:
      </para>
<screen>
multipath-tools-04.7-34.23
</screen>
      <para>
       If it is not installed, the response reads:
      </para>
<screen>
package multipath-tools is not installed
</screen>
     </step>
    </procedure>
   </sect2>

   <sect2 id="mpiotoolsmdadm">
    <title>Using MDADM for Multipathed Devices</title>
    <para>
     Udev is the default device handler, and devices are automatically known
     to the system by the Worldwide ID instead of by the device node name.
     This resolves problems in previous releases of MDADM and LVM where the
     configuration files (<filename>mdadm.conf</filename> and
     <filename>lvm.conf)</filename> did not properly recognize multipathed
     devices.
    </para>
    <para>
     As with LVM2, MDADM requires that the devices be accessed by the ID
     rather than by the device node path. Therefore, the
     <systemitem>DEVICE</systemitem> entry in
     <filename>/etc/mdadm.conf</filename> should be set as follows:
    </para>
<screen>
DEVICE /dev/disk/by-id/*
</screen>
    <para>
     If you are using user-friendly names, specify the path as follows so
     that only the device mapper names are scanned after multipathing is
     configured:
    </para>
<screen>
DEVICE /dev/disk/by-id/dm-uuid-.*-mpath-.*
</screen>
    <para>
     To verify that MDADM is installed:
    </para>
    <procedure id="bcmrfp3">
     <step id="bcmrfp4">
      <para>
       Ensure that the <filename>mdadm</filename> package is installed by
       entering the following at a terminal console prompt:
      </para>
<screen>
rpm -q mdadm
</screen>
      <para>
       If it is installed, the response repeats the package name and
       provides the version information. For example:
      </para>
<screen>
mdadm-2.6-0.11
</screen>
      <para>
       If it is not installed, the response reads:
      </para>
<screen>
package mdadm is not installed
</screen>
     </step>
    </procedure>
    <para>
     For information about modifying the <filename>/etc/lvm/lvm.conf
     </filename>file, see
     <xref linkend="mpiousinglvm" xrefstyle="SectTitleOnPage"/>.
    </para>
   </sect2>

   <sect2 id="beep4ms">
    <title>Linux multipath(8) Command</title>
    <para>
     Use the Linux <command>multipath(8)</command> command to configure and
     manage multipathed devices.
    </para>
    <para>
     General syntax for the <command>multipath(8)</command> command:
    </para>
<screen>
multipath [-v verbosity_level] [-b bindings_file] [-d] [-h|-l|-ll|-f|-F|-B|-c|-q|-r|-w|-W] [-p failover|multibus|group_by_serial|group_by_prio|group_by_node_name] [<replaceable>devicename</replaceable>]
</screen>
    <bridgehead id="b15drtkg">Options</bridgehead>
    <variablelist>
     <varlistentry id="b15drtkh">
      <term>-v verbosity_level</term>
      <listitem>
       <para>
        Prints all paths and multipaths.
       </para>
       <variablelist>
        <varlistentry id="b15drtki">
         <term>0</term>
         <listitem>
          <para>
           No output.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drtkj">
         <term>1</term>
         <listitem>
          <para>
           Prints only the created or updated multipath names. Used to feed
           other tools like <command>kpartx</command>.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drtkk">
         <term>2+</term>
         <listitem>
          <para>
           Print all information: Detected paths, multipaths, and device
           maps.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkl">
      <term>-h</term>
      <listitem>
       <para>
        Print usage text.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkm">
      <term>-d</term>
      <listitem>
       <para>
        Dry run; do not create or update device maps.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkn">
      <term>-l</term>
      <listitem>
       <para>
        Show the current multipath topology from information fetched in
        <filename>sysfs</filename> and the device mapper.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtko">
      <term>-ll</term>
      <listitem>
       <para>
        Show the current multipath topology from all available information
        (sysfs, the device mapper, path checkers, and so on).
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkp">
      <term>-f</term>
      <listitem>
       <para>
        Flush a multipath device map specified as a parameter, if unused.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkq">
      <term>-F</term>
      <listitem>
       <para>
        Flush all unused multipath device maps.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkr">
      <term>-t</term>
      <listitem>
       <para>
        Print internal hardware table to <filename>stdout</filename>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtks">
      <term>-r</term>
      <listitem>
       <para>
        Force device map reload.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkt">
      <term>-B</term>
      <listitem>
       <para>
        Treat the bindings file as read only.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtku">
      <term>-b bindings_file</term>
      <listitem>
       <para>
        Set the user_friendly_names bindings file location. The default is
        <filename>/etc/multipath/bindings</filename>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkv">
      <term>-c</term>
      <listitem>
       <para>
        Check if a block device should be a path in a multipath device.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkw">
      <term>-q</term>
      <listitem>
       <para>
        Allow device tables with <literal>queue_if_no_path</literal> when
        <filename>multipathd</filename> is not running.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtkx">
      <term>-w</term>
      <listitem>
       <para>
        Remove the WWID for the specified device from the WWIDs file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drtky">
      <term>-W</term>
      <listitem>
       <para>
        Reset the WWIDs file to only include the current multipath devices.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drv6f">
      <term>-p policy</term>
      <listitem>
       <para>
        Force new maps to use the specified policy. Existing maps are not
        modified.
       </para>
       <variablelist>
        <varlistentry id="b15drv6g">
         <term>failover</term>
         <listitem>
          <para>
           One path per priority group.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drv6h">
         <term>multibus</term>
         <listitem>
          <para>
           All paths in one priority group.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drv6i">
         <term>group_by_serial</term>
         <listitem>
          <para>
           One priority group per serial.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drv6j">
         <term>group_by_prio</term>
         <listitem>
          <para>
           One priority group per priority value. Priorities are determined
           by callout programs specified as a global, per-controller or
           per-multipath option in the configuration file.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15drv6k">
         <term>group_by_node_name</term>
         <listitem>
          <para>
           One priority group per target node name. Target node names are
           fetched in
           <filename>/sys/class/fc_transport/target*/node_name</filename>.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </listitem>
     </varlistentry>
     <varlistentry id="b15drx1o">
      <term>device_name</term>
      <listitem>
       <para>
        Update only the device map for the specified device. Specify the
        name as the device path such as <filename>/dev/sdb</filename>, or in
        <literal><replaceable>major</replaceable>:<replaceable>minor</replaceable></literal>
        format, or the multipath map name.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <bridgehead id="beep4mt">General Examples</bridgehead>
    <variablelist>
     <varlistentry id="bomamxl">
      <term>multipath</term>
      <listitem>
       <para>
        Configure all multipath devices.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomalct">
      <term>multipath <replaceable>devicename</replaceable>
      </term>
      <listitem>
       <para>
        Configures a specific multipath device.
       </para>
       <para>
        Replace <replaceable>devicename</replaceable> with the device node
        name such as <filename>/dev/sdb</filename> (as shown by udev in the
        $DEVNAME variable), or in the <literal>major:minor</literal> format.
        The device may alternatively be a multipath map name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomamxm">
      <term>multipath -f</term>
      <listitem>
       <para>
        Selectively suppresses a multipath map, and its device-mapped
        partitions.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomamxn">
      <term>multipath -d</term>
      <listitem>
       <para>
        Dry run. Displays potential multipath devices, but does not create
        any devices and does not update device maps.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomamxo">
      <term>multipath -v2 -d</term>
      <listitem>
       <para>
        Displays multipath map information for potential multipath devices
        in a dry run. The -v2 option shows only local disks. This verbosity
        level prints the created or updated multipath names only for use to
        feed other tools like kpartx.
       </para>
       <para>
        There is no output if the devices already exists and there are no
        changes. Use <command>multipath -ll</command> to see the status of
        configured multipath devices.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomaqc3">
      <term>multipath -v2 <replaceable>devicename</replaceable>
      </term>
      <listitem>
       <para>
        Configures a specific potential multipath device and displays
        multipath map information for it. This verbosity level prints only
        the created or updated multipath names for use to feed other tools
        like <command>kpartx</command>.
       </para>
       <para>
        There is no output if the device already exists and there are no
        changes. Use <command>multipath -ll</command> to see the status of
        configured multipath devices.
       </para>
       <para>
        Replace <replaceable>devicename</replaceable> with the device node
        name such as <filename>/dev/sdb</filename> (as shown by
        <command>udev</command> in the $DEVNAME variable), or in the
        <literal>major:minor</literal> format. The device may alternatively
        be a multipath map name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomaqc4">
      <term>multipath -v3</term>
      <listitem>
       <para>
        Configures potential multipath devices and displays multipath map
        information for them. This verbosity level prints all detected
        paths, multipaths, and device maps. Both wwid and devnode
        blacklisted devices are displayed.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomaqc5">
      <term>multipath -v3 <replaceable>devicename</replaceable>
      </term>
      <listitem>
       <para>
        Configures a specific potential multipath device and displays
        information for it. The -v3 option shows the full path list. This
        verbosity level prints all detected paths, multipaths, and device
        maps. Both wwid and devnode blacklisted devices are displayed.
       </para>
       <para>
        Replace <replaceable>devicename</replaceable> with the device node
        name such as <filename>/dev/sdb</filename> (as shown by
        <command>udev</command> in the $DEVNAME variable), or in the
        <literal>major:minor</literal> format. The device may alternatively
        be a multipath map name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomaqc6">
      <term>multipath -ll</term>
      <listitem>
       <para>
        Display the status of all multipath devices.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomasgg">
      <term>multipath -ll <replaceable>devicename</replaceable>
      </term>
      <listitem>
       <para>
        Displays the status of a specified multipath device.
       </para>
       <para>
        Replace <replaceable>devicename</replaceable> with the device node
        name such as <filename>/dev/sdb</filename> (as shown by
        <command>udev</command> in the $DEVNAME variable), or in the
        <literal>major:minor</literal> format. The device may alternatively
        be a multipath map name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomaqc7">
      <term>multipath -F</term>
      <listitem>
       <para>
        Flushes all unused multipath device maps. This unresolves the
        multiple paths; it does not delete the devices.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomasgh">
      <term>multipath -F <replaceable>devicename</replaceable>
      </term>
      <listitem>
       <para>
        Flushes unused multipath device maps for a specified multipath
        device. This unresolves the multiple paths; it does not delete the
        device.
       </para>
       <para>
        Replace <replaceable>devicename</replaceable> with the device node
        name such as <filename>/dev/sdb</filename> (as shown by
        <command>udev</command> in the $DEVNAME variable), or in the
        <literal>major:minor</literal> format. The device may alternatively
        be a multipath map name.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="bomasgi">
      <term>multipath -p [ failover | multibus | group_by_serial | group_by_prio | group_by_node_name ]</term>
      <listitem>
       <para>
        Sets the group policy by specifying one of the group policy options
        that are described in
        <xref linkend="beg177b" xrefstyle="TableXRef"/>:
       </para>
       <table id="beg177b" frame="topbot" rowsep="1" pgwide="0">
        <title>Group Policy Options for the multipath -p Command</title>
        <tgroup cols="2">
         <colspec colnum="1" colname="1" colwidth="2684*"/>
         <colspec colnum="2" colname="2" colwidth="7319*"/>
         <thead>
          <row id="beep4mu">
           <entry>
            <para>
             Policy Option
            </para>
           </entry>
           <entry>
            <para>
             Description
            </para>
           </entry>
          </row>
         </thead>
         <tbody>
          <row id="beep4mv">
           <entry>
            <para>
             failover
            </para>
           </entry>
           <entry>
            <para>
             (Default) One path per priority group. You can use only one
             path at a time.
            </para>
           </entry>
          </row>
          <row id="beep4mw">
           <entry>
            <para>
             multibus
            </para>
           </entry>
           <entry>
            <para>
             All paths in one priority group.
            </para>
           </entry>
          </row>
          <row id="beep4mx">
           <entry>
            <para>
             group_by_serial
            </para>
           </entry>
           <entry>
            <para>
             One priority group per detected SCSI serial number (the
             controller node worldwide number).
            </para>
           </entry>
          </row>
          <row id="beep4my">
           <entry>
            <para>
             group_by_prio
            </para>
           </entry>
           <entry>
            <para>
             One priority group per path priority value. Paths with the same
             priority are in the same priority group. Priorities are
             determined by callout programs specified as a global,
             per-controller, or per-multipath option in the
             <filename>/etc/multipath.conf</filename> configuration file.
            </para>
           </entry>
          </row>
          <row id="beep4mz">
           <entry>
            <para>
             group_by_node_name
            </para>
           </entry>
           <entry>
            <para>
             One priority group per target node name. Target node names are
             fetched in the<filename>
             /sys/class/fc_transport/target*/node_name</filename> location.
            </para>
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="b15jw320">
    <title>Linux mpathpersist(8) Utility</title>
    <para>
     The <command>mpathpersist(8)</command> utility can be used to manage
     SCSI persistent reservations on Device Mapper Multipath devices.
    </para>
    <para>
     General syntax for the <command>mpathpersist(8)</command> command:
    </para>
<screen>
mpathpersist [options] [device]
</screen>
    <para>
     Use this utility with the service action reservation key
     (<literal>reservation_key</literal> attribute) in the
     <filename>/etc/multipath.conf</filename> file to set persistent
     reservations for SCSI devices. The attribute is not used by default. If
     it is not set, the <command>multipathd</command> daemon does not check
     for persistent reservation for newly discovered paths or reinstated
     paths.
    </para>
<screen>
reservation_key &lt;<replaceable>reservation key</replaceable>&gt;
</screen>
    <para>
     You can add the attribute to the <literal>defaults</literal> section or
     the <literal>multipaths</literal> section. For example:
    </para>
<screen>
multipaths {
        multipath {
                          wwid   XXXXXXXXXXXXXXXX
                         alias      yellow
                         reservation_key  0x123abc
      }
}
</screen>
    <para>
     Set the <literal>reservation_key</literal> parameter for all mpath
     devices applicable for persistent management, then restart the
     <command>multipathd</command> daemon. After it is set up, you can
     specify the reservation key in the mpathpersist commands.
    </para>
    <bridgehead id="b15jw321">Options</bridgehead>
    <variablelist>
     <varlistentry id="b15jwii5">
      <term>-h</term>
      <term>--help</term>
      <listitem>
       <para>
        Outputs the command usage information, then exits.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwii6">
      <term>-d &lt;<replaceable>device</replaceable>&gt;</term>
      <term>--device=&lt;<replaceable>device</replaceable>&gt;</term>
      <listitem>
       <para>
        Query or change the device.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwii7">
      <term>-H</term>
      <term>--hex</term>
      <listitem>
       <para>
        Display the output response in hexadecimal.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwii8">
      <term>-X &lt;tids&gt;</term>
      <term>--transportID=&lt;tids&gt;</term>
      <listitem>
       <para>
        Transport IDs can be mentioned in several forms.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jw322">
      <term>-v &lt;<replaceable>level</replaceable>&gt;</term>
      <term>--verbose &lt;<replaceable>level</replaceable>&gt;</term>
      <listitem>
       <para>
        Specifies the verbosity level.
       </para>
       <variablelist>
        <varlistentry id="b15jw323">
         <term>0</term>
         <listitem>
          <para>
           Critical and error messages.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15jw324">
         <term>1</term>
         <listitem>
          <para>
           Warning messages.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15jw325">
         <term>2</term>
         <listitem>
          <para>
           Informational messages.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry id="b15jw326">
         <term>3</term>
         <listitem>
          <para>
           Informational messages with trace enabled.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </listitem>
     </varlistentry>
    </variablelist>
    <bridgehead id="b15jwii9">PR In Options</bridgehead>
    <variablelist>
     <varlistentry id="b15jwiie">
      <term>-i</term>
      <term>--in</term>
      <listitem>
       <para>
        Request PR In command.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwiih">
      <term>-k</term>
      <term>--read-keys</term>
      <listitem>
       <para>
        PR In: Read Keys.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwiim">
      <term>-s</term>
      <term>--read-status</term>
      <listitem>
       <para>
        PR In: Read Full Status.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwiin">
      <term>-r</term>
      <term>--read-reservation</term>
      <listitem>
       <para>
        PR In: Read Reservation.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwiir">
      <term>-c</term>
      <term>--report-capabilities</term>
      <listitem>
       <para>
        PR In: Report Capabilities.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <bridgehead id="b15jwiiz">PR Out Options</bridgehead>
    <variablelist>
     <varlistentry id="b15jwij0">
      <term>-o</term>
      <term>--out</term>
      <listitem>
       <para>
        Request PR Out command.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij1">
      <term>-c</term>
      <term>--clear</term>
      <listitem>
       <para>
        PR Out: Clear
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij2">
      <term>-Z</term>
      <term>--param-aptpl</term>
      <listitem>
       <para>
        PR Out parameter <literal>APTPL</literal>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij3">
      <term>-S SARK</term>
      <term>--param-sark=SARK</term>
      <listitem>
       <para>
        PR Out parameter Service Action Reservation Key (SARK) in
        hexadecimal.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij4">
      <term>-P</term>
      <term>--preempt</term>
      <listitem>
       <para>
        PR Out: Preempt.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij5">
      <term>-A</term>
      <term>--preempt-abort</term>
      <listitem>
       <para>
        PR Out: Preempt and Abort.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij6">
      <term>-T &lt;<replaceable>type</replaceable>&gt;</term>
      <term>--prout-type=&lt;<replaceable>type</replaceable>&gt;</term>
      <listitem>
       <para>
        PR Out command type.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij7">
      <term>-G</term>
      <term>--register</term>
      <listitem>
       <para>
        PR Out: Register.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij8">
      <term>-I</term>
      <term>--register-ignore</term>
      <listitem>
       <para>
        PR Out: Register and Ignore.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwij9">
      <term>-L</term>
      <term>--release</term>
      <listitem>
       <para>
        PR Out: Release
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b15jwija">
      <term>-R</term>
      <term>--reserve</term>
      <listitem>
       <para>
        PR Out: Reserve.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
    <bridgehead id="b15jwmcx">Examples</bridgehead>
    <para>
     Register the Service Action Reservation Key for the
     <filename>/dev/mapper/mpath9</filename> device.
    </para>
<screen>
mpathpersist --out --register --param-sark=123abc --prout-type=5 -d /dev/mapper/mpath9
</screen>
    <para>
     Read the Service Action Reservation Key for the
     <filename>/dev/mapper/mpath9</filename> device.
    </para>
<screen>
mpathpersisst -i -k -d /dev/mapper/mpath9
</screen>
    <para>
     Reserve the Service Action Reservation Key for the
     <filename>/dev/mapper/mpath9</filename> device.
    </para>
<screen>
mpathpersist --out --reserve --param-sark=123abc --prout-type=8 -d /dev/mapper/mpath9
</screen>
    <para>
     Read the reservation status of the
     <filename>/dev/mapper/mpath9</filename> device.
    </para>
<screen>
mpathpersist -i -s -d /dev/mapper/mpath9
</screen>
   </sect2>
  </sect1>
  <sect1 id="mpiosysconf">
   <title>Configuring the System for Multipathing</title>
   <para/>

   <sect2 id="mpiosysconfsandevs">
    <title>Preparing SAN Devices for Multipathing</title>
    <para>
     Before configuring multipath I/O for your SAN devices, prepare the SAN
     devices, as necessary, by doing the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Configure and zone the SAN with the vendor’s tools.
      </para>
     </listitem>
     <listitem>
      <para>
       Configure permissions for host LUNs on the storage arrays with the
       vendor’s tools.
      </para>
     </listitem>
     <listitem>
      <para>
       Install the Linux HBA driver module. Upon module installation, the
       driver automatically scans the HBA to discover any SAN devices that
       have permissions for the host. It presents them to the host for
       further configuration.
      </para>
      <note>
       <para>
        Ensure that the HBA driver you are using does not have native
        multipathing enabled.
       </para>
      </note>
      <para>
       See the vendor’s specific instructions for more details.
      </para>
     </listitem>
     <listitem>
      <para>
       After the driver module is loaded, discover the device nodes assigned
       to specific array LUNs or partitions.
      </para>
     </listitem>
     <listitem>
      <para>
       If the SAN device will be used as the root device on the server,
       modify the timeout settings for the device as described in
       <xref linkend="bok8cn1" xrefstyle="SectTitleOnPage"/>.
      </para>
     </listitem>
    </itemizedlist>
    <para>
     If the LUNs are not seen by the HBA driver, <command>lsscsi
     </command>can be used to check whether the SCSI devices are seen
     correctly by the operating system. When the LUNs are not seen by the
     HBA driver, check the zoning setup of the SAN. In particular, check
     whether LUN masking is active and whether the LUNs are correctly
     assigned to the server.
    </para>
    <para>
     If the LUNs are seen by the HBA driver, but there are no corresponding
     block devices, additional kernel parameters are needed to change the
     SCSI device scanning behavior, such as to indicate that LUNs are not
     numbered consecutively. For information, see
     <ulink url="http://www.suse.com/support/kb/"><citetitle>TID 3955167:
     Troubleshooting SCSI (LUN) Scanning Issues</citetitle> in the &suse;
     Knowledgebase</ulink>.
    </para>
   </sect2>

   <sect2 id="mpiosysconfpart">
    <title>Partitioning Multipath Devices</title>
    <para>
     Partitioning devices that have multiple paths is not recommended, but
     it is supported. You can use the <command>kpartx</command> tool to
     create partitions on multipath devices without rebooting. You can also
     partition the device before you attempt to configure multipathing by
     using the Partitioner function in &yast;, or by using a third-party
     partitioning tool.
    </para>
    <para>
     Multipath devices are device-mapper devices. Modifying device-mapper
     devices with command line tools (such as parted, kpartx, or fdisk)
     works, but it does not necessarily generate the udev events that are
     required to update other layers. After you partition the device-mapper
     device, you should check the multipath map to make sure the
     device-mapper devices were mapped. If they are missing, you can remap
     the multipath devices or reboot the server to pick up all of the new
     partitions in the multipath map.
    </para>
    <para>
     The device-mapper device for a partition on a multipath device is not
     the same as an independent device. When you create an LVM logical
     volume using the whole device, you must specify a device that contains
     no partitions. If you specify a multipath partition as the target
     device for the LVM logical volume, LVM recognizes that the underlying
     physical device is partitioned and the create fails. If you need to
     subdivide a SAN device, you can carve LUNs on the SAN device and
     present each LUN as a separate multipath device to the server.
    </para>
   </sect2>

   <sect2 id="mpiosysconfsvr">
    <title>Configuring the Device Drivers in initrd for Multipathing</title>
    <para>
     The server must be manually configured to automatically load the device
     drivers for the controllers to which the multipath I/O devices are
     connected within the <literal>initrd</literal>. You need to add the
     necessary driver module to the variable <envar>force_drivers</envar> in
     the file <filename>/etc/dracut.conf.d/01-dist.conf</filename>.
    </para>
    <para>
     For example, if your system contains a RAID controller accessed by the
     <filename>hpsa</filename> driver and multipathed devices connected to
     a QLogic controller accessed by the driver qla23xx, this entry would
     look like:
    </para>
<screen>force_drivers+="hpsa qla23xx"</screen>
    <para>
     After changing <filename>/etc/dracut.conf.d/01-dist.conf</filename>,
     you must re-create the <literal>initrd</literal> on your system with
     the <command>dracut <option>-f</option></command> command, then reboot
     in order for the changes to take effect.
    </para>
    <para>
     In &productname; 11 SP3 and later, four SCSI hardware
     handlers were added in the SCSI layer that can be used with
     DM-Multipath:
    </para>
    <simplelist>
     <member><filename>scsi_dh_alua</filename>
     </member>
     <member><filename>scsi_dh_rdac</filename>
     </member>
     <member><literal>scsi_dh_hp_sw</literal>
     </member>
     <member><literal>scsi_dh_emc</literal>
     </member>
    </simplelist>
    <para>
     Add the modules to the <filename>initrd</filename> image, then specify
     them in the <filename>/etc/multipath.conf</filename> file as hardware
     handler types <literal>alua</literal>, <literal>rdac</literal>,
     <literal>hp_sw</literal>, and <literal>emc</literal>. For example, add
     one of these lines for a device definition:
    </para>
<screen>
hardware_handler "1 alua"

hardware_handler "1 rdac"

hardware_handler "1 hp_sw"

hardware_handler "1 emc"
</screen>
    <para>
     To include the modules in the <filename>initrd</filename> image:
    </para>
    <procedure id="b15dscl4">
     <step id="b15dscl5">
      <para>
       Add the device handler modules to the <envar>force_drivers</envar>
       variable in <filename>/etc/dracut.conf.d/01-dist.conf</filename>:
      </para>
<screen>force_drivers+="alua rdac hp_sw emc"</screen>
     </step>
     <step id="b15dscl6">
      <para>
       Create a new <filename>initrd</filename>:
      </para>
<screen>dracut /boot/initrd-&lt;<replaceable>flavour</replaceable>&gt;-scsi-dh \
<replaceable>KERNELVERSION</replaceable></screen>
     </step>
     <step id="b15dscl7">
      <para>
       <remark condition="clarity">
       2014-09-05 - fs: FIXME: This needs to be adjusted to GRUB2
      </remark>
       Update the boot configuration file
       (<filename>/etc/default/grub</filename>,
       <filename>/boot/efi/SuSE/elilo.conf</filename>) with the newly built
       <filename>initrd</filename>.
      </para>
     </step>
     <step id="b15dscl8">
      <para>
       Restart the server.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 id="mpioboot">
    <title>Adding multipathd to the Boot Sequence</title>
    <para>
     Use either of the methods in this section to add multipath I/O services
     (<command>multipathd</command>) to the boot sequence.
    </para>
    <sect3 id="b5c8qi6">
     <title>Using &yast; to Add multipathd</title>
     <procedure id="b5997ck">
      <step id="b5997cl">
       <para>
        In &yast;, click <guimenu>System</guimenu> &gt;
        <guimenu>&ycc_runlevel;</guimenu>.
       </para>
      </step>
      <step id="b5997cm">
       <para>
        Select <guimenu>multipathd</guimenu>. If the service is listed as
        <literal>inactive</literal>, click <guimenu>Enable/Disable</guimenu>
        to change this.
       </para>
      </step>
      <step id="b5997cn">
       <para>
        Confirm your changes.
       </para>
       <para>
        The changes do not take affect until the server is restarted.
       </para>
      </step>
     </procedure>
    </sect3>
    <sect3 id="b5c8qtj">
     <title>Using the Command Line to Add multipathd</title>
     <procedure id="b5c8qz1">
      <step id="b5c8qz2">
       <para>
        Open a terminal console, then log in as the
        &rootuser; user or equivalent.
       </para>
      </step>
      <step id="b5c8r4x">
       <para>
        At the terminal console prompt, enter
       </para>
<screen>
systemctl enable multipathd.service
</screen>
      </step>
     </procedure>
    </sect3>
   </sect2>
  </sect1>
  <sect1 id="mpiostart">
   <title>Enabling and Starting Multipath I/O Services</title>

   <para>
    To start multipath services and enable them to start at reboot:
   </para>

   <procedure id="b7jqkxe">
    <step id="b7jqkxg">
     <para>
      Open a terminal console, then log in as the
      &rootuser; user or equivalent.
     </para>
    </step>
    <step id="b7jqkxh">
     <para>
      At the terminal console prompt, enter
     </para>
<screen>systemctl enable multipathd.service multipath.service  </screen>
<!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff:
  <screen>
chkconfig multipathd on
</screen>
<screen>
chkconfig boot.multipath on
</screen>-->
    </step>
   </procedure>

   <para>
    If the multipath services does not start automatically on system boot,
    do the following to start them manually:
   </para>

   <procedure id="b5c8s8w">
    <step id="b5c8s8x">
     <para>
      Open a terminal console, then log in as the
      &rootuser; user or equivalent.
     </para>
    </step>
    <step id="b5c8sla">
     <para>
      Enter
     </para>
<screen>systemctl start multipath.service multipathd.service </screen>
<!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff:
 <screen>
/etc/init.d/boot.multipath start
</screen>
<screen>
/etc/init.d/multipathd start
</screen>-->
    </step>
   </procedure>
  </sect1>
  <sect1 id="bbillhs">
   <title>Creating or Modifying the /etc/multipath.conf File</title>

   <para>
    The <filename>/etc/multipath.conf</filename> file does not exist unless
    you create it. Default multipath device settings are applied
    automatically when the <command>multipathd</command> daemon runs unless
    you create the multipath configuration file and personalize the
    settings. The
    <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.synthetic</filename>
    file contains a sample <filename>/etc/multipath.conf</filename> file
    that you can use as a guide for multipath settings.
   </para>

   <para>
    Whenever you create or modify the
    <filename>/etc/multipath.conf</filename> file, the changes are not
    automatically applied when you save the file. This allows you time to
    perform a dry run to verify your changes before they are committed. When
    you are satisfied with the revised settings, you can update the
    multipath maps for the running multipathd daemon to use, or the changes
    will be applied the next time that the multipathd daemon is restarted,
    such as on a system restart.
   </para>


   <sect2 id="beenynn">
    <title>Creating the /etc/multipath.conf File</title>
    <para>
     If the <filename>/etc/multipath.conf</filename> file does not exist,
     copy the example to create the file:
    </para>
    <procedure id="bbillht">
     <step id="bbillhu">
      <para>
       In a terminal console, log in as the &rootuser;
       user.
      </para>
     </step>
     <step id="bbillhv">
      <para>
       Enter the following command (all on one line, of course) to copy the
       template:
      </para>
<screen>
cp /usr/share/doc/packages/multipath-tools/multipath.conf.synthetic /etc/multipath.conf
</screen>
     </step>
     <step id="bcmqvq2">
      <para>
       Use the
       <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.annotated</filename>
       file as a reference to determine how to configure multipathing for
       your system.
      </para>
     </step>
     <step id="bcmqx5z">
      <para>
       Ensure that there is an appropriate <command>device</command> entry
       for your SAN. Most vendors provide documentation on the proper setup
       of the <command>device</command> section.
      </para>
      <para>
       The <filename>/etc/multipath.conf</filename> file requires a
       different <command>device</command> section for different SANs. If
       you are using a storage subsystem that is automatically detected (see
       <xref linkend="mpiosuphw" xrefstyle="HeadingOnPage"/>), the default
       entry for that device can be used; no further configuration of the
       <filename>/etc/multipath.conf</filename> file is required.
      </para>
     </step>
     <step id="bcmqweh">
      <para>
       Save the file.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 id="b122wjjt">
    <title>Sections in the /etc/multipath.conf File</title>
    <para>
     The <filename>/etc/multipath.conf</filename> file is organized in the
     following sections. See
     <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.annotated</filename>
     for a template with extensive comments for each of the attributes and
     their options.
    </para>
    <variablelist>
     <varlistentry id="b122vffx">
      <term>defaults</term>
      <listitem>
       <para>
        General default settings for multipath I/0. These values are used if
        no values are given in the appropriate device or multipath sections.
        For information, see
        <xref linkend="bbj68de" xrefstyle="SectTitleOnPage"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b12donk3">
      <term>blacklist</term>
      <listitem>
       <para>
        Lists the device names to discard as not multipath candidates.
        Devices can be identified by their device node name
        (<literal>devnode</literal>), their WWID (<literal>wwid</literal>),
        or their vendor or product strings (<literal>device</literal>). For
        information, see
        <xref linkend="bbj5x7z" xrefstyle="SectTitleOnPage"/>.
       </para>
       <para>
        You typically ignore non-multipathed devices, such as hpsa, fd, hd,
        md, dm, sr, scd, st, ram, raw, loop.
       </para>
       <formalpara id="b122sbge" role="intro">
        <title>Values</title>
        <para/>
       </formalpara>
       <para>
        For an example, see
        <xref linkend="bbj5x7z" xrefstyle="HeadingOnPage"/>.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b12doufy">
      <term>blacklist_exceptions</term>
      <listitem>
       <para>
        Lists the device names of devices to be treated as multipath
        candidates even if they are on the blacklist. Devices can be
        identified by their device node name (<literal>devnode</literal>),
        their WWID (<literal>wwid</literal>), or their vendor or product
        strings (<literal>device</literal>). You must specify the excepted
        devices by using the same keyword that you used in the blacklist.
        For example, if you used the devnode keyword for devices in the
        blacklist, you use the devnode keyword to exclude some of the
        devices in the blacklist exceptions. It is not possible to blacklist
        devices by using the <literal>devnode</literal> keyword and to
        exclude some devices of them by using the <literal>wwid</literal>
        keyword.
       </para>
       <formalpara id="b122sbgg" role="intro">
        <title>Values</title>
        <para/>
       </formalpara>
       <para>
        For examples, see
        <xref linkend="bbj5x7z" xrefstyle="HeadingOnPage"/> and the
        <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.annotated</filename>
        file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b122vffy">
      <term>multipaths</term>
      <listitem>
       <para>
        Specifies settings for individual multipath devices. Except for
        settings that do not support individual settings, these values
        overwrite what is specified in the <literal>defaults</literal> and
        <literal>devices</literal> sections of the configuration file.
       </para>
      </listitem>
     </varlistentry>
     <varlistentry id="b122vh2i">
      <term>devices</term>
      <listitem>
       <para>
        Specifies settings for individual storage controllers. These values
        overwrite values specified in the <filename>defaults</filename>
        section of the configuration file. If you use a storage array that
        is not supported by default, you can create a
        <literal>devices</literal> subsection to specify the default
        settings for it. These values can be overwritten by settings for
        individual multipath devices if the keyword allows it.
       </para>
       <para>
        For information, see the following:
       </para>
       <itemizedlist>
        <listitem>
         <para>
          <xref linkend="mpionames" xrefstyle="SectTitleOnPage"/>
         </para>
        </listitem>
        <listitem>
         <para>
          <xref linkend="bkj8n9w" xrefstyle="SectTitleOnPage"/>
         </para>
        </listitem>
       </itemizedlist>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="mpiohwsupconf">
    <title>Verifying the Multipath Setup in the /etc/multipath.conf File</title>
    <para>
     Whenever you create or modify the
     <filename>/etc/multipath.conf</filename> file, the changes are not
     automatically applied when you save the file. You can perform a
     <quote>dry run</quote> of the setup to verify the multipath setup
     before you update the multipath maps.
    </para>
    <para>
     At the server command prompt, enter
    </para>
<screen>
<command>multipath -v2 -d</command>
</screen>
    <para>
     This command scans the devices, then displays what the setup would look
     like if you commit the changes. It is assumed that the
     <filename>multipathd</filename> daemon is already running with the old
     (or default) multipath settings when you modify the
     <filename>/etc/multipath.conf</filename> file and perform the dry run.
     If the changes are acceptable, continue with
     <xref linkend="bbj8y2r" xrefstyle="HeadingOnPage"/>.
    </para>
    <para>
     The output is similar to the following:
    </para>
<screen>
26353900f02796769
[size=127 GB]
[features="0"]
[hwhandler="1    emc"] 
</screen>
<screen>
\_ round-robin 0 [first]
  \_ 1:0:1:2 sdav 66:240  [ready ]
  \_ 0:0:1:2 sdr  65:16   [ready ]
</screen>
<screen>
\_ round-robin 0 
  \_ 1:0:0:2 sdag 66:0    [ready ]
  \_ 0:0:0:2 sdc   8:32   [ready ] 
</screen>
    <para>
     Paths are grouped into priority groups. Only one priority group is in
     active use at a time. To model an active/active configuration, all
     paths end in the same group. To model active/passive configuration, the
     paths that should not be active in parallel are placed in several
     distinct priority groups. This normally happens automatically on device
     discovery.
    </para>
    <para>
     The output shows the order, the scheduling policy used to balance I/O
     within the group, and the paths for each priority group. For each path,
     its physical address (host:bus:target:lun), device node name,
     major:minor number, and state is shown.
    </para>
    <para>
     By using a verbosity level of -v3 in the dry run, you can see all
     detected paths, multipaths, and device maps. Both WWID and device node
     blacklisted devices are displayed.
    </para>
<screen>
multipath -v3 d
</screen>
    <para role="intro">
     The following is an example of -v3 output on a 64-bit SLES 11 SP2
     server with two Qlogic HBA connected to a Xiotech Magnitude 3000 SAN.
     Some multiple entries have been omitted to shorten the example.
    </para>
<screen>
dm-22: device node name blacklisted
&lt; content omitted &gt;
loop7: device node name blacklisted
&lt; content omitted &gt;
md0: device node name blacklisted
&lt; content omitted &gt;
dm-0: device node name blacklisted
sdf: not found in pathvec
sdf: mask = 0x1f
sdf: dev_t = 8:80
sdf: size = 105005056
sdf: subsystem = scsi
sdf: vendor = XIOtech
sdf: product = Magnitude 3D
sdf: rev = 3.00
sdf: h:b:t:l = 1:0:0:2
sdf: tgt_node_name = 0x202100d0b2028da
sdf: serial = 000028DA0014
sdf: getuid= "/lib/udev/scsi_id --whitelisted --device=/dev/%n" (config file default)
sdf: uid = 200d0b2da28001400 (callout)
sdf: prio = const (config file default)
sdf: const prio = 1
&lt; content omitted &gt;
ram15: device node name blacklisted
&lt; content omitted &gt;
===== paths list =====
uuid              hcil    dev dev_t pri dm_st  chk_st  vend/prod/rev
200d0b2da28001400 1:0:0:2 sdf 8:80  1   [undef][undef] XIOtech,Magnitude 3D
200d0b2da28005400 1:0:0:1 sde 8:64  1   [undef][undef] XIOtech,Magnitude 3D
200d0b2da28004d00 1:0:0:0 sdd 8:48  1   [undef][undef] XIOtech,Magnitude 3D
200d0b2da28001400 0:0:0:2 sdc 8:32  1   [undef][undef] XIOtech,Magnitude 3D
200d0b2da28005400 0:0:0:1 sdb 8:16  1   [undef][undef] XIOtech,Magnitude 3D
200d0b2da28004d00 0:0:0:0 sda 8:0   1   [undef][undef] XIOtech,Magnitude 3D
params = 0 0 2 1 round-robin 0 1 1 8:80 1000 round-robin 0 1 1 8:32 1000
status = 2 0 0 0 2 1 A 0 1 0 8:80 A 0 E 0 1 0 8:32 A 0
sdf: mask = 0x4
sdf: path checker = directio (config file default)
directio: starting new request
directio: async io getevents returns 1 (errno=Success)
directio: io finished 4096/0
sdf: state = 2
&lt; content omitted &gt;
</screen>
   </sect2>

   <sect2 id="bbj8y2r">
    <title>Applying the /etc/multipath.conf File Changes to Update the Multipath Maps</title>
    <para>
     Changes to the <filename>/etc/multipath.conf</filename> file cannot
     take effect when <command>multipathd</command> is running. After you
     make changes, save and close the file, then do the following to apply
     the changes and update the multipath maps:
    </para>
    <procedure id="bbj8ync">
     <step id="bbj8ynd">
      <para>
       Stop the <command>multipathd</command> service.
      </para>
     </step>
     <step id="bbj8zk2">
      <para>
       Clear old multipath bindings by entering
      </para>
<screen>
/sbin/multipath -F
</screen>
     </step>
     <step id="bbj91hd">
      <para>
       Create new multipath bindings by entering
      </para>
<screen>
/sbin/multipath -v2 -l
</screen>
     </step>
     <step id="bbj8zu9">
      <para>
       Start the <command>multipathd</command> service.
      </para>
     </step>
     <step id="bi0ay0m">
      <para>
       Run <command>dracut -f</command> to re-create the
       <filename>initrd</filename> image on your system, then reboot in
       order for the changes to take effect.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
  <sect1 id="bbj68de">
   <title>Configuring Default Policies for Polling, Queueing, and Failback</title>

   <para>
    The goal of multipath I/O is to provide connectivity fault tolerance
    between the storage system and the server. The desired default behavior
    depends on whether the server is a standalone server or a node in a
    high-availability cluster.
   </para>

   <para>
    When you configure multipath I/O for a stand-alone server, the
    <literal>no_path_retry</literal> setting protects the server operating
    system from receiving I/O errors as long as possible. It queues messages
    until a multipath failover occurs and provides a healthy connection.
   </para>

   <para>
    When you configure multipath I/O for a node in a high-availability
    cluster, you want multipath to report the I/O failure in order to
    trigger the resource failover instead of waiting for a multipath
    failover to be resolved. In cluster environments, you must modify the
    <literal>no_path_retry </literal>setting so that the cluster node
    receives an I/O error in relation to the cluster verification process
    (recommended to be 50% of the heartbeat tolerance) if the connection is
    lost to the storage system. In addition, you want the multipath I/O fail
    back to be set to manual in order to avoid a ping-pong of resources
    because of path failures.
   </para>

   <para>
    The <filename>/etc/multipath.conf</filename> file should contain a
    <command>defaults</command> section where you can specify default
    behaviors for polling, queueing, and failback. If the field is not
    otherwise specified in a <command>device</command> section, the default
    setting is applied for that SAN configuration.
   </para>

   <para role="intro">
    The following are the compiled in default settings. They will be used
    unless you overwrite these values by creating and configuring a
    personalized <filename>/etc/multipath.conf</filename> file.
   </para>

<screen>
defaults {
  verbosity 2
#  udev_dir is deprecated in SLES 11 SP3
#  udev_dir              /dev
  polling_interval      5
#  path_selector default value is service-time in SLES 11 SP3
#  path_selector         "round-robin 0"
  path selector         "service-time 0"
  path_grouping_policy  failover
#  getuid_callout is deprecated in SLES 11 SP3 and replaced with uid_attribute
#  getuid_callout        "/lib/udev/scsi_id --whitelisted --device=/dev/%n"
#  uid_attribute is new in SLES 11 SP3
  uid_attribute         "ID_SERIAL"
  prio                  "const"
  prio_args             ""
  features              "0"
  path_checker          "directio"
  alias_prefix          "mpath"
  rr_min_io_rq          1
  max_fds               "max"
  rr_weight             "uniform"
  queue_without_daemon  "yes"
  flush_on_last_del     "no"
  user_friendly_names   "no"
  fast_io_fail_tmo      5
  bindings_file         "/etc/multipath/bindings"
  wwids_file            "/etc/multipath/wwids"
  log_checker_err       "always"
  retain_attached_hw_handler  "no"
  detect_prio           "no"
  failback              "manual"
  no_path_retry         "fail"
  }
</screen>

   <para>
    For information about setting the polling, queuing, and failback
    policies, see the following parameters in
    <xref linkend="bbi89rh" xrefstyle="SectTitleOnPage"/>:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <xref linkend="b122w0sa" xrefstyle="HeadingOnPage"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="b122sbgo" xrefstyle="HeadingOnPage"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="b122sbgh" xrefstyle="HeadingOnPage"/>
     </para>
    </listitem>
   </itemizedlist>

   <para>
    If you modify the settings in the <literal>defaults</literal> section,
    the changes are not applied until you update the multipath maps, or
    until the multipathd daemon is restarted, such as at system restart.
   </para>
  </sect1>
  <sect1 id="bbj5x7z">
   <title>Blacklisting Non-Multipath Devices</title>

   <para>
    The <filename>/etc/multipath.conf</filename> file should contain a
    <command>blacklist</command> section where all non-multipath devices are
    listed. You can blacklist devices by WWID (<literal>wwid</literal>
    keyword), device name (<literal>devnode</literal> keyword), or device
    type (<literal>device</literal> section). You can also use the
    <literal>blacklist_exceptions</literal> section to enable multipath for
    some devices that are blacklisted by the regular expressions used in the
    <literal>blacklist</literal> section.
   </para>

   <para>
    You typically ignore non-multipathed devices, such as hpsa, fd, hd, md,
    dm, sr, scd, st, ram, raw, and loop. For example, local IDE hard drives
    and USB drives do not normally have multiple paths. If you want
    <command>multipath</command> to ignore single-path devices, put them in
    the <command>blacklist</command> section.
   </para>

   <note>
    <title>Compatibility</title>
    <para>
     The keyword <literal>devnode_blacklist</literal> has been deprecated
     and replaced with the keyword <literal>blacklist</literal>.
    </para>
    <para>
     With &sls; 12 the glibc-provided regular expressions are used. To match
     an arbitrary string, you must now use <literal>".*"</literal> rather
     than just <literal>"*"</literal>.
    </para>
   </note>

   <para>
    For example, to blacklist local devices and all arrays from the
    <filename>hpsa</filename> driver from being managed by multipath, the
    <command>blacklist</command> section looks like this:
   </para>

<screen>
blacklist {
      wwid "26353900f02796769"
      devnode "^(ram|raw|loop|fd|md|dm-|sr|scd|st)[0-9]*"
      devnode "^sd[a-z][0-9]*"
}
</screen>

   <para>
    You can also blacklist only the partitions from a driver instead of the
    entire array. For example, you can use the following regular expression
    to blacklist only partitions from the cciss driver and not the entire
    array:
   </para>

<screen>
blacklist {
      devnode "^cciss!c[0-9]d[0-9]*[p[0-9]*]"
}
</screen>

   <para>
    You can blacklist by specific device types by adding a
    <literal>device</literal> section in the blacklist, and using the
    <literal>vendor</literal> and <literal>product</literal> keywords.
   </para>

<screen>
blacklist {
      device {
           vendor  "DELL"
           product ".*"
       }
}
</screen>

   <para>
    You can use a <literal>blacklist_exceptions</literal> section to enable
    multipath for some devices that were blacklisted by the regular
    expressions used in the <literal>blacklist</literal> section. You add
    exceptions by WWID (<literal>wwid</literal> keyword), device name
    (<literal>devnode</literal> keyword), or device type
    (<literal>device</literal> section). You must specify the exceptions in
    the same way that you blacklisted the corresponding devices. That is,
    <literal>wwid</literal> exceptions apply to a <literal>wwid</literal>
    blacklist, <literal>devnode</literal> exceptions apply to a
    <literal>devnode</literal> blacklist, and device type exceptions apply
    to a device type blacklist.
   </para>

   <para>
    For example, you can enable multipath for a desired device type when you
    have different device types from the same vendor. Blacklist all of the
    vendor’s device types in the <literal>blacklist</literal> section, and
    then enable multipath for the desired device type by adding a
    <literal>device</literal> section in a
    <literal>blacklist_exceptions</literal> section.
   </para>

<screen>
blacklist {
      devnode "^(ram|raw|loop|fd|md|dm-|sr|scd|st|sda)[0-9]*"
      device {
           vendor  "DELL"
           product ".*"
       }
}

blacklist_exceptions {
      device {
           vendor  "DELL"
           product "MD3220i"
       }
}
</screen>

   <para>
    You can also use the blacklist_exceptions to enable multipath only for
    specific devices. For example:
   </para>

<screen>
blacklist {
      wwid ".*"
}

blacklist_exceptions {
        wwid "3600d0230000000000e13955cc3751234"
        wwid "3600d0230000000000e13955cc3751235"
}
</screen>

   <para>
    After you modify the <filename>/etc/multipath.conf</filename> file, you
    must run <command>dracut <option>-f</option></command> to re-create the
    <filename>initrd</filename> on your system, then restart the server in
    order for the changes to take effect.
   </para>

   <para>
    After you do this, the local devices should no longer be listed in the
    multipath maps when you issue the <command>multipath -ll</command>
    command.
   </para>
  </sect1>
  <sect1 id="mpionames">
   <title>Configuring User-Friendly Names or Alias Names</title>

   <para role="intro">
    A multipath device can be identified by its WWID, by a user-friendly
    name, or by an alias that you assign for it. Before you begin, review
    the requirements in
    <xref linkend="mpiousingdev" xrefstyle="SectTitleOnPage"/>.
   </para>

   <important>
    <para>
     Because device node names in the form of <filename>/dev/sdn</filename>
     and <filename>/dev/dm-n</filename> can change on reboot, referring to
     multipath devices by their WWID is preferred. You can also use a
     user-friendly name or alias that is mapped to the WWID in order to
     identify the device uniquely across reboots.
    </para>
   </important>

   <para>
    <xref linkend="bq7xokx" xrefstyle="TableXRef"/> describes the types of
    device names that can be used for a device in the
    <filename>/etc/multipath.conf</filename> file. For an example of
    <filename>multipath.conf</filename> settings, see the
    <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.synthetic</filename>
    file.
   </para>

   <table id="bq7xokx" frame="topbot" rowsep="1" pgwide="0">
    <title>Comparison of Multipath Device Name Types</title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="1667*"/>
     <colspec colnum="2" colname="2" colwidth="8334*"/>
     <thead>
      <row id="bq7xoky">
       <entry>
        <para>
         Name Types
        </para>
       </entry>
       <entry>
        <para>
         Description
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row id="bq7xokz">
       <entry>
        <para>
         WWID (default)
        </para>
       </entry>
       <entry>
        <para>
         The serial WWID (Worldwide Identifier) is an identifier for the
         multipath device that is guaranteed to be globally unique and
         unchanging. The default name used in multipathing is the ID of the
         logical unit as found in the <filename>/dev/disk/by-id</filename>
         directory. For example, a device with the WWID of
         <literal>3600508e0000000009e6baa6f609e7908</literal> is listed as
         <filename>/dev/disk/by-id/scsi-3600508e0000000009e6baa6f609e7908</filename>.
        </para>
       </entry>
      </row>
      <row id="bq7xol0">
       <entry>
        <para>
         User-friendly
        </para>
       </entry>
       <entry>
        <para>
         The Device Mapper Multipath device names in the
         <filename>/dev/mapper</filename> directory also reference the ID of
         the logical unit. These multipath device names are user-friendly
         names in the form of
         <filename>/dev/mapper/mpath&lt;<replaceable>n</replaceable>&gt;</filename>,
         such as <filename>/dev/mapper/mpath0</filename>. The names are
         unique and persistent because they use the
         <filename>/var/lib/multipath/bindings</filename> file to track the
         association between the UUID and user-friendly names.
        </para>
       </entry>
      </row>
      <row id="bq7xol1">
       <entry>
        <para>
         Alias
        </para>
       </entry>
       <entry>
        <para>
         An alias name is a globally unique name that the administrator
         provides for a multipath device. Alias names override the WWID and
         the user-friendly <filename>/dev/mapper/mpathN</filename> names.
        </para>
        <para>
         If you are using user_friendly_names, do not set the alias to
         mpathN format. This may conflict with an automatically assigned
         user friendly name, and give you incorrect device node names.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

   <para>
    The global multipath <literal>user_friendly_names</literal> option in
    the <filename>/etc/multipath.conf</filename> file is used to enable or
    disable the use of user-friendly names for multipath devices. If it is
    set to “no” (the default), multipath uses the WWID as the name of
    the device. If it is set to “yes”, multipath uses the
    <filename>/var/lib/multipath/bindings</filename> file to assign a
    persistent and unique name to the device in the form of
    <filename>mpath&lt;<replaceable>n</replaceable>&gt;</filename> in the
    <filename>/dev/mapper </filename>directory. The <literal>bindings
    file</literal> option in the <literal>/etc/multipath.conf</literal> file
    can be used to specify an alternate location for the
    <filename>bindings</filename> file.
   </para>

   <para>
    The global multipath <literal>alias</literal> option in the
    <filename>/etc/multipath.conf</filename> file is used to explicitly
    assign a name to the device. If an alias name is set up for a multipath
    device, the alias is used instead of the WWID or the user-friendly name.
   </para>

   <para>
    Using the <literal>user_friendly_names</literal> option can be
    problematic in the following situations:
   </para>

   <itemizedlist>
    <listitem>
     <formalpara id="bq7wtcr" role="intro">
      <title>Root Device Is Using Multipath:</title>
      <para>
       If the system root device is using multipath and you use the
       <literal>user_friendly_names</literal> option, the user-friendly
       settings in the <filename>/var/lib/multipath/bindings</filename> file
       are included in the <filename>initrd</filename>. If you later change
       the storage setup, such as by adding or removing devices, there is a
       mismatch between the bindings setting inside the
       <filename>initrd</filename> and the bindings settings in
       <filename>/var/lib/multipath/bindings</filename>.
      </para>
     </formalpara>
     <warning>
      <para>
       A bindings mismatch between <filename>initrd</filename> and
       <filename>/var/lib/multipath/bindings</filename> can lead to a wrong
       assignment of mount points to devices, which can result in file
       system corruption and data loss.
      </para>
     </warning>
     <para>
      To avoid this problem, we recommend that you use the default WWID
      settings for the system root device. You should not use aliases for
      the system root device. Because the device name would differ, using an
      alias causes you to lose the ability to seamlessly switch off
      multipathing via the kernel command line.
     </para>
    </listitem>
    <listitem>
     <formalpara id="bq7uui0">
      <title>Mounting /var from Another Partition:</title>
      <para>
       The default location of the <literal>user_friendly_names</literal>
       configuration file is
       <filename>/var/lib/multipath/bindings</filename>. If the
       <filename>/var</filename> data is not located on the system root
       device but mounted from another partition, the
       <filename>bindings</filename> file is not available when setting up
       multipathing.
      </para>
     </formalpara>
     <para>
      Ensure that the <filename>/var/lib/multipath/bindings</filename> file
      is available on the system root device and multipath can find it. For
      example, this can be done as follows:
     </para>
     <orderedlist>
      <listitem>
       <para>
        Move the <filename>/var/lib/multipath/bindings</filename> file to
        <filename>/etc/multipath/bindings</filename>.
       </para>
      </listitem>
      <listitem>
       <para>
        Set the <literal>bindings_file</literal> option in the
        <literal>defaults</literal> section of
        /<filename>etc/multipath.conf</filename> to this new location. For
        example:
       </para>
<screen>
defaults {
               user_friendly_names yes
               bindings_file "/etc/multipath/bindings"
}
</screen>
      </listitem>
     </orderedlist>
    </listitem>
    <listitem>
     <formalpara id="bq7wpfj" role="intro">
      <title>Multipath Is in the initrd:</title>
      <para>
       Even if the system root device is not on multipath, it is possible
       for multipath to be included in the <filename>initrd</filename>. For
       example, this can happen of the system root device is on LVM. If you
       use the <literal>user_friendly_names</literal> option and multipath
       is in the <filename>initrd</filename>, you should boot with the
       parameter <command>multipath=off</command> to avoid problems.
      </para>
     </formalpara>
     <para>
      This disables multipath only in the <filename>initrd</filename> during
      system boots. After the system boots, the
      <filename>boot.multipath</filename> and
      <filename>multipathd</filename> boot scripts are able to activate
      multipathing.
     </para>
    </listitem>
   </itemizedlist>

   <para>
    To enable user-friendly names or to specify aliases:
   </para>

   <procedure id="b7jqnux">
    <step id="b7jqqgl">
     <para>
      In a terminal console, log in as the &rootuser;
      user.
     </para>
    </step>
    <step id="b7jqp5o">
     <para>
      Open the <filename>/etc/multipath.conf</filename> file in a text
      editor.
     </para>
    </step>
    <step id="bq7y78q">
     <para role="intro">
      (Optional) Modify the location of the
      <filename>/var/lib/multipath/bindings</filename> file.
     </para>
     <para>
      The alternate path must be available on the system root device where
      multipath can find it.
     </para>
     <substeps>
      <step id="bq7y96x">
       <para>
        Move the <filename>/var/lib/multipath/bindings</filename> file to
        <filename>/etc/multipath/bindings</filename>.
       </para>
      </step>
      <step id="bq7y96y">
       <para>
        Set the <literal>bindings_file</literal> option in the
        <literal>defaults</literal> section of
        /<filename>etc/multipath.conf</filename> to this new location. For
        example:
       </para>
<screen>
defaults {
               user_friendly_names yes
               bindings_file "/etc/multipath/bindings"
}
</screen>
      </step>
     </substeps>
    </step>
    <step id="b7jqp5q">
     <para>
      (Optional, not recommended) Enable user-friendly names:
     </para>
     <substeps>
      <step id="bq7xauk">
       <para>
        Uncomment the <literal>defaults</literal> section and its ending
        bracket.
       </para>
      </step>
      <step id="bq7xb1y">
       <para>
        Uncomment the <literal>user_friendly_names option</literal>, then
        change its value from No to Yes.
       </para>
       <para>
        For example:
       </para>
<screen>
## Use user friendly names, instead of using WWIDs as names.
defaults {
  user_friendly_names yes
}
</screen>
      </step>
     </substeps>
    </step>
    <step id="b7jrp3u">
     <para role="intro">
      (Optional) Specify your own names for devices by using the
      <command>alias</command> option in the <command>multipath</command>
      section.
     </para>
     <para role="intro">
      For example:
     </para>
<screen>
## Use alias names, instead of using WWIDs as names.
multipaths {
       multipath {
               wwid           36006048000028350131253594d303030
               alias             blue1
       }
       multipath {
               wwid           36006048000028350131253594d303041
               alias             blue2
       }
       multipath {
               wwid           36006048000028350131253594d303145
               alias             yellow1
       }
       multipath {
               wwid           36006048000028350131253594d303334
               alias             yellow2
       }
}
</screen>
    </step>
    <step id="b7jqp5r">
     <para>
      Save your changes, then close the file.
     </para>
     <para>
      The changes are not applied until you update the multipath maps, or
      until the multipathd daemon is restarted, such as at system restart.
     </para>
    </step>
   </procedure>
  </sect1>
  <sect1 id="bkj8n9w">
   <title>Configuring Default Settings for zSeries Devices</title>

   <para>
    Testing of the IBM zSeries device with multipathing has shown that the
    dev_loss_tmo parameter should be set to 90 seconds, and the
    fast_io_fail_tmo parameter should be set to 5 seconds. If you are using
    zSeries devices, modify the <filename>/etc/multipath.conf</filename>
    file to specify the values as follows:
   </para>

<screen>
defaults {
       dev_loss_tmo 90
       fast_io_fail_tmo 5
}
</screen>

   <para>
    The dev_loss_tmo parameter sets the number of seconds to wait before
    marking a multipath link as bad. When the path fails, any current I/O on
    that failed path fails. The default value varies according to the device
    driver being used. The valid range of values is 0 to 600 seconds. To use
    the driver’s internal timeouts, set the value to zero (0) or to any
    value greater than 600.
   </para>

   <para>
    The fast_io_fail_tmo parameter sets the length of time to wait before
    failing I/O when a link problem is detected. I/O that reaches the driver
    fails. If I/O is in a blocked queue, the I/O does not fail until the
    dev_loss_tmo time elapses and the queue is unblocked.
   </para>

   <para>
    If you modify the <filename>/etc/multipath.conf</filename> file, the
    changes are not applied until you update the multipath maps, or until
    the multipathd daemon is restarted, such as at system restart.
   </para>
  </sect1>
  <sect1 id="bbi89rh">
   <title>Configuring Path Failover Policies and Priorities</title>

   <para>
    In a Linux host, when there are multiple paths to a storage controller,
    each path appears as a separate block device, and results in multiple
    block devices for single LUN. The Device Mapper Multipath service
    detects multiple paths with the same LUN ID, and creates a new multipath
    device with that ID. For example, a host with two HBAs attached to a
    storage controller with two ports via a single unzoned Fibre Channel
    switch sees four block devices: <filename>/dev/sda</filename>,
    <filename>/dev/sdb</filename>, <filename>/dev/sdc</filename>, and
    <filename>/dev/sdd</filename>. The Device Mapper Multipath service
    creates a single block device, <filename>/dev/mpath/mpath1</filename>
    that reroutes I/O through those four underlying block devices.
   </para>

   <para>
    This section describes how to specify policies for failover and
    configure priorities for the paths.
   </para>

   <sect2 id="beep0mu">
    <title>Configuring the Path Failover Policies</title>
    <para>
     Use the <command>multipath</command> command with the -p option to set
     the path failover policy:
    </para>
<screen>
multipath <replaceable>devicename</replaceable> -p <replaceable>policy</replaceable> 
</screen>
    <para role="intro">
     Replace <replaceable>policy</replaceable> with one of the following
     policy options:
    </para>
    <table id="beg1vn7" frame="topbot" rowsep="1" pgwide="0">
     <title>Group Policy Options for the multipath -p Command</title>
     <tgroup cols="2">
      <colspec colnum="1" colname="1" colwidth="2381*"/>
      <colspec colnum="2" colname="2" colwidth="7620*"/>
      <thead>
       <row id="beg1vn8">
        <entry>
         <para>
          Policy Option
         </para>
        </entry>
        <entry>
         <para>
          Description
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row id="beg1vn9">
        <entry>
         <para>
          failover
         </para>
        </entry>
        <entry>
         <para>
          (Default) One path per priority group.
         </para>
        </entry>
       </row>
       <row id="beg1vna">
        <entry>
         <para>
          multibus
         </para>
        </entry>
        <entry>
         <para>
          All paths in one priority group.
         </para>
        </entry>
       </row>
       <row id="beg1vnb">
        <entry>
         <para>
          group_by_serial
         </para>
        </entry>
        <entry>
         <para>
          One priority group per detected serial number.
         </para>
        </entry>
       </row>
       <row id="beg1vnc">
        <entry>
         <para>
          group_by_prio
         </para>
        </entry>
        <entry>
         <para>
          One priority group per path priority value. Priorities are
          determined by callout programs specified as a global,
          per-controller, or per-multipath option in the
          <filename>/etc/multipath.conf</filename> configuration file.
         </para>
        </entry>
       </row>
       <row id="beg1vnd">
        <entry>
         <para>
          group_by_node_name
         </para>
        </entry>
        <entry>
         <para>
          One priority group per target node name. Target node names are
          fetched in the<filename>
          /sys/class/fc_transport/target*/node_name</filename> location.
         </para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 id="bbi89xy">
    <title>Configuring Failover Priorities</title>
    <para>
     You must manually enter the failover priorities for the device in the
     <filename>/etc/multipath.conf</filename> file. Examples for all
     settings and options can be found in the
     <filename>/usr/share/doc/packages/multipath-tools/multipath.conf.annotated</filename>
     file.
    </para>
    <para>
     If you modify the <filename>/etc/multipath.conf</filename> file, the
     changes are not automatically applied when you save the file. For
     information, see
     <xref linkend="mpiohwsupconf" xrefstyle="SectTitleOnPage"/> and
     <xref linkend="bbj8y2r" xrefstyle="SectTitleOnPage"/>.
    </para>
    <sect3 id="beg263n">
     <title>Understanding Priority Groups and Attributes</title>
     <para>
      A <emphasis>priority group</emphasis> is a collection of paths that go
      to the same physical LUN. By default, I/O is distributed in a
      round-robin fashion across all paths in the group. The
      <command>multipath</command> command automatically creates priority
      groups for each LUN in the SAN based on the
      <literal>path_grouping_policy</literal> setting for that SAN. The
      <command>multipath</command> command multiplies the number of paths in
      a group by the group’s priority to determine which group is the
      primary. The group with the highest calculated value is the primary.
      When all paths in the primary group are failed, the priority group
      with the next highest value becomes active.
     </para>
     <para>
      A <emphasis>path priority</emphasis> is an integer value assigned to a
      path. The higher the value, the higher the priority is. An external
      program is used to assign priorities for each path. For a given
      device, the paths with the same priorities belong to the same priority
      group.
     </para>
     <para>
      Multipath Tools 0.4.9 for SLES 11 SP2 uses the <literal>prio</literal>
      setting in the <literal>defaults{}</literal> or
      <literal>devices{}</literal> section of the
      <filename>/etc/multipath.conf</filename> file. It silently ignores the
      keyword <literal>prio</literal> when it is specified for an individual
      <literal>multipath</literal> definition in the
      <literal>multipaths{)</literal> section. Multipath Tools 0.4.8 for
      SLES 11 SP1 and earlier allows the prio setting in the individual
      <literal>multipath</literal> definition in the
      <literal>multipaths{)</literal> section to override the
      <literal>prio</literal> settings in the <literal>defaults{}</literal>
      or <literal>devices{}</literal> section.
     </para>
     <para>
      The syntax for the <literal>prio</literal> keyword in the
      <filename>/etc/multipath.conf</filename> file is changed in
      <filename>multipath-tools-0.4.9</filename>. The
      <literal>prio</literal> line specifies the prioritizer. If the
      prioritizer requires an argument, you specify the argument by using
      the <literal>prio_args</literal> keyword on a second line. Previously,
      the prioritizer and its arguments were included on the
      <literal>prio</literal> line.
     </para>
     <bridgehead id="b15gvvaa">PRIO Settings for the Defaults or Devices Sections</bridgehead>
     <variablelist>
      <varlistentry id="b122w59j">
       <term>prio</term>
       <listitem>
        <para>
         Specifies the prioritizer program to call to obtain a path priority
         value. Weights are summed for each path group to determine the next
         path group to use in case of failure.
        </para>
        <para>
         Use the <literal>prio_args</literal> keyword to specify arguments
         if the specified prioritizer requires arguments.
        </para>
        <formalpara id="b122w59k" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         If no <literal>prio</literal> keyword is specified, all paths are
         equal. The default setting is “const” with a
         <literal>prio_args</literal> setting with no value.
        </para>
<screen>
prio      "const"
prio_args ""
</screen>
        <para>
         Example prioritizer programs include:
        </para>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2907*"/>
          <colspec colnum="2" colname="2" colwidth="7096*"/>
          <thead>
           <row id="b122xdcu">
            <entry>
             <para>
              Prioritizer Program
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122xdcv">
            <entry>
             <para>
              alua
             </para>
            </entry>
            <entry>
             <para>
              Generates path priorities based on the SCSI-3 ALUA settings.
             </para>
            </entry>
           </row>
           <row id="b122xdcw">
            <entry>
             <para>
              const
             </para>
            </entry>
            <entry>
             <para>
              Generates the same priority for all paths.
             </para>
            </entry>
           </row>
           <row id="b122xdcx">
            <entry>
             <para>
              emc
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for EMC arrays.
             </para>
            </entry>
           </row>
           <row id="b122xdcy">
            <entry>
             <para>
              hdc
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for Hitachi HDS Modular storage
              arrays.
             </para>
            </entry>
           </row>
           <row id="b122xdcz">
            <entry>
             <para>
              hp_sw
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for Compaq/HP controller in
              active/standby mode.
             </para>
            </entry>
           </row>
           <row id="b122xdd0">
            <entry>
             <para>
              ontap
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for NetApp arrays.
             </para>
            </entry>
           </row>
           <row id="b122xdd1">
            <entry>
             <para>
              random
             </para>
            </entry>
            <entry>
             <para>
              Generates a random priority for each path.
             </para>
            </entry>
           </row>
           <row id="b122xdd2">
            <entry>
             <para>
              rdac
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for LSI/Engenio RDAC controller.
             </para>
            </entry>
           </row>
           <row id="b122xdd3">
            <entry>
             <para>
              weightedpath
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority based on the weighted values you
              specify in the arguments for <literal>prio_args</literal>,
              such as:
             </para>
<screen>
&lt;hbtl|devname&gt; &lt;<replaceable>regex1</replaceable>&gt; &lt;<replaceable>prio1</replaceable>&gt; &lt;<replaceable>regex2</replaceable>&gt; &lt;<replaceable>prio2</replaceable>&gt;...
</screen>
             <para>
              The <literal>hbtl regex</literal> argument format uses the
              SCSI <literal>H:B:T:L</literal> notation (such as
              <literal>1:0:.:.</literal> and <literal>*:0:0:.</literal>)
              with a weight value, where H, B, T, L are the host, bus,
              target, and LUN IDs for a device. For example:
             </para>
<screen>
prio "weightedpath"
prio_args "hbtl 1:.:.:. 2 4:.:.:. 4"
</screen>
             <para>
              The devname regex argument format uses a device node name with
              a weight value for each device. For example:
             </para>
<screen>
prio "weightedpath"
prio_args "devname sda 50 sde 10 sdc 50 sdf 10"
</screen>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122w59l">
       <term>prio_args</term>
       <listitem>
        <para>
         Specifies the arguments for the specified prioritizer program that
         requires arguments. Most <literal>prio</literal> programs do not
         need arguments.
        </para>
        <formalpara id="b122w59m" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         There is no default. The value depends on the
         <literal>prio</literal> setting and whether the prioritizer
         requires arguments.
        </para>
<screen>
prio      "const"
prio_args ""
</screen>
       </listitem>
      </varlistentry>
     </variablelist>
     <bridgehead id="b15gvvab">Multipath Attributes</bridgehead>
     <para>
      Multipath attributes are used to control the behavior of multipath I/O
      for devices. You can specify attributes as defaults for all multipath
      devices. You can also specify attributes that apply only to a given
      multipath device by creating an entry for that device in the
      <literal>multipaths</literal> section of the multipath configuration
      file.
     </para>
     <variablelist>
      <varlistentry id="b122sbg9">
       <term>user_friendly_names</term>
       <listitem>
        <para>
         Specifies whether to use world-wide IDs (WWIDs) or to use the
         <filename>/var/lib/multipath/bindings</filename> file to assign a
         persistent and unique alias to the multipath devices in the form of
         <filename>/dev/mapper/mpathN</filename>.
        </para>
        <para>
         This option can be used in the <literal>devices</literal> section
         and the <literal>multipaths</literal> section.
        </para>
        <formalpara id="b122sbga" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122skbh">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122skbi">
            <entry>
             <para>
              no
             </para>
            </entry>
            <entry>
             <para>
              (Default) Use the WWIDs shown in the
              <filename>/dev/disk/by-id/</filename> location.
             </para>
            </entry>
           </row>
           <row id="b122skbj">
            <entry>
             <para>
              yes
             </para>
            </entry>
            <entry>
             <para>
              Autogenerate user-friendly names as aliases for the multipath
              devices instead of the actual ID.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgh">
       <term>failback</term>
       <listitem>
        <para>
         Specifies whether to monitor the failed path recovery, and
         indicates the timing for group failback after failed paths return
         to service.
        </para>
        <para>
         When the failed path recovers, the path is added back into the
         multipath enabled path list based on this setting. Multipath
         evaluates the priority groups, and changes the active priority
         group when the priority of the primary path exceeds the secondary
         group.
        </para>
        <formalpara id="b122sbgi" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122sm95">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122sm96">
            <entry>
             <para>
              manual
             </para>
            </entry>
            <entry>
             <para>
              (Default) The failed path is not monitored for recovery. The
              administrator runs the <command>multipath</command> command to
              update enabled paths and priority groups.
             </para>
            </entry>
           </row>
           <row id="b122sm97">
            <entry>
             <para>
              immediate
             </para>
            </entry>
            <entry>
             <para>
              When a path recovers, enable the path immediately.
             </para>
            </entry>
           </row>
           <row id="b122sm98">
            <entry>
             <para>
              n
             </para>
            </entry>
            <entry>
             <para>
              When the path recovers, wait <replaceable>n</replaceable>
              seconds before enabling the path. Specify an integer value
              greater than 0.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
        <para>
         We recommend failback setting of “manual” for multipath in
         cluster environments in order to prevent multipath failover
         ping-pong.
        </para>
<screen>
failback "manual"
</screen>
        <important>
         <para>
          Ensure that you verify the failback setting with your storage
          system vendor. Different storage systems can require different
          settings.
         </para>
        </important>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgm">
       <term>getuid_callout</term>
       <listitem>
        <para>
         The default program and arguments to call to obtain a unique path
         identifier. Specify the location with an absolute Linux path.
        </para>
        <para>
         This attribute is deprecated in SLES 11 SP3. It is replaced by the
         <link linkend="b15gvth2"><literal>uid_attribute</literal></link>.
        </para>
        <formalpara id="b122sbgn" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         The default location and arguments are:
        </para>
<screen>
/lib/udev/scsi_id -g -u -s
</screen>
        <para>
         Example:
        </para>
<screen>
getuid_callout "/lib/udev/scsi_id -g -u -d /dev/%n"

getuid_callout "/lib/udev/scsi_id --whitelisted --device=/dev/%n"
</screen>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgo">
       <term>no_path_retry</term>
       <listitem>
        <para>
         Specifies the behaviors to use on path failure.
        </para>
        <formalpara id="b122sbgp" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122sr39">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122sr3a">
            <entry>
             <para>
              n
             </para>
            </entry>
            <entry>
             <para>
              Specifies the number of retries until
              <command>multipath</command> stops the queuing and fails the
              path. Specify an integer value greater than 0.
             </para>
             <para>
              In a cluster, you can specify a value of “0” to prevent
              queuing and allow resources to fail over.
             </para>
            </entry>
           </row>
           <row id="b122sr3b">
            <entry>
             <para>
              fail
             </para>
            </entry>
            <entry>
             <para>
              Specifies immediate failure (no queuing).
             </para>
            </entry>
           </row>
           <row id="b122sr3c">
            <entry>
             <para>
              queue
             </para>
            </entry>
            <entry>
             <para>
              Never stop queuing (queue forever until the path comes alive).
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
        <para>
         We recommend a retry setting of “fail” or “0” in the
         <filename>/etc/multipath.conf</filename> file when working in a
         cluster. This causes the resources to fail over when the connection
         is lost to storage. Otherwise, the messages queue and the resource
         failover cannot occur.
        </para>
<screen>
no_path_retry "fail"
no_path_retry "0"
</screen>
        <important>
         <para>
          Ensure that you verify the retry settings with your storage system
          vendor. Different storage systems can require different settings.
         </para>
        </important>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgs">
       <term>path_checker</term>
       <listitem>
        <para role="intro">
         Determines the state of the path.
        </para>
        <formalpara id="b122sbgt" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122swb1">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122swb2">
            <entry>
             <para>
              directio
             </para>
            </entry>
            <entry>
             <para>
              (Default in <filename>multipath-tools</filename> version 0.4.8
              and later) Reads the first sector that has direct I/O. This is
              useful for DASD devices. Logs failure messages in the
              &systemd; journal (see <xref linkend="cha.journalctl"/>).
             </para>
            </entry>
           </row>
           <row id="b122swb3">
            <entry>
             <para>
              readsector0
             </para>
            </entry>
            <entry>
             <para>
              (Default in <filename>multipath-tools</filename> version 0.4.7
              and earlier; deprecated and replaced by
              <literal>directio</literal>.) Reads the first sector of the
              device. Logs failure messages in the &systemd; journal (see
              <xref linkend="cha.journalctl"/>).
             </para>
            </entry>
           </row>
           <row id="b122swb4">
            <entry>
             <para>
              tur
             </para>
            </entry>
            <entry>
             <para>
              Issues a SCSI test unit ready command to the device. This is
              the preferred setting if the LUN supports it. On failure, the
              command does not fill up the &systemd; log journal with
              messages.
             </para>
            </entry>
           </row>
           <row id="b122swb5">
            <entry>
             <para>
              <replaceable>custom_vendor_value</replaceable>
             </para>
            </entry>
            <entry>
             <para>
              Some SAN vendors provide custom path_checker options:
             </para>
             <itemizedlist>
              <listitem>
               <formalpara id="b122w9oz">
                <title>cciss_tur:</title>
                <para>
                 Checks the path state for HP Smart Storage Arrays.
                </para>
               </formalpara>
              </listitem>
              <listitem>
               <formalpara id="b122swb6">
                <title>emc_clariion:</title>
                <para>
                 Queries the EMC Clariion EVPD page 0xC0 to determine the
                 path state.
                </para>
               </formalpara>
              </listitem>
              <listitem>
               <formalpara id="b122swb7">
                <title>hp_sw:</title>
                <para>
                 Checks the path state (Up, Down, or Ghost) for HP storage
                 arrays with Active/Standby firmware.
                </para>
               </formalpara>
              </listitem>
              <listitem>
               <formalpara id="b122swb8">
                <title>rdac:</title>
                <para>
                 Checks the path state for the LSI/Engenio RDAC storage
                 controller.
                </para>
               </formalpara>
              </listitem>
             </itemizedlist>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgq">
       <term>path_grouping_policy</term>
       <listitem>
        <para role="intro">
         Specifies the path grouping policy for a multipath device hosted by
         a given controller.
        </para>
        <formalpara id="b122sbgr" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122swaq">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122swar">
            <entry>
             <para>
              failover
             </para>
            </entry>
            <entry>
             <para>
              (Default) One path is assigned per priority group so that only
              one path at a time is used.
             </para>
            </entry>
           </row>
           <row id="b122swas">
            <entry>
             <para>
              multibus
             </para>
            </entry>
            <entry>
             <para>
              All valid paths are in one priority group. Traffic is
              load-balanced across all active paths in the group.
             </para>
            </entry>
           </row>
           <row id="b122swat">
            <entry>
             <para>
              group_by_prio
             </para>
            </entry>
            <entry>
             <para>
              One priority group exists for each path priority value. Paths
              with the same priority are in the same priority group.
              Priorities are assigned by an external program.
             </para>
            </entry>
           </row>
           <row id="b122swau">
            <entry>
             <para>
              group_by_serial
             </para>
            </entry>
            <entry>
             <para>
              Paths are grouped by the SCSI target serial number (controller
              node WWN).
             </para>
            </entry>
           </row>
           <row id="b122swav">
            <entry>
             <para>
              group_by_node_name
             </para>
            </entry>
            <entry>
             <para>
              One priority group is assigned per target node name. Target
              node names are fetched in
              <filename>/sys/class/fc_transport/target*/node_name</filename>.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgu">
       <term>path_selector</term>
       <listitem>
        <para role="intro">
         Specifies the path-selector algorithm to use for load balancing.
        </para>
        <formalpara id="b122sbgv" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122t3po">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122t3pp">
            <entry>
             <para>
              round-robin 0
             </para>
            </entry>
            <entry>
             <para>
              (Default in SLES 11 SP2 and earlier) The load-balancing
              algorithm used to balance traffic across all active paths in a
              priority group.
             </para>
            </entry>
           </row>
           <row id="b122t3pr">
            <entry>
             <para>
              queue-length 0
             </para>
            </entry>
            <entry>
             <para>
              A dynamic load balancer that balances the number of in-flight
              I/O on paths similar to the least-pending option.
             </para>
            </entry>
           </row>
           <row id="b122t3ps">
            <entry>
             <para>
              service-time 0
             </para>
            </entry>
            <entry>
             <para>
              (Default in SLES 11 SP3 and later) A service-time oriented
              load balancer that balances I/O on paths according to the
              latency.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgw">
       <term>pg_timeout</term>
       <listitem>
        <para>
         Specifies path group timeout handling.
        </para>
        <formalpara id="b122sbgx" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         NONE (internal default)
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="b122w0sa">
       <term>polling_interval</term>
       <listitem>
        <para>
         Specifies the time in seconds between the end of one path checking
         cycle and the beginning of the next path checking cycle.
        </para>
        <formalpara id="b122w0sb" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         Specify an integer value greater than 0. The default value is 5.
         Ensure that you verify the polling_interval setting with your
         storage system vendor. Different storage systems can require
         different settings.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbgy">
       <term>prio_callout</term>
       <listitem>
        <para>
         Specifies the program and arguments to use to determine the layout
         of the multipath map.
        </para>
        <para>
         Multipath prio_callout programs are located in shared libraries in
         <filename>/lib/libmultipath/lib*</filename>. By using shared
         libraries, the callout programs are loaded into memory on daemon
         startup.
        </para>
        <para>
         When queried by the <command>multipath</command> command, the
         specified mpath_prio_* callout program returns the priority for a
         given path in relation to the entire multipath layout.
        </para>
        <para>
         When it is used with the path_grouping_policy of group_by_prio, all
         paths with the same priority are grouped into one multipath group.
         The group with the highest aggregate priority becomes the active
         group.
        </para>
        <para>
         When all paths in a group fail, the group with the next highest
         aggregate priority becomes active. Additionally, a failover command
         (as determined by the hardware handler) might be send to the
         target.
        </para>
        <para>
         The mpath_prio_* program can also be a custom script created by a
         vendor or administrator for a specified setup.
        </para>
        <itemizedlist>
         <listitem>
          <para>
           A <literal>%n</literal> in the command line expands to the device
           name in the <filename>/dev</filename> directory.
          </para>
         </listitem>
         <listitem>
          <para>
           A <literal>%b</literal> in the command line expands to the device
           number in <replaceable>major:minor</replaceable> format in the
           <filename>/dev</filename> directory.
          </para>
         </listitem>
         <listitem>
          <para>
           A <literal>%d</literal> in the command line expands to the device
           ID in the <filename>/dev/disk/by-id</filename> directory.
          </para>
         </listitem>
        </itemizedlist>
        <para>
         If devices are hot-pluggable, use the <literal>%d</literal> flag
         instead of <literal>%n</literal>. This addresses the short time
         that elapses between the time when devices are available and when
         <command>udev</command> creates the device nodes.
        </para>
        <formalpara id="b122sbgz" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122tqh2">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122tqh3">
            <entry>
             <para>
              (No value)
             </para>
            </entry>
            <entry>
             <para>
              If no <literal>prio_callout</literal> attribute is used, all
              paths are equal. This is the default.
             </para>
            </entry>
           </row>
           <row id="b122tqh4">
            <entry>
             <para>
              /bin/true
             </para>
            </entry>
            <entry>
             <para>
              Specify this value when the group_by_prio is not being used.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
        <para>
         The <command>prioritizer</command> programs generate path
         priorities when queried by the <command>multipath</command>
         command. The program names must begin with
         <filename>mpath_prio_</filename> and are named by the device type
         or balancing method used. Current prioritizer programs include the
         following:
        </para>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="3539*"/>
          <colspec colnum="2" colname="2" colwidth="6464*"/>
          <thead>
           <row id="b122tml8">
            <entry>
             <para>
              Prioritizer Program
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122tml9">
            <entry>
             <para>
              mpath_prio_alua %n
             </para>
            </entry>
            <entry>
             <para>
              Generates path priorities based on the SCSI-3 ALUA settings.
             </para>
            </entry>
           </row>
           <row id="b122tmla">
            <entry>
             <para>
              mpath_prio_balance_units
             </para>
            </entry>
            <entry>
             <para>
              Generates the same priority for all paths.
             </para>
            </entry>
           </row>
           <row id="b122tp25">
            <entry>
             <para>
              mpath_prio_emc %n
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for EMC arrays.
             </para>
            </entry>
           </row>
           <row id="b122tp26">
            <entry>
             <para>
              mpath_prio_hds_modular %b
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for Hitachi HDS Modular storage
              arrays.
             </para>
            </entry>
           </row>
           <row id="b122tp27">
            <entry>
             <para>
              mpath_prio_hp_sw %n
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for Compaq/HP controller in
              active/standby mode.
             </para>
            </entry>
           </row>
           <row id="b122tp28">
            <entry>
             <para>
              mpath_prio_netapp %n
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for NetApp arrays.
             </para>
            </entry>
           </row>
           <row id="b122tp29">
            <entry>
             <para>
              mpath_prio_random %n
             </para>
            </entry>
            <entry>
             <para>
              Generates a random priority for each path.
             </para>
            </entry>
           </row>
           <row id="b122tp2a">
            <entry>
             <para>
              mpath_prio_rdac %n
             </para>
            </entry>
            <entry>
             <para>
              Generates the path priority for LSI/Engenio RDAC controller.
             </para>
            </entry>
           </row>
           <row id="b122tp2b">
            <entry>
             <para>
              mpath_prio_tpc %n
             </para>
            </entry>
            <entry>
             <para>
              You can optionally use a script created by a vendor or
              administrator that gets the priorities from a file where you
              specify priorities to use for each path.
             </para>
            </entry>
           </row>
           <row id="b122tp2c">
            <entry>
             <para>
              mpath_prio_spec.sh %n
             </para>
            </entry>
            <entry>
             <para>
              Provides the path of a user-created script that generates the
              priorities for multipathing based on information contained in
              a second data file. (This path and filename are provided as an
              example. Specify the location of your script instead.) The
              script can be created by a vendor or administrator. The
              script’s target file identifies each path for all
              multipathed devices and specifies a priority for each path.
              For an example, see
              <xref linkend="bbj87iv" xrefstyle="SectTitleOnPage"/>.
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbh0">
       <term>rr_min_io</term>
       <listitem>
        <para>
         Specifies the number of I/O transactions to route to a path before
         switching to the next path in the same path group, as determined by
         the specified algorithm in the <literal>path_selector</literal>
         setting.
        </para>
        <para>
         The rr_min_io attribute is used only for kernels 2.6.31 and
         earlier. It is obsoleted in SLES 11 SP2 and replaced by the
         <literal>rr_min_io_rq</literal> attribute.
        </para>
        <formalpara id="b122sbh1" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         Specify an integer value greater than 0. The default value is 1000.
        </para>
<screen>
rr_min_io "1000"
</screen>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbh2">
       <term>rr_min_io_rq</term>
       <listitem>
        <para role="intro">
         Specifies the number of I/O requests to route to a path before
         switching to the next path in the current path group, using
         request-based device-mapper-multipath.
        </para>
        <para>
         This attribute is available for systems running SLES 11 SP2 and
         later. It replaces the rr_min_io attribute.
        </para>
        <formalpara id="b122sbh3" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <para>
         Specify an integer value greater than 0. The default value is 1.
        </para>
<screen>
rr_min_io_rq "1"
</screen>
       </listitem>
      </varlistentry>
      <varlistentry id="b122sbh4">
       <term>rr_weight</term>
       <listitem>
        <para role="intro">
         Specifies the weighting method to use for paths.
        </para>
        <formalpara id="b122sbh5" role="intro">
         <title>Values</title>
         <para/>
        </formalpara>
        <informaltable frame="topbot" rowsep="1" pgwide="0">
         <tgroup cols="2">
          <colspec colnum="1" colname="1" colwidth="2642*"/>
          <colspec colnum="2" colname="2" colwidth="7360*"/>
          <thead>
           <row id="b122tlbj">
            <entry>
             <para>
              Value
             </para>
            </entry>
            <entry>
             <para>
              Description
             </para>
            </entry>
           </row>
          </thead>
          <tbody>
           <row id="b122tlbk">
            <entry>
             <para>
              uniform
             </para>
            </entry>
            <entry>
             <para>
              (Default) All paths have the same round-robin weights.
             </para>
            </entry>
           </row>
           <row id="b122tlbl">
            <entry>
             <para>
              priorities
             </para>
            </entry>
            <entry>
             <para>
              Each path’s weight is determined by the path’s priority
              times the rr_min_io_rq setting (or the rr_min_io setting for
              kernels 2.6.31 and earlier).
             </para>
            </entry>
           </row>
          </tbody>
         </tgroup>
        </informaltable>
       </listitem>
      </varlistentry>
      <varlistentry id="b15gvth2">
       <term>uid_attribute</term>
       <listitem>
        <para>
         A udev attribute that provides a unique path identifier. The
         default value is <literal>ID_SERIAL</literal>.
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect3>
    <sect3 id="bbi8jjc">
     <title>Configuring for Round-Robin Load Balancing</title>
     <para>
      All paths are active. I/O is configured for some number of seconds or
      some number of I/O transactions before moving to the next open path in
      the sequence.
     </para>
    </sect3>
    <sect3 id="bbi8jjd">
     <title>Configuring for Single Path Failover</title>
     <para>
      A single path with the highest priority (lowest value setting) is
      active for traffic. Other paths are available for failover, but are
      not used unless failover occurs.
     </para>
    </sect3>
    <sect3 id="bbi8g9x">
     <title>Grouping I/O Paths for Round-Robin Load Balancing</title>
     <para>
      Multiple paths with the same priority fall into the active group. When
      all paths in that group fail, the device fails over to the next
      highest priority group. All paths in the group share the traffic load
      in a round-robin load balancing fashion.
     </para>
    </sect3>
   </sect2>

   <sect2 id="bbj87iv">
    <title>Using a Script to Set Path Priorities</title>
    <para>
     You can create a script that interacts with Device Mapper Multipath
     (DM-MPIO) to provide priorities for paths to the LUN when set as a
     resource for the <command>prio_callout</command> setting.
    </para>
    <para>
     First, set up a text file that lists information about each device and
     the priority values you want to assign to each path. For example, name
     the file <filename>/usr/local/etc/primary-paths</filename>. Enter one
     line for each path in the following format:
    </para>
<screen>
host_wwpn target_wwpn scsi_id priority_value
</screen>
    <para>
     Return a priority value for each path on the device. Ensure that the
     variable FILE_PRIMARY_PATHS resolves to a real file with appropriate
     data (host wwpn, target wwpn, scsi_id and priority value) for each
     device.
    </para>
    <para>
     The contents of the <filename>primary-paths</filename> file for a
     single LUN with eight paths each might look like this:
    </para>
<screen>
0x10000000c95ebeb4 0x200200a0b8122c6e 2:0:0:0 sdb 3600a0b8000122c6d00000000453174fc 50
</screen>
<screen>
0x10000000c95ebeb4 0x200200a0b8122c6e 2:0:0:1 sdc 3600a0b80000fd6320000000045317563 2
</screen>
<screen>
0x10000000c95ebeb4 0x200200a0b8122c6e 2:0:0:2 sdd 3600a0b8000122c6d0000000345317524 50
</screen>
<screen>
0x10000000c95ebeb4 0x200200a0b8122c6e 2:0:0:3 sde 3600a0b80000fd6320000000245317593 2
</screen>
<screen>
0x10000000c95ebeb4 0x200300a0b8122c6e 2:0:1:0 sdi 3600a0b8000122c6d00000000453174fc 5
</screen>
<screen>
0x10000000c95ebeb4 0x200300a0b8122c6e 2:0:1:1 sdj 3600a0b80000fd6320000000045317563 51
</screen>
<screen>
0x10000000c95ebeb4 0x200300a0b8122c6e 2:0:1:2 sdk 3600a0b8000122c6d0000000345317524 5
</screen>
<screen>
0x10000000c95ebeb4 0x200300a0b8122c6e 2:0:1:3 sdl 3600a0b80000fd6320000000245317593 51
</screen>
    <para>
     To continue the example mentioned in
     <xref linkend="b122sbgy" xrefstyle="HeadingOnPage"/>, create a script
     named <filename>/usr/local/sbin/path_prio.sh</filename>. You can use
     any path and filename. The script does the following:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       On query from multipath, grep the device and its path from the
       <filename>/usr/local/etc/primary-paths</filename> file.
      </para>
     </listitem>
     <listitem>
      <para>
       Return to multipath the priority value in the last column for that
       entry in the file.
      </para>
     </listitem>
    </itemizedlist>
   </sect2>

   <sect2 id="bbi8acn">
    <title>Configuring ALUA (mpath_prio_alua)</title>
    <para>
     The <command>mpath_prio_alua(8)</command> command is used as a priority
     callout for the Linux <command>multipath(8)</command> command. It
     returns a number that is used by DM-MPIO to group SCSI devices with the
     same priority together. This path priority tool is based on ALUA
     (Asynchronous Logical Unit Access).
    </para>
    <sect3 id="beg2eyu">
     <title>Syntax</title>
<screen>
mpath_prio_alua [-d <replaceable>directory</replaceable>] [-h] [-v] [-V] <replaceable>device</replaceable> [<replaceable>device</replaceable>...] 
</screen>
    </sect3>
    <sect3 id="beg2e1m">
     <title>Prerequisite</title>
     <para>
      SCSI devices.
     </para>
    </sect3>
    <sect3 id="bbj46qo">
     <title>Options</title>
     <variablelist>
      <varlistentry id="bbj46v3">
       <term>-d <replaceable>directory</replaceable>
       </term>
       <listitem>
        <para>
         Specifies the Linux directory path where the listed device node
         names can be found. The default directory is
         <filename>/dev</filename>. When you use this option, specify the
         device node name only (such as <filename>sda</filename>) for the
         device or devices you want to manage.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="bbj4am6">
       <term>-h</term>
       <listitem>
        <para>
         Displays help for this command, then exits.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="bbj4am7">
       <term>-v</term>
       <listitem>
        <para>
         Turns on verbose output to display status in human-readable format.
         Output includes information about which port group the specified
         device is in and its current state.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="bbj4am8">
       <term>-V</term>
       <listitem>
        <para>
         Displays the version number of this tool, then exits.
        </para>
       </listitem>
      </varlistentry>
      <varlistentry id="bbj4c17">
       <term><replaceable>device</replaceable> [<replaceable>device</replaceable>...] </term>
       <listitem>
        <para>
         Specifies the SCSI device (or multiple devices) that you want to
         manage. The device must be a SCSI device that supports the Report
         Target Port Groups (<command>sg_rtpg(8)</command>) command. Use one
         of the following formats for the device node name:
        </para>
        <itemizedlist>
         <listitem>
          <para>
           The full Linux directory path, such as
           <filename>/dev/sda</filename>. Do not use with the -d option.
          </para>
         </listitem>
         <listitem>
          <para>
           The device node name only, such as <filename>sda</filename>.
           Specify the directory path by using the -d option.
          </para>
         </listitem>
         <listitem>
          <para>
           The major and minor number of the device separated by a colon (:)
           with no spaces, such as <filename>8:0</filename>. This creates a
           temporary device node in the <filename>/dev</filename> directory
           with a name in the format of
           <filename>tmpdev-&lt;major&gt;:&lt;minor&gt;-&lt;pid&gt;</filename>.
           For example, <filename>/dev/tmpdev-8:0-&lt;pid&gt;</filename>.
          </para>
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>
     </variablelist>
    </sect3>
    <sect3 id="bbj4fvf">
     <title>Return Values</title>
     <para>
      On success, returns a value of 0 and the priority value for the group.
      <xref linkend="bbilsw8" xrefstyle="TableXRef"/> shows the priority
      values returned by the <command>mpath_prio_alua</command> command.
     </para>
     <table id="bbilsw8" frame="topbot" rowsep="1" pgwide="0">
      <title>ALUA Priorities for Device Mapper Multipath</title>
      <tgroup cols="2">
       <colspec colnum="1" colname="1" colwidth="2381*"/>
       <colspec colnum="2" colname="2" colwidth="7620*"/>
       <thead>
        <row id="bbiltgc">
         <entry>
          <para>
           Priority Value
          </para>
         </entry>
         <entry>
          <para>
           Description
          </para>
         </entry>
        </row>
       </thead>
       <tbody>
        <row id="bbiltgd">
         <entry>
          <para>
           50
          </para>
         </entry>
         <entry>
          <para>
           The device is in the active, optimized group.
          </para>
         </entry>
        </row>
        <row id="bbiltge">
         <entry>
          <para>
           10
          </para>
         </entry>
         <entry>
          <para>
           The device is in an active but non-optimized group.
          </para>
         </entry>
        </row>
        <row id="bbj4j3r">
         <entry>
          <para>
           1
          </para>
         </entry>
         <entry>
          <para>
           The device is in the standby group.
          </para>
         </entry>
        </row>
        <row id="bbiltgf">
         <entry>
          <para>
           0
          </para>
         </entry>
         <entry>
          <para>
           All other groups.
          </para>
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
     <para>
      Values are widely spaced because of the way the
      <command>multipath</command> command handles them. It multiplies the
      number of paths in a group with the priority value for the group, then
      selects the group with the highest result. For example, if a
      non-optimized path group has six paths (6 x 10 = 60) and the optimized
      path group has a single path (1 x 50 = 50), the non-optimized group
      has the highest score, so multipath chooses the non-optimized group.
      Traffic to the device uses all six paths in the group in a round-robin
      fashion.
     </para>
     <para>
      On failure, returns a value of 1 to 5 indicating the cause for the
      command’s failure. For information, see the man page for
      <command>mpath_prio_alua</command>.
     </para>
    </sect3>
   </sect2>

   <sect2 id="bbi8els">
    <title>Reporting Target Path Groups</title>
    <para>
     Use the SCSI Report Target Port Groups (<command>sg_rtpg(8)</command>)
     command. For information, see the man page for
     <command>sg_rtpg(8)</command>.
    </para>
   </sect2>
  </sect1>
  <sect1 id="mpioroot">
   <title>Configuring Multipath I/O for the Root Device</title>

   <para>
    Device Mapper Multipath I/O (DM-MPIO) is available and supported for
    <filename>/boot</filename> and <filename>/root</filename> in
    &productname;. In addition, the &yast; partitioner in the &yast; installer
    supports enabling multipath during the install.
   </para>

   <sect2 id="bp27t6u">
    <title>Enabling Multipath I/O at Install Time</title>
    <para>
     The multipath software must be running at install time if you want to
     install the operating system on a multipath device. The multipathd
     daemon is not automatically active during the system installation. You
     can start it by using the <guimenu>Configure Multipath</guimenu> option
     in the &yast; partitioner.
    </para>
    <sect3 id="bomcrff">
     <title>Enabling Multipath I/O at Install Time on an Active/Active Multipath Storage LUN</title>
     <procedure id="bomcrfg">
      <step id="bomcrfh">
       <para>
        During the install on the &yast; Installation Settings page, click on
        <guimenu>Partitioning</guimenu> to open the &yast; partitioner.
       </para>
      </step>
      <step id="bomcrfi">
       <para>
        Select <guimenu>Custom Partitioning (for experts)</guimenu>.
       </para>
      </step>
      <step id="bomcrfj">
       <para>
        Select the <guimenu>Hard Disks</guimenu> main icon, click the
        <guimenu>Configure</guimenu> button, then select <guimenu>Configure
        Multipath</guimenu>.
       </para>
      </step>
      <step id="bomcrfk">
       <para role="intro">
        Start multipath.
       </para>
       <para>
        &yast; starts to rescan the disks and shows available multipath
        devices (such as
        <filename>/dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65</filename>).
        This is the device that should be used for all further processing.
       </para>
      </step>
      <step id="bomcrfl">
       <para>
        Click <guimenu>Next</guimenu> to continue with the installation.
       </para>
      </step>
     </procedure>
    </sect3>
    <sect3 id="bomc64e">
     <title>Enabling Multipath I/O at Install Time on an Active/Passive Multipath Storage LUN</title>
     <para>
      The multipathd daemon is not automatically active during the system
      installation. You can start it by using the <guimenu>Configure
      Multipath</guimenu> option in the &yast; partitioner.
     </para>
     <para>
      To enable multipath I/O at install time for an active/passive
      multipath storage LUN:
     </para>
     <procedure id="bomc6el">
      <step id="bomc6em">
       <para>
        During the install on the &yast; Installation Settings page, click on
        <guimenu>Partitioning</guimenu> to open the &yast; partitioner.
       </para>
      </step>
      <step id="bomc7xx">
       <para>
        Select <guimenu>Custom Partitioning (for experts)</guimenu>.
       </para>
      </step>
      <step id="bomc83f">
       <para>
        Select the <guimenu>Hard Disks</guimenu> main icon, click the
        <guimenu>Configure</guimenu> button, then select <guimenu>Configure
        Multipath</guimenu>.
       </para>
      </step>
      <step id="bomc8h8">
       <para>
        Start multipath.
       </para>
       <para>
        &yast; starts to rescan the disks and shows available multipath
        devices (such as
        <filename>/dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65</filename>).
        This is the device that should be used for all further processing.
        Write down the device path and UUID; you need it later.
       </para>
      </step>
      <step id="bomcatl">
       <para>
        Click <guimenu>Next</guimenu> to continue with the installation.
       </para>
      </step>
      <step id="bomca3n">
       <para>
        After all settings are done and the installation finished, &yast;
        starts to write the boot loader information, and displays a
        countdown to restart the system. Stop the counter by clicking the
        <guimenu>Stop</guimenu> button and press CTRL+ALT+F5 to access a
        console.
       </para>
      </step>
      <step id="bomcamo">
       <para>
        <remark condition="needinfo">
	 2014-02-07 - fs: Is this still necessary with GRUB 2 ??
	</remark>
        Use the console to determine if a passive path was entered in the
        <filename>/boot/grub/device.map</filename> file for the
        <filename>hd0</filename> entry.
       </para>
       <para>
        This is necessary because the installation does not distinguish
        between active and passive paths.
       </para>
       <substeps>
        <step id="bomcby2">
         <para role="intro">
          Mount the root device to <filename>/mnt</filename> by entering
         </para>
<screen>
mount /dev/disk/by-id/&lt;<replaceable>UUID</replaceable>&gt;_part2 /mnt
</screen>
         <para role="intro">
          For example, enter
         </para>
<screen>
mount /dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65_part2 /mnt
</screen>
        </step>
        <step id="bomcfm2">
         <para role="intro">
          Mount the boot device to <filename>/mnt/boot</filename> by
          entering
         </para>
<screen>
mount /dev/disk/by-id/&lt;<replaceable>UUID</replaceable>&gt;_part1 /mnt/boot
</screen>
         <para role="intro">
          For example, enter
         </para>
<screen>
mount /dev/disk/by-id/dm-uuid-mpath-3600a0b80000f4593000012ae4ab0ae65_part2 /mnt/boot
</screen>
        </step>
        <step id="bomcg7c">
         <para>
          Open <filename>/mnt/boot/grub/device.map</filename> file by
          entering
         </para>
<screen>
less /mnt/boot/grub/device.map
</screen>
        </step>
        <step id="bomcg05">
         <para>
          In the <filename>/mnt/boot/grub/device.map</filename> file,
          determine if the <filename>hd0</filename> entry points to a
          passive path, then do one of the following:
         </para>
         <itemizedlist>
          <listitem>
           <formalpara id="bomchix">
            <title>Active path:</title>
            <para>
             No action is needed; skip
             <xref linkend="bomc8jz" xrefstyle="StepXRef"/> and continue
             with <xref linkend="bomcboo" xrefstyle="StepXRef"/>.
            </para>
           </formalpara>
          </listitem>
          <listitem>
           <formalpara id="bomciib">
            <title>Passive path:</title>
            <para>
             The configuration must be changed and the boot loader must be
             reinstalled. Continue with
             <xref linkend="bomc8jz" xrefstyle="StepXRef"/>.
            </para>
           </formalpara>
          </listitem>
         </itemizedlist>
        </step>
       </substeps>
      </step>
      <step id="bomc8jz">
       <para role="intro">
        If the hd0 entry points to a passive path, change the configuration
        and reinstall the boot loader:
       </para>
       <substeps>
        <step id="bomcmd6">
         <para role="intro">
          At the console, enter the following commands at the console
          prompt:
         </para>
<screen>
mount -o bind /dev /mnt/dev

mount -o bind /sys /mnt/sys

mount -o bind /proc /mnt/proc

chroot

</screen>
        </step>
        <step id="bomclu7">
         <para role="intro">
          At the console, run <command>multipath -ll</command>, then check
          the output to find the active path.
         </para>
         <para>
          Passive paths are flagged as <literal>ghost</literal>.
         </para>
        </step>
        <step id="bomcmwr">
         <para>
          In the <filename>/mnt/boot/grub/device.map</filename> file, change
          the <literal>hd0</literal> entry to an active path, save the
          changes, and close the file.
         </para>
        </step>
        <step id="bomcndj">
         <para role="intro">
          In case the selection was to boot from MBR,
          <filename>/etc/grub.conf</filename> should look like the
          following:
         </para>
<screen>
setup --stage2=/boot/grub/stage2 (hd0) (hd0,0)
quit
</screen>
        </step>
        <step id="bomcoe1">
         <para role="intro">
          Reinstall the boot loader by entering
         </para>
<screen>
grub &lt; /etc/grub.conf
</screen>
        </step>
        <step id="bomcol7">
         <para role="intro">
          Enter the following commands:
         </para>
<screen>
exit

umount /mnt/*

umount /mnt
</screen>
        </step>
       </substeps>
      </step>
      <step id="bomcboo">
       <para>
        Return to the &yast; graphical environment by pressing CTRL+ALT+F7.
       </para>
      </step>
      <step id="bomcjfg">
       <para>
        Click <guimenu>OK</guimenu> to continue with the installation
        reboot.
       </para>
      </step>
     </procedure>
    </sect3>
   </sect2>

   <sect2 id="bomc64f">
    <title>Enabling Multipath I/O for an Existing Root Device</title>
    <procedure id="b7cjqvq">
     <step id="b7cjqvr">
      <para>
       Install Linux with only a single path active, preferably one where
       the <filename>by-id</filename> symbolic links are listed in the
       partitioner.
      </para>
     </step>
     <step id="b7cjrle">
      <para>
       Mount the devices by using the <filename>/dev/disk/by-id</filename>
       path used during the install.
      </para>
     </step>
     <step id="b7cjs32">
      <para>
       Add dm-multipath to
       <filename>/etc/dracut.conf.d/01-dist.conf</filename> by adding the
       following line:
      </para>
<screen>force_drivers+="dm-multipath"</screen>
     </step>
     <step id="bky5jc7">
      <para>
       <remark condition="clarity">
       2014-09-05 - fs: Check if the following is still true
      </remark>
       For System Z, before running <command>dracut</command>, edit the
       <filename>/etc/zipl.conf</filename> file to change the by-path
       information in <filename>zipl.conf</filename> with the same by-id
       information that was used in <filename>/etc/fstab</filename>.
      </para>
     </step>
     <step id="b7cjsl3">
      <para>
       Run <command>dracut <option>-f</option></command> to update the
       <filename>initrd</filename> image.
      </para>
     </step>
     <step id="bky5j1x">
      <para>
       For System Z, after running <command>dracut</command>, run
       <command>zipl</command>.
      </para>
     </step>
     <step id="b7cjuv4">
      <para>
       Reboot the server.
      </para>
     </step>
    </procedure>
   </sect2>

   <sect2 id="bomc64g">
    <title>Disabling Multipath I/O on the Root Device</title>
    <procedure id="b7jqdde">
     <step id="b7jqddf">
      <para>
       Add <literal>multipath=off</literal> to the kernel command line.
      </para>
      <para>
       This affects only the root device. All other devices are not
       affected.
      </para>
     </step>
    </procedure>
   </sect2>
  </sect1>
  <sect1 id="mpioraid">
   <title>Configuring Multipath I/O for an Existing Software RAID</title>

   <para>
    Ideally, you should configure multipathing for devices before you use
    them as components of a software RAID device. If you add multipathing
    after creating any software RAID devices, the DM-MPIO service might be
    starting after the <command>multipath</command> service on reboot, which
    makes multipathing appear not to be available for RAIDs. You can use the
    procedure in this section to get multipathing running for a previously
    existing software RAID.
   </para>

   <para>
    For example, you might need to configure multipathing for devices in a
    software RAID under the following circumstances:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      If you create a new software RAID as part of the Partitioning settings
      during a new install or upgrade.
     </para>
    </listitem>
    <listitem>
     <para>
      If you did not configure the devices for multipathing before using
      them in the software RAID as a member device or spare.
     </para>
    </listitem>
    <listitem>
     <para>
      If you grow your system by adding new HBA adapters to the server or
      expanding the storage subsystem in your SAN.
     </para>
    </listitem>
   </itemizedlist>

   <note>
    <para>
     The following instructions assume the software RAID device is
     <filename>/dev/mapper/mpath0&gt;</filename>, which is its device name
     as recognized by the kernel. It assumes you have enabled
     user-friendly-names in the <filename>/etc/multipath.conf</filename>
     file as described in
     <xref linkend="mpionames" xrefstyle="HeadingOnPage"/>.
    </para>
    <para>
     Ensure that you modify the instructions for the device name of your
     software RAID.
    </para>
   </note>

   <procedure id="b59pkd5">
    <step id="b59qv1e">
     <para role="intro">
      Open a terminal console, then log in as the
      &rootuser; user or equivalent.
     </para>
     <para>
      Except where otherwise directed, use this console to enter the
      commands in the following steps.
     </para>
    </step>
    <step id="b59qezr">
     <para>
      If any software RAID devices are currently mounted or running, enter
      the following commands for each device to dismount the device and stop
      it.
     </para>
<screen>
umount /dev/mapper/mpath0
</screen>
<screen>
mdadm --misc --stop /dev/mapper/mpath0
</screen>
    </step>
    <step id="b59q95b">
     <para>
      Stop the <command>md</command> service by entering
     </para>
<screen>systemctl stop md.service</screen>
<!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff:<screen>
/etc/init.d/boot.md stop
</screen>
-->
    </step>
    <step id="b59qeuu">
     <para>
      Start the <filename>multipath</filename> and
      <filename>multipathd</filename> services by entering the following
      commands:
     </para>
<screen>systemctl start multipath.service multipathd.service 
     </screen>
<!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff:
<screen>
/etc/init.d/boot.multipath start
</screen>
<screen>
/etc/init.s/multipathd start
</screen>-->
    </step>
    <step id="b59qp65">
     <para>
      After the multipathing services are started, verify that the software
      RAID’s component devices are listed in the
      <filename>/dev/disk/by-id</filename> directory. Do one of the
      following:
     </para>
     <itemizedlist>
      <listitem>
       <formalpara id="b59qrp7">
        <title>Devices Are Listed:</title>
        <para>
         The device names should now have symbolic links to their Device
         Mapper Multipath device names, such as
         <filename>/dev/dm-1</filename>.
        </para>
       </formalpara>
      </listitem>
      <listitem>
       <formalpara id="b59qrx0">
        <title>Devices Are Not Listed:</title>
        <para>
         Force the multipath service to recognize them by flushing and
         rediscovering the devices.
        </para>
       </formalpara>
       <para>
        To do this, enter the following commands:
       </para>
<screen>
multipath -F
</screen>
<screen>
multipath -v0
</screen>
       <para>
        The devices should now be listed in
        <filename>/dev/disk/by-id</filename>, and have symbolic links to
        their Device Mapper Multipath device names. For example:
       </para>
<screen>
lrwxrwxrwx 1 root root 10 2011-01-06 11:42 dm-uuid-mpath-36006016088d014007e0d0d2213ecdf11 -&gt; ../../dm-1
</screen>
      </listitem>
     </itemizedlist>
    </step>
    <step id="b59qtrw">
     <para>
      Restart the <filename>md</filename> service and the RAID device by
      entering
     </para>
<screen>systemctl start md.service</screen>
<!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff:
<screen>
/etc/init.d/boot.md start
</screen>
-->
    </step>
    <step id="b59qu7z">
     <para>
      Check the status of the software RAID by entering
     </para>
<screen>
mdadm --detail /dev/mapper/mpath0
</screen>
     <para>
      The RAID’s component devices should match their Device Mapper
      Multipath device names that are listed as the symbolic links of
      devices in the <filename>/dev/disk/by-id</filename> directory.
     </para>
    </step>
    <step id="b59r62x">
     <para>
      Make a new <filename>initrd</filename> to ensure that the Device
      Mapper Multipath services are loaded before the RAID services on
      reboot. Running <command>dracut</command> is needed only if the root
      (/) device or any parts of it (such as <filename>/var</filename>,
      <filename>/etc</filename>, <filename>/log</filename>) are on the SAN
      and multipath is needed to boot.
     </para>
     <para>
      Enter
     </para>
<screen>
dracut -f --add-drivers multipath
</screen>
    </step>
    <step id="b59rekg">
     <para>
      Reboot the server to apply these post-install configuration settings.
     </para>
    </step>
    <step id="b59rf4m">
     <para>
      Verify that the software RAID array comes up properly on top of the
      multipathed devices by checking the RAID status. Enter
     </para>
<screen>
mdadm --detail /dev/mapper/mpath0
</screen>
     <para>
      For example:
     </para>
     <simplelist>
      <member><literal>Number Major Minor RaidDevice State</literal>
      </member>
      <member><literal>0 253 0 0 active sync /dev/dm-0</literal>
      </member>
      <member><literal>1 253 1 1 active sync /dev/dm-1</literal>
      </member>
      <member><literal>2 253 2 2 active sync /dev/dm-2</literal>
      </member>
     </simplelist>
    </step>
   </procedure>
  </sect1>
  <sect1 id="scandev">
   <title>Scanning for New Devices without Rebooting</title>

   <para>
    If your system has already been configured for multipathing and you
    later need to add more storage to the SAN, you can use the
    <command>rescan-scsi-bus.sh</command> script to scan for the new
    devices. By default, this script scans all HBAs with typical LUN ranges.
   </para>

   <warning>
    <para>
     In EMC PowerPath environments, do not use the
     <filename>rescan-scsi-bus.sh</filename> utility provided with the
     operating system or the HBA vendor scripts for scanning the SCSI buses.
     To avoid potential file system corruption, EMC requires that you follow
     the procedure provided in the vendor documentation for EMC PowerPath
     for Linux.
    </para>
   </warning>

   <bridgehead id="boimjzp">Syntax</bridgehead>

<screen>
rescan-scsi-bus.sh [options] [host [host ...]]
</screen>

   <para>
    You can specify hosts on the command line (deprecated), or use the
    <literal>--hosts=LIST</literal> option (recommended).
   </para>

   <bridgehead id="boimk55">Options</bridgehead>

   <para>
    For most storage subsystems, the script can be run successfully without
    options. However, some special cases might need to use one or more of
    the following parameters for the <command>rescan-scsi-bus.sh</command>
    script:
   </para>

   <informaltable frame="topbot" rowsep="1" pgwide="0">
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="2381*"/>
     <colspec colnum="2" colname="2" colwidth="7620*"/>
     <thead>
      <row id="boiml8l">
       <entry>
        <para>
         Option
        </para>
       </entry>
       <entry>
        <para>
         Description
        </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row id="boiml8m">
       <entry>
<screen>
-l
</screen>
       </entry>
       <entry>
        <para>
         Activates scanning for LUNs 0-7. [Default: 0]
        </para>
       </entry>
      </row>
      <row id="boiml8n">
       <entry>
<screen>
-L NUM
</screen>
       </entry>
       <entry>
        <para>
         Activates scanning for LUNs 0 to NUM. [Default: 0]
        </para>
       </entry>
      </row>
      <row id="boiml8o">
       <entry>
<screen>
-w
</screen>
       </entry>
       <entry>
        <para>
         Scans for target device IDs 0 to 15. [Default: 0 to 7]
        </para>
       </entry>
      </row>
      <row id="boimoae">
       <entry>
<screen>
-c
</screen>
       </entry>
       <entry>
        <para>
         Enables scanning of channels 0 or 1. [Default: 0]
        </para>
       </entry>
      </row>
      <row id="boimoaf">
       <entry>
<screen>
-r
--remove
</screen>
       </entry>
       <entry>
        <para>
         Enables removing of devices. [Default: Disabled]
        </para>
       </entry>
      </row>
      <row id="boimoag">
       <entry>
<screen>
-i
--issueLip
</screen>
       </entry>
       <entry>
        <para>
         Issues a Fibre Channel LIP reset. [Default: Disabled]
        </para>
       </entry>
      </row>
      <row id="boimoah">
       <entry>
<screen>
--forcerescan
</screen>
       </entry>
       <entry>
        <para>
         Rescans existing devices.
        </para>
       </entry>
      </row>
      <row id="boimoai">
       <entry>
<screen>
--forceremove
</screen>
       </entry>
       <entry>
        <para>
         Removes and re-adds every device.
        </para>
        <warning>
         <para>
          Use with caution, this option is dangerous.
         </para>
        </warning>
       </entry>
      </row>
      <row id="boimoaj">
       <entry>
<screen>
--nooptscan
</screen>
       </entry>
       <entry>
        <para>
         Don’t stop looking for LUNs if 0 is not found.
        </para>
       </entry>
      </row>
      <row id="boj5t9m">
       <entry>
<screen>
--color
</screen>
       </entry>
       <entry>
        <para>
         Use colored prefixes OLD/NEW/DEL.
        </para>
       </entry>
      </row>
      <row id="boj5t9n">
       <entry>
<screen>
--hosts=LIST
</screen>
       </entry>
       <entry>
        <para>
         Scans only hosts in LIST, where LIST is a comma-separated list of
         single values and ranges. No spaces are allowed.
        </para>
<screen>
--hosts=A[-B][,C[-D]]
</screen>
       </entry>
      </row>
      <row id="boj5t9o">
       <entry>
<screen>
--channels=LIST
</screen>
       </entry>
       <entry>
        <para>
         Scans only channels in LIST, where LIST is a comma-separated list
         of single values and ranges. No spaces are allowed. 
        </para>
<screen>
--channels=A[-B][,C[-D]]
</screen>
       </entry>
      </row>
      <row id="boj5t9p">
       <entry>
<screen>
--ids=LIST
</screen>
       </entry>
       <entry>
        <para>
         Scans only target IDs in LIST, where LIST is a comma-separated list
         of single values and ranges. No spaces are allowed. 
        </para>
<screen>
--ids=A[-B][,C[-D]]
</screen>
       </entry>
      </row>
      <row id="boimoak">
       <entry>
<screen>
--luns=LIST
</screen>
       </entry>
       <entry>
        <para>
         Scans only LUNs in LIST, where LIST is a comma-separated list of
         single values and ranges. No spaces are allowed.
        </para>
<screen>
--luns=A[-B][,C[-D]]
</screen>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <bridgehead id="boj5xxj">Procedure</bridgehead>

   <para>
    Use the following procedure to scan the devices and make them available
    to multipathing without rebooting the system.
   </para>

   <procedure id="b59rt6j">
    <step id="b59rt6k">
     <para>
      On the storage subsystem, use the vendor’s tools to allocate the
      device and update its access control settings to allow the Linux
      system access to the new storage. Refer to the vendor’s
      documentation for details.
     </para>
    </step>
    <step id="b59rw69">
     <para>
      Scan all targets for a host to make its new device known to the middle
      layer of the Linux kernel’s SCSI subsystem. At a terminal console
      prompt, enter
     </para>
<screen>
rescan-scsi-bus.sh [options]
</screen>
    </step>
    <step id="b8ru7x3">
     <para>
      Check for scanning progress in the &systemd; journal (see
      <xref
      linkend="cha.journalctl"/>). At a terminal console prompt,
      enter
     </para>
<screen>
journalctl -r
</screen>
     <para>
      This command displays the last lines of the log. For example:
     </para>
<screen>
# journalctl -r
Feb 14 01:03 kernel: SCSI device sde: 81920000
Feb 14 01:03 kernel: SCSI device sdf: 81920000
Feb 14 01:03 multipathd: sde: path checker registered
Feb 14 01:03 multipathd: sdf: path checker registered
Feb 14 01:03 multipathd: mpath4: event checker started
Feb 14 01:03 multipathd: mpath5: event checker started
Feb 14 01:03:multipathd: mpath4: remaining active paths: 1
Feb 14 01:03 multipathd: mpath5: remaining active paths: 1
[...]
</screen>
    </step>
    <step id="b8ruapd">
     <para>
      Repeat <xref linkend="b59rw69" xrefstyle="StepXRef"/> through
      <xref linkend="b8ru7x3" xrefstyle="StepXRef"/> to add paths through
      other HBA adapters on the Linux system that are connected to the new
      device.
     </para>
    </step>
    <step id="b59ryjx">
     <para>
      Run the <command>multipath</command> command to recognize the devices
      for DM-MPIO configuration. At a terminal console prompt, enter
     </para>
<screen>
multipath
</screen>
     <para>
      You can now configure the new device for multipathing.
     </para>
    </step>
   </procedure>
  </sect1>
  <sect1 id="be48i9g">
   <title>Scanning for New Partitioned Devices without Rebooting</title>

   <para role="intro">
    Use the example in this section to detect a newly added multipathed LUN
    without rebooting.
   </para>

   <warning>
    <para>
     In EMC PowerPath environments, do not use the
     <filename>rescan-scsi-bus.sh</filename> utility provided with the
     operating system or the HBA vendor scripts for scanning the SCSI buses.
     To avoid potential file system corruption, EMC requires that you follow
     the procedure provided in the vendor documentation for EMC PowerPath
     for Linux.
    </para>
   </warning>

   <procedure id="befqdst">
    <step id="befqdsu">
     <para>
      Open a terminal console, then log in as the
      &rootuser; user.
     </para>
    </step>
    <step id="boj61wx">
     <para>
      Scan all targets for a host to make its new device known to the middle
      layer of the Linux kernel’s SCSI subsystem. At a terminal console
      prompt, enter
     </para>
<screen>
rescan-scsi-bus.sh [options]
</screen>
     <para>
      For syntax and options information for the
      <filename>rescan-scsi-bus-sh</filename> script, see
      <xref linkend="scandev" xrefstyle="SectTitleOnPage"/>.
     </para>
    </step>
    <step id="befqeer">
     <para>
      Verify that the device is seen (such as if the link has a new time
      stamp) by entering
     </para>
<screen>
ls -lrt /dev/dm-*
</screen>
     <para>
      You can also verify the devices in
      <filename>/dev/disk/by-id</filename> by entering
     </para>
<screen>
ls -l /dev/disk/by-id/
</screen>
    </step>
    <step id="befqfh9">
     <para>
      Verify the new device appears in the log by entering
     </para>
<screen>
journalctl -r
</screen>
    </step>
    <step id="befqhvc">
     <para>
      Use a text editor to add a new alias definition for the device in the
      <filename>/etc/multipath.conf</filename> file, such as
      <filename>data_vol3</filename>.
     </para>
     <para>
      For example, if the UUID is
      <filename>36006016088d014006e98a7a94a85db11</filename>, make the
      following changes:
     </para>
<screen>
defaults {
     user_friendly_names   yes
  }
multipaths {  
     multipath {      
          wwid    36006016088d014006e98a7a94a85db11      
          alias  data_vol3      
          }
  }
</screen>
    </step>
    <step id="befqj91">
     <para>
      Create a partition table for the device by entering
     </para>
<screen>
fdisk /dev/disk/by-id/dm-uuid-mpath-&lt;UUID&gt;
</screen>
     <para>
      Replace UUID with the device WWID, such as
      <filename>36006016088d014006e98a7a94a85db11</filename>.
     </para>
    </step>
    <step id="befqjhp">
     <para>
      Trigger udev by entering
     </para>
<screen>
echo 'add' &gt; /sys/block/&lt;<replaceable>dm_device</replaceable>&gt;/uevent
</screen>
     <para>
      For example, to generate the device-mapper devices for the partitions
      on <filename>dm-8</filename>, enter
     </para>
<screen>
echo 'add' &gt; /sys/block/dm-8/uevent
</screen>
    </step>
    <step id="befqkj8">
     <para>
      Create a file system and label for the new partition by entering the
      following commands:
     </para>
<screen>
mke2fs -j /dev/disk/by-id/dm-uuid-mpath-&lt;<replaceable>UUID_partN</replaceable>&gt;
tune2fs -L <replaceable>data_vol3</replaceable> /dev/disk/by-id/dm-uuid-&lt;<replaceable>UUID_partN</replaceable>&gt;
</screen>
     <para>
      Replace <filename>UUID_part1</filename> with the actual UUID and
      partition number, such as 36006016088d014006e98a7a94a85db11_part1.
     </para>
    </step>
    <step id="befqljm">
     <para>
      Restart DM-MPIO to let it read the aliases by entering
     </para>
<screen>
sudo systemctl restart multipathd.service
</screen>
    </step>
    <step id="befqmbi">
     <para role="intro">
      Verify that the device is recognized by <command>multipathd</command>
      by entering
     </para>
<screen>
multipath -ll
</screen>
    </step>
    <step id="befqmno">
     <para>
      Use a text editor to add a mount entry in the
      <filename>/etc/fstab</filename> file.
     </para>
     <para>
      At this point, the alias you created in
      <xref linkend="befqhvc" xrefstyle="StepXRef"/> is not yet in the
      <filename>/dev/disk/by-label</filename> directory. Add the mount entry
      the <filename>/dev/dm-9</filename> path, then change the entry before
      the next time you reboot to
     </para>
<screen>
LABEL=data_vol3
</screen>
    </step>
    <step id="befqr98">
     <para>
      Create a directory to use as the mount point, then mount the device by
      entering
     </para>
<screen>
md <replaceable>/data_vol3</replaceable>
</screen>
<screen>
mount <replaceable>/data_vol3</replaceable>
</screen>
    </step>
   </procedure>
  </sect1>
  <sect1 id="mpiostatus">
   <title>Viewing Multipath I/O Status</title>

   <para>
    Querying the multipath I/O status outputs the current status of the
    multipath maps.
   </para>

   <para>
    The <command>multipath -l</command> option displays the current path
    status as of the last time that the path checker was run. It does not
    run the path checker.
   </para>

   <para>
    The <command>multipath -ll</command> option runs the path checker,
    updates the path information, then displays the current status
    information. This option always the displays the latest information
    about the path status.
   </para>

   <procedure id="b8ruq0c">
    <step id="b8ruq0d">
     <para>
      At a terminal console prompt, enter
     </para>
<screen>
multipath -ll
</screen>
     <para>
      This displays information for each multipathed device. For example:
     </para>
<screen>
3600601607cf30e00184589a37a31d911
[size=127 GB][features="0"][hwhandler="1 emc"]
</screen>
<screen>
\_ round-robin 0 [active][first]
  \_ 1:0:1:2 sdav 66:240  [ready ][active]
  \_ 0:0:1:2 sdr  65:16   [ready ][active]
</screen>
<screen>
\_ round-robin 0 [enabled]
  \_ 1:0:0:2 sdag 66:0    [ready ][active]
  \_ 0:0:0:2 sdc  8:32    [ready ][active]
</screen>
    </step>
   </procedure>

   <para>
    For each device, it shows the device’s ID, size, features, and
    hardware handlers.
   </para>

   <para>
    Paths to the device are automatically grouped into priority groups on
    device discovery. Only one priority group is active at a time. For an
    active/active configuration, all paths are in the same group. For an
    active/passive configuration, the passive paths are placed in separate
    priority groups.
   </para>

   <para>
    The following information is displayed for each group:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      Scheduling policy used to balance I/O within the group, such as
      round-robin
     </para>
    </listitem>
    <listitem>
     <para>
      Whether the group is active, disabled, or enabled
     </para>
    </listitem>
    <listitem>
     <para>
      Whether the group is the first (highest priority) group
     </para>
    </listitem>
    <listitem>
     <para>
      Paths contained within the group
     </para>
    </listitem>
   </itemizedlist>

   <para>
    The following information is displayed for each path:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      The physical address as
      <replaceable>host:bus:target:lun</replaceable>, such as 1:0:1:2
     </para>
    </listitem>
    <listitem>
     <para>
      Device node name, such as <filename>sda</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      Major:minor numbers
     </para>
    </listitem>
    <listitem>
     <para>
      Status of the device
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
  <sect1 id="mpioerrormgmt">
   <title>Managing I/O in Error Situations</title>

   <para>
    You might need to configure multipathing to queue I/O if all paths fail
    concurrently by enabling queue_if_no_path. Otherwise, I/O fails
    immediately if all paths are gone. In certain scenarios, where the
    driver, the HBA, or the fabric experience spurious errors, DM-MPIO
    should be configured to queue all I/O where those errors lead to a loss
    of all paths, and never propagate errors upward.
   </para>

   <para>
    When you use multipathed devices in a cluster, you might choose to
    disable queue_if_no_path. This automatically fails the path instead of
    queuing the I/O, and escalates the I/O error to cause a failover of the
    cluster resources.
   </para>

   <para>
    Because enabling queue_if_no_path leads to I/O being queued indefinitely
    unless a path is reinstated, ensure that <command>multipathd</command>
    is running and works for your scenario. Otherwise, I/O might be stalled
    indefinitely on the affected multipathed device until reboot or until
    you manually return to failover instead of queuing.
   </para>

   <para>
    To test the scenario:
   </para>

   <procedure id="b5c8xoe">
    <step id="b7jqv1b">
     <para>
      In a terminal console, log in as the &rootuser;
      user.
     </para>
    </step>
    <step id="b7jqw8e">
     <para>
      Activate queuing instead of failover for the device I/O by entering:
     </para>
<screen>
dmsetup message <replaceable>device_ID</replaceable> 0 queue_if_no_path
</screen>
     <para>
      Replace the <replaceable>device_ID</replaceable> with the ID for your
      device. The 0 value represents the sector and is used when sector
      information is not needed.
     </para>
     <para>
      For example, enter:
     </para>
<screen>
dmsetup message 3600601607cf30e00184589a37a31d911 0 queue_if_no_path
</screen>
    </step>
    <step id="b7jqwaz">
     <para>
      Return to failover for the device I/O by entering:
     </para>
<screen>
dmsetup message <replaceable>device_ID</replaceable> 0 fail_if_no_path
</screen>
     <para>
      This command immediately causes all queued I/O to fail.
     </para>
     <para>
      Replace the <replaceable>device_ID</replaceable> with the ID for your
      device. For example, enter:
     </para>
<screen>
dmsetup message 3600601607cf30e00184589a37a31d911 0 fail_if_no_path
</screen>
    </step>
   </procedure>

   <para>
    To set up queuing I/O for scenarios where all paths fail:
   </para>

   <procedure id="b7jqzyt">
    <step id="b7jr0j0">
     <para>
      In a terminal console, log in as the &rootuser;
      user.
     </para>
    </step>
    <step id="b5c9aza">
     <para>
      Open the <filename>/etc/multipath.conf</filename> file in a text
      editor.
     </para>
    </step>
    <step id="b5c99rh">
     <para>
      Uncomment the defaults section and its ending bracket, then add the
      <literal>default_features</literal> setting, as follows:
     </para>
<screen>
defaults {
  default_features "1 queue_if_no_path"
}
</screen>
    </step>
    <step id="bi0b03b">
     <para>
      After you modify the <filename>/etc/multipath.conf</filename> file,
      you must run <command>dracut <option>-f</option></command> to
      re-create the <filename>initrd</filename> on your system, then reboot
      in order for the changes to take effect.
     </para>
    </step>
    <step id="b7jr4r4">
     <para>
      When you are ready to return over to failover for the device I/O,
      enter:
     </para>
<screen>
dmsetup message <replaceable>mapname</replaceable> 0 fail_if_no_path
</screen>
     <para>
      Replace the <replaceable>mapname</replaceable> with the mapped alias
      name or the device ID for the device. The 0 value represents the
      sector and is used when sector information is not needed.
     </para>
     <para>
      This command immediately causes all queued I/O to fail and propagates
      the error to the calling application.
     </para>
    </step>
   </procedure>
  </sect1>
  <sect1 id="mpiostall">
   <title>Resolving Stalled I/O</title>

   <para>
    If all paths fail concurrently and I/O is queued and stalled, do the
    following:
   </para>

   <procedure id="b7jlq1g">
    <step id="b7jlq1h">
     <para>
      Enter the following command at a terminal console prompt:
     </para>
<screen>
dmsetup message <replaceable>mapname</replaceable> 0 fail_if_no_path
</screen>
     <para>
      Replace <literal><replaceable>mapname</replaceable></literal> with the
      correct device ID or mapped alias name for the device. The 0 value
      represents the sector and is used when sector information is not
      needed.
     </para>
     <para>
      This command immediately causes all queued I/O to fail and propagates
      the error to the calling application.
     </para>
    </step>
    <step id="b7jlq74">
     <para>
      Reactivate queueing by entering the following command at a terminal
      console prompt:
     </para>
<screen>
dmsetup message <replaceable>mapname</replaceable> 0 queue_if_no_path
</screen>
    </step>
   </procedure>
  </sect1>
  <sect1 id="bpjpirk">
   <title>Troubleshooting MPIO</title>

   <para>
    This section describes some known issues and possible solutions for
    MPIO.
   </para>

   <sect2 id="b11qkzgw">
    <title>PRIO Settings for Individual Devices Fail After Upgrading to Multipath 0.4.9</title>
    <para>
     Multipath Tools 0.4.9 for SLES 11 SP2 uses the <literal>prio</literal>
     setting in the <literal>defaults{}</literal> or
     <literal>devices{}</literal> section of the
     <filename>/etc/multipath.conf</filename> file. It silently ignores the
     keyword <literal>prio</literal> when it is specified for an individual
     <literal>multipath</literal> definition in the
     <literal>multipaths{)</literal> section.
    </para>
    <para>
     Multipath Tools 0.4.8 for SLES 11 SP1 and earlier allows the prio
     setting in the individual <literal>multipath</literal> definition in
     the <literal>multipaths{)</literal> section to override the
     <literal>prio</literal> settings in the <literal>defaults{}</literal>
     or <literal>devices{}</literal> section.
    </para>
   </sect2>

   <sect2 id="b122uxzr">
    <title>PRIO Settings with Arguments Fail After Upgrading to multipath-tools-0.4.9</title>
    <para>
     When you upgrade from <filename>multipath-tools-0.4.8</filename> to
     <filename>multipath-tools-0.4.9</filename>, the <literal>prio</literal>
     settings in the <filename>/etc/multipath.conf</filename> file are
     broken for prioritizers that require an argument. In
     multipath-tools-0.4.9, the <literal>prio</literal> keyword is used to
     specify the prioritizer, and the <literal>prio_args</literal> keyword
     is used to specify the argument for prioritizers that require an
     argument. Previously, both the prioritizer and its argument were
     specified on the same <literal>prio</literal> line.
    </para>
    <para>
     For example, in multipath-tools-0.4.8, the following line was used to
     specify a prioritizer and its arguments on the same line.
    </para>
<screen>
prio "weightedpath hbtl [1,3]:.:.+:.+ 260 [0,2]:.:.+:.+ 20"
</screen>
    <para role="intro">
     After upgrading to <command>multipath-tools-0.4.9</command>, the
     command causes an error. The message is similar to the following:
    </para>
<screen>
&lt;Month day hh:mm:ss&gt; | Prioritizer 'weightedpath hbtl [1,3]:.:.+:.+ 260
[0,2]:.:.+:.+ 20' not found in /lib64/multipath
</screen>
    <para>
     To resolve this problem, use a text editor to modify the
     <literal>prio</literal> line in the
     <filename>/etc/multipath.conf</filename> file. Create two lines with
     the prioritizer specified on the <filename>prio</filename> line, and
     the prioritizer argument specified on the
     <filename>prio_args</filename> line below it:
    </para>
<screen>
prio "weightedpath"
prio_args "hbtl [1,3]:.:.+:.+ 260 [0,2]:.:.+:.+ 20"
</screen>
   </sect2>

   <sect2 id="b11qkzgx">
    <title>Technical Information Documents</title>
    <para>
     For information about troubleshooting multipath I/O issues on SUSE
     Linux Enterprise Server, see the following Technical Information
     Documents (TIDs) in the &suse; Knowledgebase:
    </para>
    <itemizedlist>
     <listitem>
      <para>
       <ulink url="http://www.suse.com/support/kb/doc.php?id=3231766"><citetitle>Troubleshooting
       SLES Multipathing (MPIO) Problems (TID 3231766)</citetitle></ulink>
      </para>
     </listitem>
     <listitem>
      <para>
       <ulink url="http://www.suse.com/support/kb/doc.php?id=3029706"><citetitle>DM
       MPIO Device Blacklisting Not Honored in multipath.conf (TID
       3029706)</citetitle></ulink>
      </para>
     </listitem>
     <listitem>
      <para>
       <ulink url="http://www.suse.com/support/kb/doc.php?id=3955167"><citetitle>Troubleshooting
       SCSI (LUN) Scanning Issues (TID 3955167)</citetitle></ulink>
      </para>
     </listitem>
     <listitem>
      <para>
       <ulink url="http://www.suse.com/support/kb/doc.php?id=7007498"><citetitle>Using
       LVM on Multipath (DM MPIO) Devices</citetitle></ulink>
      </para>
     </listitem>
    </itemizedlist>
   </sect2>
  </sect1>
  <sect1 id="mpionext">
   <title>What’s Next</title>

   <para>
    If you want to use software RAIDs, create and configure them before you
    create file systems on the devices. For information, see the following:
   </para>

   <itemizedlist>
    <listitem>
     <para>
      <xref linkend="cha.raid" xrefstyle="ChapTitleOnPage"/>
     </para>
    </listitem>
    <listitem>
     <para>
      <xref linkend="raidmdadm" xrefstyle="ChapTitleOnPage"/>
     </para>
    </listitem>
   </itemizedlist>
  </sect1>
 </chapter>
