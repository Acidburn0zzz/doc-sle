<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//Novell//DTD NovDoc XML V1.0//EN" "novdocx.dtd"
[
  <!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  <!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]>
<sect1 id="sec.x11.fontsys">
  <title>Installing and Configuring Fonts</title>
  <indexterm>
    <primary>X</primary>
    <secondary>TrueType fonts</secondary>
  </indexterm>
  <indexterm>
    <primary>fonts</primary>
    <secondary>TrueType</secondary>
  </indexterm>
  <indexterm>
    <primary>X</primary>
    <secondary>fonts</secondary>
  </indexterm>
  <indexterm>
    <primary>X</primary>
    <secondary>xft</secondary>
  </indexterm>
  <indexterm>
    <primary>X</primary>
    <secondary>character sets</secondary>
  </indexterm>

  <para>
    Font appearance can be influenced by two main aspects:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        choose a suitable font family,
      </para>
    </listitem>
    <listitem>
      <para>
        render the font with an algorithm which achieves results comfortable
        for receiver's eyes. 
      </para>
    </listitem>
  </itemizedlist>   
  <para>
    Although above the two points are highly subjective, some defaults need to be created.
  </para>

  <para>
    Linux font rendering systems consist of several libraries with different
    relations. The basic font rendering library is <ulink 
      url="http://www.freetype.org/">FreeType</ulink>, which converts
    font glyphs of supported formats into bitmap glyphs. The rendering process is
    controled by parameters and an algorithm.
  </para>

  <para>
   Every program or library which uses FreeType should consult the
   <ulink url="http://www.fontconfig.org/">Fontconfig</ulink> library.
    This library gathers font configuration from users and from the system.
    
    When a user ameds his fontconfig setting, this change will evince the whole system.
  </para>

  <para>
    More sophisticated OpenType shaping needed for scripts such as Arabic, Han 
    or Phags-Pa as well as other higher level text processing lies on the shoulders 
    of <ulink url="http://www.harfbuzz.org/">Harfbuzz</ulink> or 
    <ulink url="http://www.pango.org/">Pango</ulink>, to mention some 
    examples.
  </para>

  <sect2 id="sec.x11.fontsys.installed-fonts">
    <title>Showing Installed Fonts</title>
    <para>To get an overview about which fonts are installed on your system, ask the commands
      <command>rpm</command> or <command>fc-list</command>. 
      Both gives you a good answers, but can return a different list depending on system's and users's 
      configuration:</para>
    
    <variablelist>
      <varlistentry>
        <term><command>rpm</command></term>
        <listitem>
          <para>Invoke <command>rpm</command> to see which software packages containing fonts are 
            installed on your system:</para>
          <screen>$ rpm -qa '*fonts*'</screen>
          <para>Every font package should satisfy this expression. However, the command can return 
            some false positives like <literal>fonts-config</literal> (which is neither a font nor it contains fonts). </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>fc-list</command></term>
        <listitem>
          <para>Invoke <command>fc-list</command> to get an overview about what font families
            an be accessed, be it installed on the system or in your home:</para>
          <screen>$ fc-list ':' family</screen>
          <note>
      <title>Command <command>fc-list</command></title>
      <para>The command <command>fc-list</command> is a wrapper to the Fontconfig library. 
        It is possible to query many interesting information from Fontconfig&#x2014; or, 
        to be more precisely, from its cache. See <command>man 1 fc-list</command> for 
        more details.
      </para>
    </note>

        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>
  
  <sect2 id="sec.x11.fontsys.viewing">
    <title>Viewing Fonts</title>
    <indexterm>
      <primary>font</primary>
      <secondary>information, see fontinfo.opensuse.org</secondary>
    </indexterm>
    <para>      
      If you want to know how an installed font family looks like, either use the command
      <command>ftview</command> (package <systemitem>ft2demos</systemitem>) or visit 
      <ulink url="http://fontinfo.opensuse.org/"/>.
      For example, to display the FreeMono font in 14 points, use <command>ftview</command>
      like this:
    </para>
    <screen>$ ftview 14 /usr/share/fonts/truetype/FreeMono.ttf</screen>
    <para>If you need further information, go to <ulink url="http://fontinfo.opensuse.org/"/> to
    find which styles (regular, bold, italic, etc.) and languages are supported.</para>
  </sect2>
  
  <sect2 id="sec.x11.fontsys.querying">
    <title>Querying Fonts</title>
    <para>To query which font is used when a pattern is given, use the <command>fc-match</command> command.</para>
    <para>For example, if your pattern contains an already installed font, <command>fc-match</command> returns 
    the file name, font family, and the style:</para>
    <screen>$ fc-match 'Liberation Serif'
LiberationSerif-Regular.ttf: "Liberation Serif" "Regular"</screen>
    <para>With <command>fc-mathc</command> you can determine which fonts are used for serif, sansserif, and
    monospace fonts:</para>
    <screen>$ for font in serif sans mono; do fc-match "$font" ; done
DejaVuSerif.ttf: "DejaVu Serif" "Book"
DejaVuSans.ttf: "DejaVu Sans" "Book"
DejaVuSansMono.ttf: "DejaVu Sans Mono" "Book"</screen>
    <para>The result may vary on your system, depending on which fonts are currently installed.</para>
    
    <para>If the desired font does not exist on your system, fontconfig's matching rules take place
    and try to find the best font available. This means, your request is <emphasis>replaced</emphasis>:</para>
    
    <screen>$ fc-match 'Foo Family'
DejaVuSans.ttf: "DejaVu Sans" "Book"</screen>

    <note>
      <title>Similarity Rules according to Fontconfig</title>
      <para>Fontconfig <emphasis>always</emphasis> returns a real family (if 
        at least one installed) according to given request, as far similar as 
        possible. <quote>Similarity</quote> depends on Fontconfig's internal
        metrics as well as on user's or administrator's fontconfig settings.
      </para>
    </note>
  </sect2>
  
  <sect2 id="sec.x11.fontsys.install">
    <title>Installing Fonts</title>
    <indexterm>
      <primary>X</primary>
      <secondary>install fonts</secondary>
    </indexterm>
    <indexterm>
      <primary>fonts</primary>
      <secondary>install</secondary>
    </indexterm>
    
    <para>To install a new font there are three major methods:</para>

    <orderedlist>
      <listitem>
        <para>Manually install the font files such as <filename>*.ttf</filename> or
          <filename>*.otf</filename> to a known font directory. If it needs to be 
          system wide, use the standard directory <filename>/usr/share/fonts</filename>.
          For installation in your home directory, use <filename>~/.config/fonts</filename>.
        </para>
        <para>If you want to deviate from the standard directories, Fontconfig allows you to 
          choose another one. Let Fontconfig know by using the <literal>&lt;dir&gt;</literal> element, see  <xref 
            linkend="sec.x11.fontsys.config.fontconfig"/> for details.</para>
      </listitem>
      <listitem>
        <para>Install fonts using <command>zypper</command>. Lots of fonts are already available as a 
          package, be it on your &suse; distribution or in the <ulink 
            url="http://download.opensuse.org/repositories/M17N:/fonts/">M17N:fonts</ulink> 
          repository. Add the repository to your list using the following command, for example <phrase 
            os="osuse">&opensuse; 13.1</phrase><phrase os="sles;sled">&slea;11</phrase>:
        </para>
        <screen os="osuse">$ sudo zypper ar http://download.opensuse.org/repositories/M17N:/fonts/openSUSE_13.1/M17N:fonts.repo</screen>
        <screen os="sles;sled">$ sudo zypper ar http://download.opensuse.org/repositories/M17N:/fonts/SLE_11_SP3/M17N:fonts.repo</screen>
        <para>
          To search for your <replaceable>FONT_FAMILY_NAME</replaceable> use this command:</para>
        <screen>$ sudo zypper se '<replaceable>FONT_FAMILY_NAME</replaceable>*fonts'</screen>
      </listitem>
      <listitem>
        <para>Install fonts using the 1-click process, available at <ulink url="http://fontinfo.opensuse.org/"/>, 
         section <quote>Software Package Information</quote>. It contains a font card (specimen). See also
        <xref linkend="sec.x11.fontsys.viewing"/>.</para>
      </listitem>
    </orderedlist>
    
  </sect2>

  <sect2 id="sec.x11.fontsys.config">
    <title>Configuring Fonts</title>
    <indexterm>
      <primary>font</primary>
      <secondary>configuration</secondary>
    </indexterm>
    <indexterm>
      <primary>font</primary>
      <secondary>rendering algorithms</secondary>
    </indexterm>
    <indexterm>
      <primary>font family</primary>
      <secondary>substitutions</secondary>
    </indexterm>

  <para>
    Administrator have important part done yet, selecting and installing 
    suitable font. Nevertheless, it might happen that he or she will start 
    to dislike how his favourite font is rendered from certain size down.
  </para>

  <para>
    That means several things. First, less than 300dpi rendering medium is
    used, i. e. pixels are not small enough to satisfy users eyes. Average
    monitor has today circa 100 dpi. Also, wrong rendering algorithm was 
    used, at least from this particular user point of view.
  </para>

  <para>
    There are several algorithms out to face low dpi, such as antialiasing 
    smoothing, hinting (fitting to the grid) or subpixel rendering (tripling
    dpi in one direction). These algorithms can also differ from one font
    format to another.
  </para>

  <important>
    <para>
      Subpixel rendering is not used. Although FreeType2 have support for this
      algorithm, it is covered by several patents expiring at the end of
      year 2019. Therefore, setting subpixel rendering options in fontconfig
      has no effect as long as system has FreeType2 library with subpixel
      rendering not compiled in.
    </para>
  </important>

  <para>
    Via fontconfig, it is possible to select rendering algorithms for every
    font individually or for set of fonts.
  </para>

  <para>
    In fontconfig, there is also an option to substitute one family name to
    another trough <emphasis role='italic'>alias</emphasis> mechanism. As
    special example, generic names such as <literal>sans-serif</literal>,
    <literal>serif</literal> or <literal>monospace</literal> can be subsituted
    by real family names or even to preference list of family names. In these
    lists will fontconfig look as soon as request for such generic name is
    permormed:
  </para>
  <screen>$ fc-match monospace
LiberationMono-Regular.ttf: "Liberation Mono" "Regular"</screen>

  <sect3 id="sec.x11.fontsys.config.sysconfig">
    <title>Configuring Fonts via <literal>sysconfig</literal></title>
    <para>
      &productname; come up with <literal>sysconfig</literal> layer above
      fontconfig XML files with hope it is good starting point for
       experimenting with font configuration. For this purpose, edit
      <filename>/etc/sysconfig/fonts-config</filename>, or use YaST 
      sysconfig module. Then run
    </para>
    <screen># /usr/sbin/fonts-config</screen>
    <para>
      as root and rerun the application to take the effect.
    </para>

    <note>
      <itemizedlist>
        <listitem>
          <para>
            Some applications time to time reread font configuration. E. g. newly
            created or reloaded Firefox's tabs might get new font configuration.
          </para>
        </listitem>
        <listitem>
          <para>
            <command>fonts-config</command> script is called after every software
            package installation or removal automatically (if not, it is a bug
            of font software package).
          </para>
        </listitem>
        <listitem>
          <para>
            Every sysconfig variable can be temporarily overriden by 
            <command>fonts-config</command> command line option. See
            <command>fonts-config --help</command> for details.
          </para>
        </listitem>
      </itemizedlist>      
    </note>

    <para>
      For explanation of particular sysconfig variables, see 
      <command>man 1 fonts-config</command> or help of YaST sysconfig module.
      From rendering algorithms usage point of view, consider
      <literal>FORCE_HINTSTYLE</literal>, <literal>FORCE_AUTOHINT</literal>,
      <literal>FORCE_BW</literal>, <literal>FORCE_BW_MONOSPACE</literal>,
      <literal>USE_EMBEDDED_BITMAPS</literal> and 
      <literal>EMBEDDED_BITMAP_LANGAGES</literal>. With 
      <literal>PREFER_SANS_FAMILIES</literal>, 
      <literal>PREFER_SERIF_FAMILIES</literal>,
      <literal>PREFER_MONO_FAMILIES</literal> and
      <literal>SEARCH_METRIC_COMPATIBLE</literal> variables administrator
      can alter preference lists of generic aliases for sans-serif, 
      serif and monospace.
    </para>

    <para>
      At the end of this section, we will provide you by enumeration
      of configuration examples, sorted from <quote>most readable</quote> fonts
      (more contrast) to <quote>most beautiful</quote> fonts (more smoothed).
    </para>

    <example id="ex.x11.fontsys.sysconfig.bitmap">
       <title>Bitmap fonts.</title>
       <para>
         Prefer bitmap fonts via <literal>PREFER_*_FAMILIES</literal>. 
         Just follow relevant example in the help to this variables. System 
         will get fonts rendered black and white, not smoothed. Bitmap fonts
         also provides several sizes only. Consider
       </para>
       <screen>SEARCH_METRIC_COMPATIBLE="no"</screen> 
       <para>
         to disable metric compatibility driven family name substitutions.
       </para>
    </example>
    <example id="ex.x11.fontsys.sysconfig.bw">
      <title>Scalable fonts rendered black and white.</title>
      <para>
        Scalable fonts rendered without antialiasing can result in similar 
        outcome like bitmap fonts, when rendering well hinted fonts like 
        Liberation families, while maintaining font scalability. There is lack 
        of well hinted fonts though. Set
      </para>
      <screen>FORCE_BW="yes"</screen>
    </example>
    <example id="ex.x11.fontsys.sysconfig.bw_monospace">
      <title>Monospaced fonts rendered black and white.</title>
      <para>
        Render without antialiasing monospaced fonts only, otherwise use
        Default setting.
      </para>
      <screen>FORCE_BW_MONOSPACE="yes"</screen>
    </example>
    <example id="ex.x11.fontsys.sysconfig.default">
      <title>Default.</title>
      <para>
        All fonts are rendered with antialiasing, well hinted fonts with byte
        code interpreter (BCI) and with autohinter 
        (with <literal>hintstyle=hintslight</literal>) the rest. Leave all relevant 
        sysconfig in the default setting.
      </para>
    </example>
    <example id="ex.x11.fontsys.sysconfig.cff">
      <title>CFF Fonts.</title>
      <para>
        Use fonts of CFF format. They can be considered also more readable
        than default TrueType fonts
        given current improvements to FreeType2. Try them out by following
        example of <literal>PREFER_*_FAMILIES</literal>. Also consider to use
      </para>
      <screen>SEARCH_METRIC_COMPATIBLE="no"</screen>
    </example>
    <example id="ex.x11.fontsys.sysconfig.autohint">
      <title>Use autohinter exclusively.</title>
      <para>
         Even for well hinted font, use FreeType2's autohinter. That can lead
         to more thick stems with lower contrast and sometimes to fuzzier 
         results. Set
      </para>
      <screen>FORCE_AUTOHINTER="yes"</screen>
    </example>
  </sect3>
  
  <sect3 id="sec.x11.fontsys.config.fontconfig">
  <title>Diving into Fontconfig XML</title>
  <para>
    We limit ourselves to few examples instead of complete reference, which
    would be very extensive. Details and other inspiration can be found in
    <command>man 5 fonts-conf</command> or in 
    <filename>/etc/fonts/conf.d/</filename>.
  </para>
    
  <para>
    The starting point of Fontconfig configuration is 
    <filename>/etc/fonts/fonts.conf</filename>, which, along other work,
    includes whole <filename>/etc/fonts/conf.d/</filename> directory.
  </para>

  <note>
    <itemizedlist>
      <listitem>
        <para>
          <filename>/etc/fonts/conf.d/*-local.conf</filename> includes
          <filename>/etc/fonts/local.conf</filename>. Manual system wide
          changes should go into that file.
        </para>
      </listitem>
      <listitem>
        <para>
          <filename>/etc/fonts/conf.d/*-user.conf</filename> includes also
          <filename>~/.config/fontconfig/fonts.conf</filename> file and
          <filename>~/.config/fontconfig/conf.d</filename> directory. User
          specific changes should go there. <filename>~/.fonts.conf</filename>
          and <filename>~/.fonts.conf.d/</filename> are included as well,
          but these locations are deprecated.
        </para>
      </listitem>  
    </itemizedlist>
  </note>

  <para>
    Every fontconfig XML file must start with header
  </para>
  <screen>&lt;?xml version="1.0"?>
&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd">
&lt;fontconfig></screen>
  <para>
    and be closed with tailer
  </para>
  <screen>&lt;/fontconfig></screen>

  <example id="ex.x11.fontsys.fontconfig.dir_directive">
    <title>Defining font directory.</title>
    <para>
       If font files really has to be stored somewhere else than 
       in <filename>/usr/share/fonts</filename> and cannot be symlinked
       there, use
    </para>
    <screen>&lt;dir>/usr/share/fonts2&lt;/dir></screen>
    <para>
       to let fontconfig know. This directory is searched for fonts
       <emphasis role="underline">recursively.</emphasis>
    </para>
  </example>

  <example id="ex.x11.fontsys.fontconfig.rendering_algoritms">
    <title>Specifying endering algorithms.</title>
    <para>
      Font rendering algorithms can be chosen with following-like
      fontconfig snippet:
    </para>
    <screen>&lt;match target="font">
        &lt;test name="family">
                &lt;string><replaceable>FAMILY_NAME</replaceable>&lt;/string>
        &lt;/test>
        &lt;edit name="antialias" mode="assign">
                &lt;bool>true&lt;/bool>
        &lt;/edit>
        &lt;edit name="hinting" mode="assign">
                &lt;bool>true&lt;/bool>
        &lt;/edit>
        &lt;edit name="autohint" mode="assign">
                &lt;bool>false&lt;/bool>
        &lt;/edit>
        &lt;edit name="hintstyle" mode="assign">
                &lt;const>hintfull&lt;/const>
        &lt;/edit>
&lt;/match></screen>
  </example>

  <para>
    Various properties of fonts can be <literal>&lt;test></literal>ed,
    such as size interval, spacing, font format, languages it supports, 
    etc. When abandoning <literal>&lt;test></literal> completely,
    <literal>&lt;edit></literal>s applies to every font (global change).
  </para>

  <example id="ex.x11.fontsys.fontconfig.aliases1">
    <title>Aliases and family names substitutions.</title>
    <variablelist>
      <varlistentry id="vle.x11.fontsys.example.alias.default">
        <term>rule 1</term>
        <listitem>
          <screen>&lt;alias>
        &lt;family>Alegreya SC&lt;/family>
        &lt;default>
                &lt;family>serif&lt;/family>
        &lt;/default>
&lt;/alias></screen>
        </listitem>
      </varlistentry>
      <varlistentry id="vle.x11.fontsys.example.alias.prefer">
        <term>rule 2</term>
        <listitem>
          <screen>&lt;alias>
        &lt;family>serif&lt;/family>
        &lt;prefer>
                &lt;family>Droid Serif&lt;/family>
        &lt;/prefer>
&lt;/alias></screen>
        </listitem>
      </varlistentry>
      <varlistentry id="vle.x11.fontsys.example.alias.accept">
        <term>rule 3</term>
        <listitem>
          <screen>&lt;alias>
        &lt;family>serif&lt;/family>
        &lt;accept>
                &lt;family>STIXGeneral&lt;/family>
        &lt;/accept>
&lt;/alias></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </example>

  <para>
    We can think of Fontconfig's alias mechanism like of creating prioritized 
    family list (PFL).
    <literal>&lt;default></literal> alias from 
    <xref linkend="vle.x11.fontsys.example.alias.default"/> will add 
    <literal>serif</literal> family name 
    <emphasis role="bold">at the end</emphasis> of PFL, whenever 
    <literal>Alegreya SC</literal> is present in PFL;
    <literal>&lt;prefer></literal> from 
    <xref linkend="vle.x11.fontsys.example.alias.prefer"/> will add
    <literal>Droid Serif</literal> <emphasis role="bold">
    just before</emphasis> first occurence of <literal>serif</literal> 
    in the PFL; <literal>&lt;accept></literal> in 
    <xref linkend="vle.x11.fontsys.example.alias.accept"/> 
    will add <literal>STIXGeneral</literal> family name 
    <emphasis role="bold">just after</emphasis> first occurence of
    <literal>serif</literal> family name in the PFL.
  </para>
   
  <para>
    Putting this together, when snippets occur in order 
    <xref linkend="vle.x11.fontsys.example.alias.default"/> -
    <xref linkend="vle.x11.fontsys.example.alias.prefer"/> -
    <xref linkend="vle.x11.fontsys.example.alias.accept"/> and user requests
    <literal>Alegreya SC</literal>, then PFL is created as follows:
  </para>

  <table id="tab.x11.fontsys.example.alias">
    <title>Generating PFL from fontconfig rules</title>
    <tgroup cols="2">
      <thead>
        <row>
          <entry><para>Step</para></entry>
          <entry><para>Current PFL</para></entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><para>Request</para></entry>
          <entry><para><literal>Alegreya SC</literal></para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.default"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>serif</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.prefer"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>serif</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.accept"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>serif</literal>,
            <literal>STIXGeneral</literal>
          </para></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <para>
    In the Fontconfig's metrics, family name has highest priority over other
    pattern entities, like style, size, etc. Fontconfig now checks which 
    family is currently installed on the system. If 
    <literal>Alegreya SC</literal> is installed, then fontconfig returns 
    it. If not, asks for <literal>Droid Serif</literal>, etc.
  </para>

  <para>
    But be careful! When order of fontconfig snippets is changed, system can
    return different results:
  </para>

  <table id="tab.x11.fontsys.example.alias2">
    <title>Generating PFL from fontconfig rules</title>
    <tgroup cols="3">
      <thead>
        <row>
          <entry><para>Step</para></entry>
          <entry><para>Current PFL</para></entry>
          <entry><para>Note</para></entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><para>Request</para></entry>
          <entry><para><literal>Alegreya SC</literal></para></entry>
          <entry><para>Same request performed.</para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.prefer"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>
          </para></entry>
          <entry><para>
            <literal>serif</literal> not in FPL, nothing is substituted
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.accept"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>
          </para></entry>
          <entry><para>
            <literal>serif</literal> not in FPL, nothing is substituted
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.default"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>serif</literal>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal> present in FPL, substitution 
            is performed
          </para></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <title>Implication.</title>
    <para>
      We can think about <literal>&lt;default></literal> alias like 
      classification or inclusion in the group. Purpose is to have 
      a possibility to substitute one family to another inside this
      group (if not installed). As example shows,
      <literal>&lt;default></literal> should always precede 
      <literal>&lt;prefer></literal> and <literal>&lt;accept></literal>
      aliases of that group.
    </para>

    <para>
      We can also think about fontconfig alias system as of oriented graph.
      <literal>&lt;default></literal> alias creates edges from specific
      families (here <literal>Alegreya SC</literal>) to generic names
      (here <literal>serif</literal>), whereas 
      <literal>&lt;prefer></literal> and <literal>&lt;accept></literal>
      aliases create edges from generics (here <literal>serif</literal>)
      to specifics (here <literal>Droid Serif</literal> and 
      <literal>STIXGeneral</literal>).
    </para>
  </note>

  <example id="ex.x11.fontsys.fontconfig.aliases2">
    <title>Aliases and family names substitutions.</title>
    <para>
      Following fontconfig snippet would lead to complete oriented tree
      with root <literal>serif</literal>. In other words, every family
      in group <literal>serif</literal> could substitute to other in 
      that group, when the former not installed.
    </para>
    <screen>&lt;alias>
        &lt;family>Alegreya SC&lt;/family>
        &lt;default>
                &lt;family>serif&lt;/family>
        &lt;/default>
&lt;/alias>
&lt;alias>
        &lt;family>Droid Serif&lt;/family>
        &lt;default>
                &lt;family>serif&lt;/family>
        &lt;/default>
&lt;/alias>
&lt;alias>
        &lt;family>STIXGeneral&lt;/family>
        &lt;default>
                &lt;family>serif&lt;/family>
        &lt;/default>
&lt;/alias>
&lt;alias>
        &lt;family>serif&lt;/family>
        &lt;accept>
                &lt;family>Droid Serif&lt;/family>
                &lt;family>STIXGeneral&lt;/family>
                &lt;family>Alegreya SC&lt;/family>
        &lt;/accept>
&lt;/alias></screen>
    <para>
      Priority is given by order in <literal>&lt;accept></literal> alias.
      Similarly, stronger <literal>&lt;prefer></literal> alias can be used.
    </para>
  </example>

  <example id="ex.x11.fontsys.fontconfig.aliases3">
    <title>Aliases and family names substitutions.</title>
    <para>
      When we expand example <xref linkend="ex.x11.fontsys.fontconfig.aliases1"/> by
    </para>

    <variablelist>
      <varlistentry id="vle.x11.fontsys.example.alias.accept2">
        <term>rule 4</term>
        <listitem>
          <screen>&lt;alias>
        &lt;family>serif&lt;/family>
        &lt;accept>
                &lt;family>Liberation Serif&lt;/family>
        &lt;/accept>
&lt;/alias></screen>
        </listitem>
      </varlistentry>
      <varlistentry id="vle.x11.fontsys.example.alias.prefer2">
        <term>rule 5</term>
        <listitem>
          <screen>&lt;alias>
        &lt;family>serif&lt;/family>
        &lt;prefer>
                &lt;family>DejaVu Serif&lt;/family>
        &lt;/prefer>
&lt;/alias></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </example>

  <para>
    This would lead following PFL evolution:
  </para>

  <table id="tab.x11.fontsys.example.alias3">
    <title>Generating PFL from fontconfig rules</title>
    <tgroup cols="2">
      <thead>
        <row>
          <entry><para>Step</para></entry>
          <entry><para>Current PFL</para></entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry><para>Request</para></entry>
          <entry><para><literal>Alegreya SC</literal></para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.default"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>serif</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.prefer"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>serif</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.accept"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>serif</literal>,
            <literal>STIXGeneral</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.accept2"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>serif</literal>,
            <literal>Liberation Serif</literal>,
            <literal>STIXGeneral</literal>
          </para></entry>
        </row>
        <row>
          <entry><para>
            <xref linkend="vle.x11.fontsys.example.alias.prefer2"/>
          </para></entry>
          <entry><para>
            <literal>Alegreya SC</literal>,
            <literal>Droid Serif</literal>,
            <literal>DejaVu Serif</literal>,
            <literal>serif</literal>,
            <literal>Liberation Serif</literal>,
            <literal>STIXGeneral</literal>
          </para></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <title>Implications.</title>
    <itemizedlist>
      <listitem>
        <para>
          Former <literal>&lt;accept></literal> is shadowed by later 
          <literal>&lt;accept></literal> for the same generic name.
          If possible, do not use <literal>&lt;accept></literal>
          <emphasis role="bold">after</emphasis> user 
          (<filename>/etc/fonts/conf.d/*-user.conf</filename>) when
          creating system wide configuration.
        </para>
      </listitem>
      <listitem>
        <para>
          Former <literal>&lt;prefer></literal> shadows later 
          <literal>&lt;prefer></literal> for the same generic name.
          If possible, do not use <literal>&lt;prefer></literal>
          <emphasis role="bold">before</emphasis> user in
          the system wide configuration.
        </para>
      </listitem>
      <listitem>
        <para>
          Every <literal>&lt;prefer></literal> shadows every 
          <literal>&lt;accept></literal> when used for the same generic
          name. If administrator want to leave user free hands to use
          even <literal>&lt;accept></literal>, not only 
          <literal>&lt;prefer></literal>, does not use 
          <literal>&lt;prefer></literal> at all in system wide configuration.
          On the other hand, users use <literal>&lt;prefer></literal> in 
          majority, so that should not harm and we see using 
          <literal>&lt;prefer></literal> also in system wide configuration.
        </para>
      </listitem>
    </itemizedlist>
  </note>

  </sect3>
  </sect2>
</sect1>

