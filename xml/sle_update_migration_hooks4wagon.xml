<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter version="5.0" xml:id="cha.update.wagon-hooks"
  xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Migration Hooks for &yast; Wagon</title>
  <info>
    <abstract>
      <para>TODO </para>
    </abstract>
  </info>

  <sect1 xml:id="sec.update.wagonhooks">
    <title>Background Information</title>
    <!-- FATE#314132 -->

    <para> Migration hooks allow you to run a custom external script at
      some point during the migration process. These scripts allow you
      to handle specific problems that cannot be handled via the usual
      RPM scripts, or allow you to perform any extra actions that might
      be needed during migration (not required during normal package
      update). </para>

    <para> The migration hooks are executed with root privileges so it
      is possible to do any maintenance tasks in the scripts
      (starting/stopping services, data backup, data migration, etc...).
      The scripts must not be interactive; STDIN and STDOUT are
      redirected to pipes when running in &yast;. The X session should
      not be used, as it might not be available in all cases (for
      example, when running in text mode). Do not forget to set the
      executable permission for the hook scripts. </para>

    <para> Migration hooks are supported in <systemitem class="resource"
        >yast2-wagon</systemitem> package version 2.17.32.1 (provided as
      an update for SLES11-SP2) or 2.17.34 (included in SLES11-SP3) or
      higher versions. </para>

    <sect2>
      <title>Hook Script Location and Name Conventions</title>
      <para> The scripts are searched in
          <filename>/var/lib/YaST2/wagon/hooks/</filename> directory.
        The expected script name is in the format
          <replaceable>step_seq_prefix_name</replaceable>, where: </para>
      <variablelist>
        <varlistentry>
          <term><replaceable>step</replaceable>
          </term>
          <listitem>
            <para> is a predefined migration step name, describing the
              current migration step. </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>seq</replaceable>
          </term>
          <listitem>
            <para> is a sequence number in range 00...99, which makes it
              possible to set the order in which the scripts are
              executed. (It is important to keep the zeros at the
              beginning to enable correct sorting!) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>prefix</replaceable>
          </term>
          <listitem>
            <para> should be unique to avoid conflicts (like a
              namespace). Use package name (if it is part of a package)
              or your vendor name, Internet domain name, etc., anything
              that can be considered sufficiently unique </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>name</replaceable>
          </term>
          <listitem>
            <para> can be any string (used to differentiate the
              scripts). Some descriptive name is recommended. </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <example>
        <title>Hook Script with Full Path</title>
        <screen>/var/lib/YaST2/wagon/hooks/before_package_migration_00_postgresql_backup</screen>
      </example>
    </sect2>

    <sect2>
      <title>Hook Script Exit Value</title>
      <para> The script should return exit value 0. If it fails (any
        non-zero exit value) an error message is displayed in Wagon and
        it is possible to restart the script, ignore the failure (and
        continue with other scripts) or completely cancel the hooks for
        the current step and stage. </para>
    </sect2>

    <sect2>
      <title>Idempotent Scripts</title>
      <para> The hook scripts <emphasis>can be potentially run more
          times</emphasis> (when going back and forth in the Wagon
        dialogs, Wagon might restart itself or some steps might be
        executed multiple times in the migration workflow), so the
        scripts have to cope with that fact (they can check at the
        beginning whether they need to do the action or the action has
        been already done or they can create a simple temporary stamp
        file or otherwise solve multiple runs properly). </para>
    </sect2>

    <sect2>
      <title>List of Supported Hooks</title>
      <remark>toms 2014-02-11: See Trello card#39,
        https://github.com/yast/yast-yast2/blob/master/library/general/doc/Hooks.md</remark>
      <para> Some hooks are optional (because the depend on the previous
        results or depend on user selected values). Note that some hooks
        are called multiple times (for example, registration is called
        before migration and after migration). Here is the list of
        supported hooks (step names) in execution order: </para>
      <variablelist>
        <varlistentry>
          <term><command>before_init</command>
          </term>
          <listitem>
            <para> started at the very beginning (note: it is called
              again after Wagon restarts) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_welcome</command>
          </term>
          <term><command>after_welcome</command>
          </term>
          <listitem>
            <para> started before/after displaying the welcome dialog
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_registration_check</command>
          </term>
          <term><command>after_registration_check</command>
          </term>
          <listitem>
            <para> Wagon checks the registration status (if registration
              of some products has expired the migration might fail). If
              everything is OK, no dialog is displayed and Wagon
              automatically continues with the next step </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_custom_url</command>
          </term>
          <term><command>after_custom_url</command>
          </term>
          <listitem>
            <para> repository manager is started (optional, in Patch CD
              mode only) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_self_update</command>
          </term>
          <term><command>after_self_update</command>
          </term>
          <listitem>
            <para> called before/after Wagon updates itself (to ensure
              the latest version is used for migration) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_installing_migration_products</command>
          </term>
          <term><command>after_installing_migration_products</command>
          </term>
          <listitem>
            <para> called before/after installing the migration products
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_selecting_migration_source</command>
          </term>
          <term><command>after_selecting_migration_source</command>
          </term>
          <listitem>
            <para> Wagon asks the user to migrate via &ncc; repositories
              or using a custom repository; the next step depends on the
              user selection </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_registration</command>
          </term>
          <term><command>after_registration</command>
          </term>
          <listitem>
            <para> running SUSE register (to add migration repositories)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_repo_selection</command>
          </term>
          <term><command>after_repo_selection</command>
          </term>
          <listitem>
            <para> manual repository management </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_set_migration_repo</command>
          </term>
          <term><command>after_set_migration_repo</command>
          </term>
          <listitem>
            <para> selecting migration repositories (full/minimal
              migration when using &ncc;) or update repository selection
              (custom repository migration) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_package_migration</command>
          </term>
          <listitem>
            <para> before package update starts, after this step the
              real migration starts and it is not possible to go back to
              the previous state automatically (aborting in this phase
              results in an inconsistent (half upgraded) system, and
              manual rollback is needed) </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_registration</command>
          </term>
          <term><command>after_registration</command>
          </term>
          <listitem>
            <para> running SUSE register (to register updated products)
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_congratulate</command>
          </term>
          <term><command>after_congratulate</command>
          </term>
          <listitem>
            <para> before/after Wagon displays the congratulation dialog
              as a result of a successful migration </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_exit</command>
          </term>
          <listitem>
            <para> called just before Wagon exits (always, regardless
              the migration result, also after abort and at restart)
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>Abort Hooks</title>
      <para> These are special abort hooks which are called when the
        user aborts the migration. These hooks can be called in any step
        in the migration workflow therefore the execution order cannot
        be guaranteed. The scripts need to check the current state if
        they rely on the results of other hooks. </para>
      <variablelist>
        <varlistentry>
          <term><command>before_abort</command>
          </term>
          <listitem>
            <para> user confirmed aborting the migration </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>before_abort_rollback</command>
          </term>
          <term><command>after_abort_rollback</command>
          </term>
          <listitem>
            <para> user confirmed rollback after abort (reverting to the
              old products installed before starting migration). These
              hooks are called after before_abort and skipped when the
              user does not confirm rollback. </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>Restart Hooks</title>
      <para> These hooks are called whenever Wagon restarts itself. </para>
      <variablelist>
        <varlistentry>
          <term><command>before_restart</command>
          </term>
          <listitem>
            <para> Wagon is finishing and will be started again </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><command>after_restart</command>
          </term>
          <listitem>
            <para> Wagon has restarted and runs the next step in the
              migration workflow </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>

    <sect2>
      <title>Usually Used Hooks</title>
      <para> The list of hooks is fairly large, but many of them only
        make sense in special cases. In normal use cases these should be
        given preference: </para>
      <itemizedlist mark="bullet" spacing="normal">
        <listitem>
          <para> To do some action before the system is migrated (still
            running the previous version) use the
              <command>before_package_migration</command> hook. </para>
          <para> At this point it is clear that the migration is ready
            and is about to start, whereas in all steps before it was
            possible to abort the migration.
            <!-- and therefore calling the
           scripts might have not been necessary -->
          </para>
        </listitem>
        <listitem>
          <para> To do some action after the system has migrated (the
            system is running the new migrated version, but some things
            might not be active yet, for example, updated kernel
            requires reboot, updated services might need restart etc..),
            use <command>before_congratulate</command> or
              <command>after_congratulate</command> hook. </para>
          <para> This can be also used for cleaning up the temporary
            results of the <command>before_package_migration</command>
            hook. At this point the migration has successfully finished.
          </para>
        </listitem>
        <listitem>
          <para> To reverse the changes if the migration is aborted, use
            one of the abort hooks depending on the case. Keep in mind
            that the abort hooks can be called anytime, so the revert
            might not be needed (the hook that does the changes might
            not have been called yet). The abort hooks need to check the
            current state. </para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>Obsolete Hooks</title>
      <para> Older versions of Wagon supported only two hook scripts:
          <filename>/usr/lib/YaST2/bin/wagon_hook_init</filename> and
          <filename>/usr/lib/YaST2/bin/wagon_hook_finish</filename>. The
        problem was that only one script could be run as a hook and it
        was not possible to put hooks directly into RPM packages. </para>
      <para> These old hook scripts are still supported in newer
        versions of Wagon for backward compatibility, but the new hooks
          <command>before_init</command> and
          <command>before_exit</command> should be used instead of the
        obsolete ones. </para>
    </sect2>
  </sect1>


</chapter>
