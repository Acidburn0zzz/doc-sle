<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="docker.dockerizing.application" xml:lang="en">
	<title>Dockerizing Applications</title>
	<para>
	Docker is a technology that can help you to minimize resources used to run or build your applications. There are several types of applications that are suitable to run inside a docker container like daemons, web pages or applications that expose ports for communication. You can use docker for automation of building and deployment processes by adding the build process into a docker image, then building the image and then running containers based on that image.
	</para> 
	<para>
	Running your application inside a docker container provides you with the following advantages:
	</para>
	<itemizedlist>
		<listitem>
			<para>
			You can minimize the runtime environment of the application as you can add to the docker image of the application just the required processes and apllications.
			</para>
		</listitem>
		<listitem>
			<para>
			The image with your application is portable across machines also with different linux host systems.
			</para>
		</listitem>
		<listitem>
			<para>
			You can share the image of your application by using a repository.
			</para>
		</listitem>
		<listitem>
			<para>
			You can use different versions of required packages in the container than the host system uses without having problems with dependencies.
			</para>
		</listitem>
		<listitem>
			<para>
			You can run several instances of the same application that are completely independent on each other.
			</para>
		</listitem>
	</itemizedlist>
	<para>
	Using docker for building of applications provides the following features:
	</para>
	<itemizedlist>
		<listitem>
			<para>
			You can prepare a complete building image.
			</para>
		</listitem>
		<listitem>
			<para>
			Your build runs always in the same environment.
			</para>
		</listitem>
		<listitem>
			<para>
			Your developers can test their code in the same environment as used in production.
			</para>
		</listitem>
		<listitem>
			<para>
			You can set up an automated bulding process.
			</para>
		</listitem>
	</itemizedlist>
	<para>
	The following sections provides you with examples and tips how to dockerize your applications. Prior to reading further, please make sure that you have activated your &slsa; base docker image as described in the <xref linkend="Building_Pre-build_Images"/>. 
	</para>
	<sect1 xml:id="Application_with_specific_dependencies">
		<title>Running an Application with Specific Package Versions</title>
		<para>
		You may face a problem that your application uses a specific version of a package that is different from the package installed on the system that should run your application. You can modify your application to work with another version or you may create a docker image with that particular package version. The following example of a <filename>Dockerfile</filename> shows image based on a current version of  &slsa; but with an older version of the <literal>example</literal> package
		</para>
		<screen>
		FROM suse/sles12:latest
		MAINTAINER Tux
		
		RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
		COPY application.rpm /tmp/
		
		RUN zypper --non-interactive in /tmp/application.rpm
				
		ENTRYPOINT ["/etc/bin/application"]
		
		CMD ["-i"]
		</screen>
		<para>
		Now you can build the image by running in the same folder as the <filename>Dockerfile</filename> resides:
		</para>
		<screen>
		docker build --tag tux_application:latest 
		</screen>
		<para>
		The <filename>Dockerfile</filename> examples shown above performs the following operations during the <command>docker build</command>:
		</para>
		<orderedlist>
			<listitem>
				<para>
				updates the &slsa; repositories.
				</para>
			</listitem>
			<listitem>
				<para>
				installs the desired version of the <literal>example</literal> package.
				</para>
			</listitem>
			<listitem>
				<para>
				copies your application package to the image. The source rpm must be place to the build context. 
				</para>
			</listitem>
			<listitem>
				<para>
				unpacks your application. 
				</para>
			</listitem>
			<listitem>
				<para>
				the last two steps run your application after a container is started.
				</para>
			</listitem>
		</orderedlist>
		
		<para>
		After a successful build of the <literal>tux_application</literal> image, you can start a container based on your new image:
		</para>
		<screen>
		docker run -it --name application_instance tux_application:latest 
		</screen>
		<para>
		You have just created a container that runs a single instance of your application. Please bear in mind that after closing the application, the docker container exits as well.
		</para>
	</sect1>
	<sect1 xml:id="Applications_with_Configuration">
		<title>Running Applications with Specific Configuration</title>
		<para>
		You may need to run application that is delivered in a standard package accessible through &slsa; repositories but you may need to use a different configuration or use specific environment variables. In case you would like to run several instances of the application with non-standard configuration, you can create your own image that will pass the custom configuration to the application. 
		</para>
		<para>
		An example with the <emphasis>example</emphasis> application follows:
		</para>		
		<screen>
		FROM suse/sles12:latest
		
		RUN zypper ref &amp;&amp; zypper --non-interactive in example
		
		ENV BACKUP=/backup
		
		RUN mkdir -p $BACKUP
		COPY configuration_example /etc/example/
		
		ENTRYPOINT ["/etc/bin/example"]
		</screen>
		<para>
		The above example <filename>Dockerfile</filename> results in the following operations:
		</para>
		<orderedlist>
			<listitem>
				<para>
				refreshing of repositories and installation of the <emphasis>example</emphasis>.
				</para>
			</listitem>
			<listitem>
				<para>
				sets a <literal>BACKUP</literal> environment variable (the variable persists to containers started from the image). You can always overwrite the value of the variable by a new one during running the container and specifying a new value.
				</para>
			</listitem>
			<listitem>
				<para>
				creates the folder <literal>/backup</literal>.
				</para>
			</listitem>
			<listitem>
				<para>
				copies the  <filename>configuration_example</filename> to the image.
				</para>
			</listitem>
			<listitem>
				<para>
				runs the <emphasis>example</emphasis> application. 
				</para>
			</listitem>
		</orderedlist>
		<para>
		Now you can build the image and after a successful build, you can run a container based on your image.
		</para>
	</sect1>
	<sect1 xml:id="Running_Application_with_Volumes">
		<title>Sharing Data Between Application and the Host System</title>
		<para>
		You may run an application that needs to share data between the application's container and the host filesystem. Docker enables you to do data sharing by using volumes. You can declare a mounting point directly in the <filename>Dockerfile</filename>. But you cannot specify a directory on the host system in the <filename>Dockerfile</filename> as the directory may not be accessible at the build time. You can find the mounted directory in the <literal>/var/lib/docker/volumes/</literal> directory on the host system.
		</para>		
		<note>
		<title>Discarding changes to the directory to be shared</title>
		<para>
		After you declare a mount point by using the <literal>VOLUME</literal> instruction, all your changes performed (by using the <literal>RUN</literal> instruction) to the directory will be discarded. After the declaration, the volume is part of a temporary container that is then removed after a successful build. In case you need to e.g. change permissions, perform the change before you declare the directory as a mount point in the <filename>Dockerfile</filename>.
		</para>
		</note>
		<para>
		You can specify a particular mount point on the host system when running a container by using the <literal>-v</literal> option:
		</para>
		<screen>
		docker run -it --name testing -v /home/tux/data:/data sles12:latest /bin/bash
		</screen>
		<note>
		<para>
		Using the <literal>-v</literal> option overwrites the <literal>VOLUME</literal> instruction if you specify the same mount point in the container.
		</para>
		</note>
		<para>
		Now let's create an example image with a web server that will read web content from the host's filesystem. The <filename>Dockerfile</filename> could look as follows:
		</para>
		<screen>
		FROM suse/sles12:latest
				
		RUN zypper ref &amp;&amp; zypper --non-interactive in apache2
		
		COPY apache2 /etc/sysconfig/
		
		RUN chown -R admin /data
		
		EXPOSE 80
		
		VOLUME /data
		
		ENTRYPOINT ["apache2ctl"]
		</screen>
		<para>
		The example above installs the Apache web server to the image, copies all your configuration to the image. The <literal>data</literal> folder will be owned by the <emphasis>admin</emphasis> user and will be used as a mount point to store your web pages. 
		</para>
	</sect1>
	<sect1 xml:id="docker_daemons">
		<title>Applications Running in Background</title>
		<para>
		Your application may need to run in background as a daemon or as an application exposing ports for communication. In that case   a typical docker container may be run in background. Do not run your application in the container in background as it may cause exitting of the container. Run the container in background instead. An example <filename>Dockerfile</filename> for an application exposing port looks as follows:
		</para>
		<screen>
		FROM suse/sles12:latest
				
		RUN zypper ref &amp;&amp; zypper --non-interactive in postfix
		RUN mkdir -p /var/spool/mail
		
		COPY main.cf /etc/postfix/main.cf
		
		EXPOSE 25 587
		
		VOLUME ["/var/spool/mail"]		
		ENTRYPOINT ["/usr/sbin/postfix"]
		</screen>
		<para>
		Now you can build your image. Docker performs the following operations according to the instrunctions in the <filename>Dockerfile</filename>:
		</para>
		<orderedlist>
			<listitem>
				<para>
				Docker refreshes repositories and installs the <emphasis>postfix</emphasis> mail server as it is not installed by default in the &slsa; docker image.
				</para>
			</listitem>
			<listitem>
				<para>
				the <literal>/var/spool/mailboxes</literal> directory is created in the filesystem of the image. The directory will store all mailboxes if you configure the mail server to store data in this directory. 
				</para>
			</listitem>
			<listitem>
				<para>
				here you copy a configuration file to the particular directory. Make sure that the <filename>main.cf</filename> is located in the same directory as the <filename>Dockerfile</filename>. Please bear in mind that the configuration will be the same for all instance run in the future. In case you need a different configuration for each container, you will have to edit it after running the container.
				</para>
			</listitem>
			<listitem>
				<para>
				each started container will expose the ports: <emphasis>25</emphasis> and <emphasis>587</emphasis>. In case you will run several instances of this image on the same machine, you should define a specific hostname for each container.
				</para>
			</listitem>
			<listitem>
				<para>
				the <literal>VOLUME</literal> instruction creates a mounting point at the <literal>/var/spool/mail</literal> directory in the container.
				</para>
			</listitem>
			<listitem>
				<para>
				the last instructions runs the <literal>postfix</literal> mail server in the started container.
				</para>
			</listitem>
		</orderedlist>
		<para>
		After a successfull build, you can run a container based on the image:
		</para>
		<screen>
		docker run -d --name mail_server -v /var/spool/mail:/var/spool/mail postfix:latest /bin/bash
		</screen>
		<para>
		The <literal>-d</literal> option runs the container in a detached mode and further communication by using the CLI will not be possible. To re-attach the container run:
		</para>
		<screen>
		docker attach &lt;container identification&gt;
		</screen>
	</sect1>
</chapter>
