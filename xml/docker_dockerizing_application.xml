<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="docker.dockerizing.application" xml:lang="en">
	<title>Dockerizing Applications</title>
	<para>
	Docker is a technology that can help you to minimize resources used to run or build your applications. There are several types of applications that are suitable to run inside a docker container like daemons, web pages or applications that expose ports for communication. You can use docker for automation of building processes by adding the build process into a docker image and then running containers based on that image.
	</para> 
	<para>
	Running your application inside a docker container provides you with the following advantages:
	</para>
	<itemizedlist>
		<listitem>
			<para>
			You can minimize the runtime environment of the application as you can add to the application docker image just the required processes and apllications.
			</para>
		</listitem>
		<listitem>
			<para>
			The image with your application is portable across machines also with different linux host systems.
			</para>
		</listitem>
		<listitem>
			<para>
			You can share the image of your application by using a repository.
			</para>
		</listitem>
		<listitem>
			<para>
			You can use different version of required packages in the container than the host system uses without having problems with dependencies.
			</para>
		</listitem>
		<listitem>
			<para>
			You can run several instances of the same application that are completely independent on each other.
			</para>
		</listitem>
	</itemizedlist>
	<para>
	Using docker for building of applications provides the following features:
	</para>
	<itemizedlist>
		<listitem>
			<para>
			You can prepare a complete building image.
			</para>
		</listitem>
		<listitem>
			<para>
			Your build runs always in the same environment.
			</para>
		</listitem>
		<listitem>
			<para>
			Your developers can test their code in the same environment as used in production.
			</para>
		</listitem>
	</itemizedlist>
	<para>
	The following sections provides you with examples and tips how to dockerize your applications. Prior to reading further, please make sure that you have activated your &sles; base docker image as described in the <xref linkend="Building_Pre-build_Images"/>. 
	</para>
	<sect1 xml:id="Application_with_specific_dependencies">
		<title>Running Application with Specific Package's Versions</title>
		<para>
		You may face a problem that your application uses a specific version of a package that is different from the package installed on the system that should run your application. You can modify your application to work with another version or you may create a docker image with that particular package version. The following example of a <filename>Dockerfile</filename> shows image based on a current version of  &sles; but with an older version of the <literal>example</literal> package
		</para>
		<screen>
		FROM sles12:latest
		MAINTAINER Tux
		
		RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0
		COPY application.rpm /tmp/
		
		RUN zypper --non-interactive in /tmp/application.rpm
				
		ENTRYPOINT ["/etc/bin/application"]
		
		CMD ["-i"]
		</screen>
		<para>
		The <filename>Dockerfile</filename> examples shown above performs the following operations during the <command>docker build</command>:
		</para>
		<orderedlist>
			<listitem>
				<para>
				updates the &sles; repositories.
				</para>
			</listitem>
			<listitem>
				<para>
				installs the desired version of the <literal>example</literal> package.
				</para>
			</listitem>
			<listitem>
				<para>
				copies your application package to the image. The source rpm must be place to the build context. 
				</para>
			</listitem>
			<listitem>
				<para>
				unpacks your application. 
				</para>
			</listitem>
			<listitem>
				<para>
				the last two steps run your application after a container is started.
				</para>
			</listitem>
		</orderedlist>
		<para>
		Now you can build the image by running in the same folder as the <filename>Dockerfile</filename> resides:
		</para>
		<screen>
		docker build --tag tux_application:latest 
		</screen>
		<para>
		After a successful build of the <literal>tux_application</literal> image, you can start a container based on your new image:
		</para>
		<screen>
		docker run -it --name application_instance tux_application:latest 
		</screen>
		<para>
		You have just created a container that runs a single instance of your application. Please bear in mind that after closing the application, the docker container exits as well.
		</para>
	</sect1>
	<sect1 xml:id="Applications_with_Configuration">
		<title>Running Applications with Specific Configuration</title>
		<para>
		You may need to run application that is delivered in a standard package accessible through &sles; repositories but you may need to use a different configuration or use specific environment variables. In case you would like to run several instances of the application with non-standard configuration, you can create your own image that will pass the custom configuration to the application. 
		</para>
		<para>
		An example with the <emphasis>example</emphasis> application follows:
		</para>		
		<screen>
		FROM sles12:latest
		
		RUN zypper ref &amp;&amp; zypper --non-interactive in example
		
		ENV BACKUP=/backup
		
		RUN mkdir -p $BACKUP
		COPY configuration_example /etc/example/
		
		ENTRYPOINT ["/etc/bin/example"]
		</screen>
		<para>
		The above example <filename>Dockerfile</filename> results in the following operations:
		</para>
		<orderedlist>
			<listitem>
				<para>
				refreshing of repositories and installation of the <emphasis>example</emphasis>.
				</para>
			</listitem>
			<listitem>
				<para>
				sets a <literal>BACKUP</literal> environment variable (the variable persists to containers started from the image). You can always overwrite the value of the variable by a new on during running the container and specifying a new valu
				</para>
			</listitem>
			<listitem>
				<para>
				creates the folder <literal>/backup</literal>.
				</para>
			</listitem>
			<listitem>
				<para>
				copies the  <filename>configuration_example</filename> to the image.
				</para>
			</listitem>
			<listitem>
				<para>
				runs the <emphasis>example</emphasis> application. 
				</para>
			</listitem>
		</orderedlist>
		<para>
		Now you can build the image and after a successful build, you can run a container based on your image.
		</para>
	</sect1>
	<sect1 xml:id="docker_daemons">
		<title>Applications Running in Background</title>
		<para>
		Your application may need to run in a background as daemon or as an application exposing ports for communication. In that case  Docker enables that as a typical docker container may be run in background.
		</para>
	</sect1>
</chapter>
