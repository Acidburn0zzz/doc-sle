AppArmor changes since 2.3
--------------------------

REMOVED:
* The ability for an unconfined process to arbitrarily set a tasks profile via the /proc/<pid>/attr/current interface was removed
* Path based mediation of chmod and chown was lost (BUT WAS RE-INTRODUCED, see new features below)
* Path based mediation of xattrs was lost
* Path based mediation of unix domain sockets was lost
* set capabilities - this feature is dangerous, has never been completed
* gnome apparmor applet - replaced by aa-notify


NEW FEATURES:
* Profile names can now contain regular expressions allowing all profile to match against multiple binaries
* pux transition - profile transitions so that x transitions can fall back to unconfined if a profile is not present
* file chmod, chown mediation reintroduced - write permission on the file is required
* change_hatv - The change_hatv api allows up to 16 hats to be specified, in order of preference, at the same time. This reduces or eliminates the need of probing for hats using the old change_hat api
* hierarchical namespaces
* alias allowing mapping to more than a single target
* new profile flags controlling profile path lookup behavior (chroot_relative,namespace_relative,attach_disconnected,no_attach_disconnected,chroot_attach,chroot_no_attach):
Two new profile flags have been introduced to aid in mediation of disconnected paths. AppArmor's default behavior is to reject new accesses to disconnected paths reporting back the pathname without a leadeding / Unfortunately this can break some applications, if a profile must allow for mediation of disconnected paths then the profile flag attach_disconnected can be used. This prepend a leading / to the reported name, however this may not result in the original name of the file as AppArmor can only attach the file to root, not to its original location.
/some/profile (attach_disconnected) {
   ...
}

* aa-decode utility - aa-decode is a new utility for decoding log messages, when values have been mangled
* apparmor_notifier - the apparmor notifier was rewritten to use the system notification infrastructure.
* standardize on all utils using the "aa-" prefix
* aa-disable, a utility to disable profiles
* Profile Naming and Attachment Specification
Profiles can now have a name and an attachment specification. This allows for profiles with a logical name that can be more meaningful to users/administrators than a profile name that contains globbing. For example, the default profile:
  /** { .. }    # a default profile
can be named
  profile default /** { .. }
Also, a profile using globbing/regular expressions can be named; for example:
  /usr/lib/firefox-3.*/firefox-*bin { }
can be named
  profile firefox /usr/lib/firefox-3.*/firefox-*bin { }

* Safe/unsafe Keyword
The safe and unsafe keywords have been added, this allows rules with x transitions to have environment scrubbing specified by keyword instead of using the case of the x modifier.
 /example1 Px,
is the same as
 safe /example1 px,
 safe /example1 Px,
 safe px /example1,
 safe Px /example1,
 /example2 px,
is the same as
 unsafe /example2 px,
 unsafe /example2 Px,
 unsafe px /example2,
 unsafe Px /example2,
The safe/unsafe keywords are mutually exclusive and can be used in a file rule after the owner keyword
 ie. [audit] [deny] [owner] [safe|unsafe] filerule,

* Consistent x (execute) Permissions
Leading and trailing x (execute) permissions have been made consistent. Previously when x permissions where used in the leading position
 px /example
The case of the x modifier was ignored and the unsafe keyword was required to indicate environment variable scrubbing was not to be done on exec. The case on the leading x permissions is now consistent with the use when the x permissions are specified after the path in a rule.
The safe and unsafe keywords retain the same function but can be used with all file rules that have x transitions.
This behavior change may affect profiles written using leading x permission that used lower case exec modifiers.
* Support for systemd
* prefer /var/log/syslog over /var/log/messages
* /var/run -> /run updates
* Basic mount rules are now supported (requires mount kernel patch)
* New introspection interface - the features file has been converted to a directory if new kernel patches or linux 3.4 is used
* aa-exec utility to launch programs under a specific profile
* aa-easyprof templated profile generation tool


CHANGES:
* null-complain-profile replaced by null-XXXX
* Audit changes - The kernel records create a the 'c' permission and delete as the 'd' permission.
