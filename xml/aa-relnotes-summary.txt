AppArmor changes since 2.3
--------------------------
TODO:
* FATE#308683: Drop incident reporting tools from yast2-apparmor
* FATE#308684: Drop profile generating tools from yast2-apparmor
* document aa-notify (replaced gnome apparmor applet)
* look if aa-disable can be inserted &explained somewhere in the manual
* look if aa-exec can be inserted &explained somewhere in the manual
* look if aa-easyprof can be inserted &explained somewhere in the manual
* put a tip to audit(? or apparmor) log file introducing aa-decode' 

DONE: 
* removed 'set capabilities' para in the apparmor startup
* added aa-disable intro -> #sec.apparmor.concept.tools
* added aa-exec intro -> #sec.apparmor.concept.tools 
* added aa-status intro -> #sec.apparmor.concept.tools
* added aa-easyprof intro -> #sec.apparmor.concept.tools
* profile name globbing -> #apparmor.profiles.pattern_matching
* profile namespaces -> #apparmor.profiles.namespaces 




NEW FEATURES:

* pux transition - profile transitions so that x transitions can fall back to unconfined if a profile is not present

# and also other fallbacks like Cix, Cux, Pix

New x transition fallbacks Pux, Cux, to allow falling back to "unconfined" when the profile isn't found. (hrmm and maybe Pix, Cix (though I think those were in 2.3)
  eg.
     /path pux,
     /path pux -> <profile>,
     pux /path,
     pux /path -> <profile>,




* alias allowing mapping to more than a single target

* new profile flags controlling profile path lookup behavior (chroot_relative,namespace_relative,attach_disconnected,no_attach_disconnected,chroot_attach,chroot_no_attach):
Two new profile flags have been introduced to aid in mediation of disconnected paths. AppArmor's default behavior is to reject new accesses to disconnected paths reporting back the pathname without a leadeding / Unfortunately this can break some applications, if a profile must allow for mediation of disconnected paths then the profile flag attach_disconnected can be used. This prepend a leading / to the reported name, however this may not result in the original name of the file as AppArmor can only attach the file to root, not to its original location.
/some/profile (attach_disconnected) {
   ...
}




* Safe/unsafe Keyword
The safe and unsafe keywords have been added, this allows rules with x transitions to have environment scrubbing specified by keyword instead of using the case of the x modifier.
 /example1 Px,
is the same as
 safe /example1 px,
 safe /example1 Px,
 safe px /example1,
 safe Px /example1,
 /example2 px,
is the same as
 unsafe /example2 px,
 unsafe /example2 Px,
 unsafe px /example2,
 unsafe Px /example2,
The safe/unsafe keywords are mutually exclusive and can be used in a file rule after the owner keyword
 ie. [audit] [deny] [owner] [safe|unsafe] filerule,

# I'm quite sure that nearly nobody uses the "safe" and "unsafe" keywords ;-)


CHANGES:
* null-complain-profile replaced by null-XXXX
* Audit changes - The kernel records create a the 'c' permission and delete as the 'd' permission.

# these two changes are only relevant if someone manually writes profiles based on the audit.log



New Tools - moved tools to aa- prefix except apparmor_parser
-----
aa-notify
aa-sandbox


libvirt support
---------------
  support has been added to libvirt to support apparmor as a security model


lxc support
-----------
  lxc has support to use apparmor as a security model





Policy
-------
Alias rule
 alias <source> -> <target>,

 allows declaring a source and alias of target (think of source like a symlink to target). This results in all rules beginning with source also allowing access to target. The source rule is retained allowing essentially allowing access to source and target.
 eg.
   alias /home/ -> /data/home/


file - the optional file keyword was added. This allows file rules to resemble other rule types which all start with a keyword (network, mount, ...)
  file /example/rule r,
  file,     # grant access to all files


allow - the optional allow prefix was added. If it is not specified and deny is not used it is implied
  allow file /example r,
  allow /example r,
  allow network,


capability rules can now list multiple capabilities in a single rule, or all caps with a bare keyword
  capability dac_override sys_admin,
  capability,     # Grant all capabilities

Support for several new capabilities have been added
  audit_write, audit_control, setfcap, mac_override, mac_admin, syslog, wake_alarm, block_suspend

File rules can use leading or trailing permissions
  File rule permissions do not need to be specified as a trailing permission any more. They can be used at the start of the rule. This is important in that, while not currently used, it makes file rules behave like other rule types.
  eg.
     /path rw,    #old style
     rw /path,    #leading perm
     file rw /path,
     allow file rw /path,


Policy Development
------------------
apparmor.vim - for syntax highlighting in vim editor


Alternate methods of declaring the complain and disabling a profile. This allows setting these modes without disturbing the profile file which might be owned by package management
The
  force_complain
and
  disable
directories (and support for) have been added. Placing a symlink in these directories back to the profile will result in the profile mode being set


Logging Message Format
----------------------
Logging was moved to LSM audit. It is largely the same as the format in aa2.3 however the base field type is now 1400 (auditd knows this as AVC) instead of 150X and instead of the log type (DENIED, ALLOWED, STATUS, ...) being encoded in the X value of the type there is an apparmor= field
eg.
  [229656.398829] type=1400 audit(1383816826.833:8093): apparmor="DENIED" operation="open" parent=1260 profile="/usr/lib/libvirt/virt-aa-helper" name="/home/jj/.libvirt/images/quantal.img" pid=14948 comm="virt-aa-helper" requested_mask="r" denied_mask="r" fsuid=0 ouid=0

The learning profile has transitioned from being
  null-complain-profile
to
  null-XXX
where XXX is a unique string to the new profile being learned


Configuration
-------------
/etc/apparmor/parser.conf - this file allow specifying a default set options that the parser will by default (see man apparmor_parser)


Interfaces
----------
- unconfined is a profile mode that can be reported via ps -Z or the profile interface (aa-status). This will show up on profiles that don't that have are not the unconfined profile.
  eg.
  /foo (unconfined)


